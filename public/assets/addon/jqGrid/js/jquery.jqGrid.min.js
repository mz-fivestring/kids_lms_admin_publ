/* 
* jqGrid  4.6.0 - jQuery Grid 
* Copyright (c) 2008, Tony Tomov, tony@trirand.com 
* Dual licensed under the MIT or GPL licenses 
* http://www.opensource.org/licenses/mit-license.php 
* http://www.gnu.org/licenses/gpl-2.0.html 
* Date:2014-02-20 
* Modules: grid.base.js; jquery.fmatter.js; grid.custom.js; grid.common.js; grid.formedit.js; grid.filter.js; grid.inlinedit.js; grid.celledit.js; jqModal.js; jqDnR.js; grid.subgrid.js; grid.grouping.js; grid.treegrid.js; grid.pivot.js; grid.import.js; JsonXml.js; grid.tbltogrid.js; grid.jqueryui.js; 
*/
(function ($) { "use strict"; $.jgrid = $.jgrid || {}; $.extend($.jgrid, { version: "4.6.0", htmlDecode: function (a) { if (a && (a === '&nbsp;' || a === '&#160;' || (a.length === 1 && a.charCodeAt(0) === 160))) { return "" } return !a ? a : String(a).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&") }, htmlEncode: function (a) { return !a ? a : String(a).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") }, format: function (a) { var b = $.makeArray(arguments).slice(1); if (a == null) { a = "" } return a.replace(/\{(\d+)\}/g, function (m, i) { return b[i] }) }, msie: navigator.appName === 'Microsoft Internet Explorer', msiever: function () { var a = -1; var b = navigator.userAgent; var c = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"); if (c.exec(b) != null) { a = parseFloat(RegExp.$1) } return a }, getCellIndex: function (a) { var c = $(a); if (c.is('tr')) { return -1 } c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0]; if ($.jgrid.msie) { return $.inArray(c, c.parentNode.cells) } return c.cellIndex }, stripHtml: function (v) { v = String(v); var a = /<("[^"]*"|'[^']*'|[^'">])*>/gi; if (v) { v = v.replace(a, ""); return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g, "'") : "" } return v }, stripPref: function (a, b) { var c = $.type(a); if (c === "string" || c === "number") { a = String(a); b = a !== "" ? String(b).replace(String(a), "") : b } return b }, parse: function (a) { var b = a; if (b.substr(0, 9) === "while(1);") { b = b.substr(9) } if (b.substr(0, 2) === "/*") { b = b.substr(2, b.length - 4) } if (!b) { b = "{}" } return ($.jgrid.useJSON === true && typeof JSON === 'object' && typeof JSON.parse === 'function') ? JSON.parse(b) : eval('(' + b + ')') }, parseDate: function (c, d, e, f) { var g = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g, timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, timezoneClip = /[^-+\dA-Z]/g, msDateRegExp = new RegExp("^\/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)\/$"), msMatch = ((typeof d === 'string') ? d.match(msDateRegExp) : null), pad = function (a, b) { a = String(a); b = parseInt(b, 10) || 2; while (a.length < b) { a = '0' + a } return a }, ts = { m: 1, d: 1, y: 1970, h: 0, i: 0, s: 0, u: 0 }, timestamp = 0, dM, k, hl, h12to24 = function (a, h) { if (a === 0) { if (h === 12) { h = 0 } } else { if (h !== 12) { h += 12 } } return h }; if (f === undefined) { f = $.jgrid.formatter.date } if (f.parseRe === undefined) { f.parseRe = /[#%\\\/:_;.,\t\s-]/ } if (f.masks.hasOwnProperty(c)) { c = f.masks[c] } if (d && d != null) { if (!isNaN(d - 0) && String(c).toLowerCase() === "u") { timestamp = new Date(parseFloat(d) * 1000) } else if (d.constructor === Date) { timestamp = d } else if (msMatch !== null) { timestamp = new Date(parseInt(msMatch[1], 10)); if (msMatch[3]) { var l = Number(msMatch[5]) * 60 + Number(msMatch[6]); l *= ((msMatch[4] === '-') ? 1 : -1); l -= timestamp.getTimezoneOffset(); timestamp.setTime(Number(Number(timestamp) + (l * 60 * 1000))) } } else { var l = 0; if (f.srcformat === 'ISO8601Long' && d.charAt(d.length - 1) === 'Z') { l -= (new Date()).getTimezoneOffset() } d = String(d).replace(/\T/g, "#").replace(/\t/, "%").split(f.parseRe); c = c.replace(/\T/g, "#").replace(/\t/, "%").split(f.parseRe); for (k = 0, hl = c.length; k < hl; k++) { if (c[k] === 'M') { dM = $.inArray(d[k], f.monthNames); if (dM !== -1 && dM < 12) { d[k] = dM + 1; ts.m = d[k] } } if (c[k] === 'F') { dM = $.inArray(d[k], f.monthNames, 12); if (dM !== -1 && dM > 11) { d[k] = dM + 1 - 12; ts.m = d[k] } } if (c[k] === 'a') { dM = $.inArray(d[k], f.AmPm); if (dM !== -1 && dM < 2 && d[k] === f.AmPm[dM]) { d[k] = dM; ts.h = h12to24(d[k], ts.h) } } if (c[k] === 'A') { dM = $.inArray(d[k], f.AmPm); if (dM !== -1 && dM > 1 && d[k] === f.AmPm[dM]) { d[k] = dM - 2; ts.h = h12to24(d[k], ts.h) } } if (c[k] === 'g') { ts.h = parseInt(d[k], 10) } if (d[k] !== undefined) { ts[c[k].toLowerCase()] = parseInt(d[k], 10) } } if (ts.f) { ts.m = ts.f } if (ts.m === 0 && ts.y === 0 && ts.d === 0) { return "&#160;" } ts.m = parseInt(ts.m, 10) - 1; var m = ts.y; if (m >= 70 && m <= 99) { ts.y = 1900 + ts.y } else if (m >= 0 && m <= 69) { ts.y = 2000 + ts.y } timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u); if (l > 0) { timestamp.setTime(Number(Number(timestamp) + (l * 60 * 1000))) } } } else { timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u) } if (e === undefined) { return timestamp } if (f.masks.hasOwnProperty(e)) { e = f.masks[e] } else if (!e) { e = 'Y-m-d' } var G = timestamp.getHours(), i = timestamp.getMinutes(), j = timestamp.getDate(), n = timestamp.getMonth() + 1, o = timestamp.getTimezoneOffset(), s = timestamp.getSeconds(), u = timestamp.getMilliseconds(), w = timestamp.getDay(), Y = timestamp.getFullYear(), N = (w + 6) % 7 + 1, z = (new Date(Y, n - 1, j) - new Date(Y, 0, 1)) / 86400000, flags = { d: pad(j), D: f.dayNames[w], j: j, l: f.dayNames[w + 7], N: N, S: f.S(j), w: w, z: z, W: N < 5 ? Math.floor((z + N - 1) / 7) + 1 : Math.floor((z + N - 1) / 7) || ((new Date(Y - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52), F: f.monthNames[n - 1 + 12], m: pad(n), M: f.monthNames[n - 1], n: n, t: '?', L: '?', o: '?', Y: Y, y: String(Y).substring(2), a: G < 12 ? f.AmPm[0] : f.AmPm[1], A: G < 12 ? f.AmPm[2] : f.AmPm[3], B: '?', g: G % 12 || 12, G: G, h: pad(G % 12 || 12), H: pad(G), i: pad(i), s: pad(s), u: u, e: '?', I: '?', O: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4), P: '?', T: (String(timestamp).match(timezone) || [""]).pop().replace(timezoneClip, ""), Z: '?', c: '?', r: '?', U: Math.floor(timestamp / 1000) }; return e.replace(g, function (a) { return flags.hasOwnProperty(a) ? flags[a] : a.substring(1) }) }, jqID: function (a) { return String(a).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&") }, guid: 1, uidPref: 'jqg', randId: function (a) { return (a || $.jgrid.uidPref) + ($.jgrid.guid++) }, getAccessor: function (a, b) { var c, p, prm = [], i; if (typeof b === 'function') { return b(a) } c = a[b]; if (c === undefined) { try { if (typeof b === 'string') { prm = b.split('.') } i = prm.length; if (i) { c = a; while (c && i--) { p = prm.shift(); c = c[p] } } } catch (e) { } } return c }, getXmlData: function (a, b, c) { var d, m = typeof b === 'string' ? b.match(/^(.*)\[(\w+)\]$/) : null; if (typeof b === 'function') { return b(a) } if (m && m[2]) { return m[1] ? $(m[1], a).attr(m[2]) : $(a).attr(m[2]) } d = $(b, a); if (c) { return d } return d.length > 0 ? $(d).text() : undefined }, cellWidth: function () { var a = $("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;display:block;'></td></tr></table></div>"), testCell = a.appendTo("body").find("td").width(); a.remove(); return Math.abs(testCell - 5) > 0.1 }, cell_width: true, ajaxOptions: {}, from: function (n) { var o = function (d, q) { if (typeof d === "string") { d = $.data(d) } var m = this, _data = d, _usecase = true, _trim = false, _query = q, _stripNum = /[\$,%]/g, _lastCommand = null, _lastField = null, _orDepth = 0, _negate = false, _queuedOperator = "", _sorting = [], _useProperties = true; if (typeof d === "object" && d.push) { if (d.length > 0) { if (typeof d[0] !== "object") { _useProperties = false } else { _useProperties = true } } } else { throw "data provides is not an array"; } this._hasData = function () { return _data === null ? false : _data.length === 0 ? false : true }; this._getStr = function (s) { var a = []; if (_trim) { a.push("jQuery.trim(") } a.push("String(" + s + ")"); if (_trim) { a.push(")") } if (!_usecase) { a.push(".toLowerCase()") } return a.join("") }; this._strComp = function (a) { if (typeof a === "string") { return ".toString()" } return "" }; this._group = function (f, u) { return ({ field: f.toString(), unique: u, items: [] }) }; this._toStr = function (a) { if (_trim) { a = $.trim(a) } a = a.toString().replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); return _usecase ? a : a.toLowerCase() }; this._funcLoop = function (a) { var b = []; $.each(_data, function (i, v) { b.push(a(v)) }); return b }; this._append = function (s) { var i; if (_query === null) { _query = "" } else { _query += _queuedOperator === "" ? " && " : _queuedOperator } for (i = 0; i < _orDepth; i++) { _query += "(" } if (_negate) { _query += "!" } _query += "(" + s + ")"; _negate = false; _queuedOperator = ""; _orDepth = 0 }; this._setCommand = function (f, c) { _lastCommand = f; _lastField = c }; this._resetNegate = function () { _negate = false }; this._repeatCommand = function (f, v) { if (_lastCommand === null) { return m } if (f !== null && v !== null) { return _lastCommand(f, v) } if (_lastField === null) { return _lastCommand(f) } if (!_useProperties) { return _lastCommand(f) } return _lastCommand(_lastField, f) }; this._equals = function (a, b) { return (m._compare(a, b, 1) === 0) }; this._compare = function (a, b, d) { var toString = Object.prototype.toString; if (d === undefined) { d = 1 } if (a === undefined) { a = null } if (b === undefined) { b = null } if (a === null && b === null) { return 0 } if (a === null && b !== null) { return 1 } if (a !== null && b === null) { return -1 } if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') { if (a < b) { return -d } if (a > b) { return d } return 0 } if (!_usecase && typeof a !== "number" && typeof b !== "number") { a = String(a); b = String(b) } if (a < b) { return -d } if (a > b) { return d } return 0 }; this._performSort = function () { if (_sorting.length === 0) { return } _data = m._doSort(_data, 0) }; this._doSort = function (d, q) { var a = _sorting[q].by, dir = _sorting[q].dir, type = _sorting[q].type, dfmt = _sorting[q].datefmt, sfunc = _sorting[q].sfunc; if (q === _sorting.length - 1) { return m._getOrder(d, a, dir, type, dfmt, sfunc) } q++; var b = m._getGroup(d, a, dir, type, dfmt), results = [], i, j, sorted; for (i = 0; i < b.length; i++) { sorted = m._doSort(b[i].items, q); for (j = 0; j < sorted.length; j++) { results.push(sorted[j]) } } return results }; this._getOrder = function (c, d, e, f, g, h) { var k = [], _sortData = [], newDir = e === "a" ? 1 : -1, i, ab, j, findSortKey; if (f === undefined) { f = "text" } if (f === 'float' || f === 'number' || f === 'currency' || f === 'numeric') { findSortKey = function (a) { var b = parseFloat(String(a).replace(_stripNum, '')); return isNaN(b) ? 0.00 : b } } else if (f === 'int' || f === 'integer') { findSortKey = function (a) { return a ? parseFloat(String(a).replace(_stripNum, '')) : 0 } } else if (f === 'date' || f === 'datetime') { findSortKey = function (a) { return $.jgrid.parseDate(g, a).getTime() } } else if ($.isFunction(f)) { findSortKey = f } else { findSortKey = function (a) { a = a ? $.trim(String(a)) : ""; return _usecase ? a : a.toLowerCase() } } $.each(c, function (i, v) { ab = d !== "" ? $.jgrid.getAccessor(v, d) : v; if (ab === undefined) { ab = "" } ab = findSortKey(ab, v); _sortData.push({ 'vSort': ab, 'index': i }) }); if ($.isFunction(h)) { _sortData.sort(function (a, b) { a = a.vSort; b = b.vSort; return h.call(this, a, b, newDir) }) } else { _sortData.sort(function (a, b) { a = a.vSort; b = b.vSort; return m._compare(a, b, newDir) }) } j = 0; var l = c.length; while (j < l) { i = _sortData[j].index; k.push(c[i]); j++ } return k }; this._getGroup = function (a, b, c, d, e) { var f = [], group = null, last = null, val; $.each(m._getOrder(a, b, c, d, e), function (i, v) { val = $.jgrid.getAccessor(v, b); if (val == null) { val = "" } if (!m._equals(last, val)) { last = val; if (group !== null) { f.push(group) } group = m._group(b, val) } group.items.push(v) }); if (group !== null) { f.push(group) } return f }; this.ignoreCase = function () { _usecase = false; return m }; this.useCase = function () { _usecase = true; return m }; this.trim = function () { _trim = true; return m }; this.noTrim = function () { _trim = false; return m }; this.execute = function () { var a = _query, results = []; if (a === null) { return m } $.each(_data, function () { if (eval(a)) { results.push(this) } }); _data = results; return m }; this.data = function () { return _data }; this.select = function (f) { m._performSort(); if (!m._hasData()) { return [] } m.execute(); if ($.isFunction(f)) { var a = []; $.each(_data, function (i, v) { a.push(f(v)) }); return a } return _data }; this.hasMatch = function () { if (!m._hasData()) { return false } m.execute(); return _data.length > 0 }; this.andNot = function (f, v, x) { _negate = !_negate; return m.and(f, v, x) }; this.orNot = function (f, v, x) { _negate = !_negate; return m.or(f, v, x) }; this.not = function (f, v, x) { return m.andNot(f, v, x) }; this.and = function (f, v, x) { _queuedOperator = " && "; if (f === undefined) { return m } return m._repeatCommand(f, v, x) }; this.or = function (f, v, x) { _queuedOperator = " || "; if (f === undefined) { return m } return m._repeatCommand(f, v, x) }; this.orBegin = function () { _orDepth++; return m }; this.orEnd = function () { if (_query !== null) { _query += ")" } return m }; this.isNot = function (f) { _negate = !_negate; return m.is(f) }; this.is = function (f) { m._append('this.' + f); m._resetNegate(); return m }; this._compareValues = function (a, f, v, b, t) { var c; if (_useProperties) { c = 'jQuery.jgrid.getAccessor(this,\'' + f + '\')' } else { c = 'this' } if (v === undefined) { v = null } var d = v, swst = t.stype === undefined ? "text" : t.stype; if (v !== null) { switch (swst) { case 'int': case 'integer': d = (isNaN(Number(d)) || d === "") ? '0' : d; c = 'parseInt(' + c + ',10)'; d = 'parseInt(' + d + ',10)'; break; case 'float': case 'number': case 'numeric': d = String(d).replace(_stripNum, ''); d = (isNaN(Number(d)) || d === "") ? '0' : d; c = 'parseFloat(' + c + ')'; d = 'parseFloat(' + d + ')'; break; case 'date': case 'datetime': d = String($.jgrid.parseDate(t.newfmt || 'Y-m-d', d).getTime()); c = 'jQuery.jgrid.parseDate("' + t.srcfmt + '",' + c + ').getTime()'; break; default: c = m._getStr(c); d = m._getStr('"' + m._toStr(d) + '"') } } m._append(c + ' ' + b + ' ' + d); m._setCommand(a, f); m._resetNegate(); return m }; this.equals = function (f, v, t) { return m._compareValues(m.equals, f, v, "==", t) }; this.notEquals = function (f, v, t) { return m._compareValues(m.equals, f, v, "!==", t) }; this.isNull = function (f, v, t) { return m._compareValues(m.equals, f, null, "===", t) }; this.greater = function (f, v, t) { return m._compareValues(m.greater, f, v, ">", t) }; this.less = function (f, v, t) { return m._compareValues(m.less, f, v, "<", t) }; this.greaterOrEquals = function (f, v, t) { return m._compareValues(m.greaterOrEquals, f, v, ">=", t) }; this.lessOrEquals = function (f, v, t) { return m._compareValues(m.lessOrEquals, f, v, "<=", t) }; this.startsWith = function (f, v) { var a = (v == null) ? f : v, length = _trim ? $.trim(a.toString()).length : a.toString().length; if (_useProperties) { m._append(m._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(0,' + length + ') == ' + m._getStr('"' + m._toStr(v) + '"')) } else { if (v != null) { length = _trim ? $.trim(v.toString()).length : v.toString().length } m._append(m._getStr('this') + '.substr(0,' + length + ') == ' + m._getStr('"' + m._toStr(f) + '"')) } m._setCommand(m.startsWith, f); m._resetNegate(); return m }; this.endsWith = function (f, v) { var a = (v == null) ? f : v, length = _trim ? $.trim(a.toString()).length : a.toString().length; if (_useProperties) { m._append(m._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(' + m._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.length-' + length + ',' + length + ') == "' + m._toStr(v) + '"') } else { m._append(m._getStr('this') + '.substr(' + m._getStr('this') + '.length-"' + m._toStr(f) + '".length,"' + m._toStr(f) + '".length) == "' + m._toStr(f) + '"') } m._setCommand(m.endsWith, f); m._resetNegate(); return m }; this.contains = function (f, v) { if (_useProperties) { m._append(m._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.indexOf("' + m._toStr(v) + '",0) > -1') } else { m._append(m._getStr('this') + '.indexOf("' + m._toStr(f) + '",0) > -1') } m._setCommand(m.contains, f); m._resetNegate(); return m }; this.groupBy = function (a, b, c, d) { if (!m._hasData()) { return null } return m._getGroup(_data, a, b, c, d) }; this.orderBy = function (a, b, c, d, e) { b = b == null ? "a" : $.trim(b.toString().toLowerCase()); if (c == null) { c = "text" } if (d == null) { d = "Y-m-d" } if (e == null) { e = false } if (b === "desc" || b === "descending") { b = "d" } if (b === "asc" || b === "ascending") { b = "a" } _sorting.push({ by: a, dir: b, type: c, datefmt: d, sfunc: e }); return m }; return m }; return new o(n, null) }, getMethod: function (a) { return this.getAccessor($.fn.jqGrid, a) }, extend: function (a) { $.extend($.fn.jqGrid, a); if (!this.no_legacy_api) { $.fn.extend(a) } } }); $.fn.jqGrid = function (N) { if (typeof N === 'string') { var O = $.jgrid.getMethod(N); if (!O) { throw ("jqGrid - No such method: " + N); } var P = $.makeArray(arguments).slice(1); return O.apply(this, P) } return this.each(function () { if (this.grid) { return } var p = $.extend(true, { url: "", height: 150, page: 1, rowNum: 20, rowTotal: null, records: 0, pager: "", pgbuttons: true, pginput: true, colModel: [], rowList: [], colNames: [], sortorder: "asc", sortname: "", datatype: "xml", mtype: "GET", altRows: false, selarrrow: [], savedRow: [], shrinkToFit: true, xmlReader: {}, jsonReader: {}, subGrid: false, subGridModel: [], reccount: 0, lastpage: 0, lastsort: 0, selrow: null, beforeSelectRow: null, onSelectRow: null, onSortCol: null, ondblClickRow: null, onRightClickRow: null, onPaging: null, onSelectAll: null, onInitGrid: null, loadComplete: null, gridComplete: null, loadError: null, loadBeforeSend: null, afterInsertRow: null, beforeRequest: null, beforeProcessing: null, onHeaderClick: null, viewrecords: false, loadonce: false, multiselect: false, multikey: false, editurl: null, search: false, caption: "", hidegrid: true, hiddengrid: false, postData: {}, userData: {}, treeGrid: false, treeGridModel: 'nested', treeReader: {}, treeANode: -1, ExpandColumn: null, tree_root_level: 0, prmNames: { page: "page", rows: "rows", sort: "sidx", order: "sord", search: "_search", nd: "nd", id: "id", oper: "oper", editoper: "edit", addoper: "add", deloper: "del", subgridid: "id", npage: null, totalrows: "totalrows" }, forceFit: false, gridstate: "visible", cellEdit: false, cellsubmit: "remote", nv: 0, loadui: "enable", toolbar: [false, ""], scroll: false, multiboxonly: false, deselectAfterSort: true, scrollrows: false, autowidth: false, scrollOffset: 18, cellLayout: 5, subGridWidth: 20, multiselectWidth: 20, gridview: false, rownumWidth: 25, rownumbers: false, pagerpos: 'center', recordpos: 'right', footerrow: false, userDataOnFooter: false, hoverrows: true, altclass: 'ui-priority-secondary', viewsortcols: [false, 'vertical', true], resizeclass: '', autoencode: false, remapColumns: [], ajaxGridOptions: {}, direction: "ltr", toppager: false, headertitles: false, scrollTimeout: 40, data: [], _index: {}, grouping: false, groupingView: { groupField: [], groupOrder: [], groupText: [], groupColumnShow: [], groupSummary: [], showSummaryOnHide: false, sortitems: [], sortnames: [], summary: [], summaryval: [], plusicon: 'ui-icon-circlesmall-plus', minusicon: 'ui-icon-circlesmall-minus', displayField: [], groupSummaryPos: [], formatDisplayField: [], _locgr: false }, ignoreCase: false, cmTemplate: {}, idPrefix: "", multiSort: false }, $.jgrid.defaults, N || {}); var u = this, grid = { headers: [], cols: [], footers: [], dragStart: function (i, x, y) { var a = $(this.bDiv).offset().left; this.resizing = { idx: i, startX: x.clientX, sOL: x.clientX - a }; this.hDiv.style.cursor = "col-resize"; this.curGbox = $("#rs_m" + $.jgrid.jqID(p.id), "#gbox_" + $.jgrid.jqID(p.id)); this.curGbox.css({ display: "block", left: x.clientX - a, top: y[1], height: y[2] }); $(u).triggerHandler("jqGridResizeStart", [x, i]); if ($.isFunction(p.resizeStart)) { p.resizeStart.call(u, x, i) } document.onselectstart = function () { return false } }, dragMove: function (x) { if (this.resizing) { var a = x.clientX - this.resizing.startX, h = this.headers[this.resizing.idx], newWidth = p.direction === "ltr" ? h.width + a : h.width - a, hn, nWn; if (newWidth > 33) { this.curGbox.css({ left: this.resizing.sOL + a }); if (p.forceFit === true) { hn = this.headers[this.resizing.idx + p.nv]; nWn = p.direction === "ltr" ? hn.width - a : hn.width + a; if (nWn > 33) { h.newWidth = newWidth; hn.newWidth = nWn } } else { this.newWidth = p.direction === "ltr" ? p.tblwidth + a : p.tblwidth - a; h.newWidth = newWidth } } } }, dragEnd: function () { this.hDiv.style.cursor = "default"; if (this.resizing) { var a = this.resizing.idx, nw = this.headers[a].newWidth || this.headers[a].width; nw = parseInt(nw, 10); this.resizing = false; $("#rs_m" + $.jgrid.jqID(p.id)).css("display", "none"); p.colModel[a].width = nw; this.headers[a].width = nw; this.headers[a].el.style.width = nw + "px"; this.cols[a].style.width = nw + "px"; if (this.footers.length > 0) { this.footers[a].style.width = nw + "px" } if (p.forceFit === true) { nw = this.headers[a + p.nv].newWidth || this.headers[a + p.nv].width; this.headers[a + p.nv].width = nw; this.headers[a + p.nv].el.style.width = nw + "px"; this.cols[a + p.nv].style.width = nw + "px"; if (this.footers.length > 0) { this.footers[a + p.nv].style.width = nw + "px" } p.colModel[a + p.nv].width = nw } else { p.tblwidth = this.newWidth || p.tblwidth; $('table:first', this.bDiv).css("width", p.tblwidth + "px"); $('table:first', this.hDiv).css("width", p.tblwidth + "px"); this.hDiv.scrollLeft = this.bDiv.scrollLeft; if (p.footerrow) { $('table:first', this.sDiv).css("width", p.tblwidth + "px"); this.sDiv.scrollLeft = this.bDiv.scrollLeft } } $(u).triggerHandler("jqGridResizeStop", [nw, a]); if ($.isFunction(p.resizeStop)) { p.resizeStop.call(u, nw, a) } } this.curGbox = null; document.onselectstart = function () { return true } }, populateVisible: function () { if (grid.timer) { clearTimeout(grid.timer) } grid.timer = null; var a = $(grid.bDiv).height(); if (!a) { return } var b = $("table:first", grid.bDiv); var c, rh; if (b[0].rows.length) { try { c = b[0].rows[1]; rh = c ? $(c).outerHeight() || grid.prevRowHeight : grid.prevRowHeight } catch (pv) { rh = grid.prevRowHeight } } if (!rh) { return } grid.prevRowHeight = rh; var d = p.rowNum; var e = grid.scrollTop = grid.bDiv.scrollTop; var f = Math.round(b.position().top) - e; var g = f + b.height(); var h = rh * d; var i, npage, empty; if (g < a && f <= 0 && (p.lastpage === undefined || parseInt((g + e + h - 1) / h, 10) <= p.lastpage)) { npage = parseInt((a - g + h - 1) / h, 10); if (g >= 0 || npage < 2 || p.scroll === true) { i = Math.round((g + e) / h) + 1; f = -1 } else { f = 1 } } if (f > 0) { i = parseInt(e / h, 10) + 1; npage = parseInt((e + a) / h, 10) + 2 - i; empty = true } if (npage) { if (p.lastpage && (i > p.lastpage || p.lastpage === 1 || (i === p.page && i === p.lastpage))) { return } if (grid.hDiv.loading) { grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout) } else { p.page = i; if (empty) { grid.selectionPreserver(b[0]); grid.emptyRows.call(b[0], false, false) } grid.populate(npage) } } }, scrollGrid: function (e) { if (p.scroll) { var a = grid.bDiv.scrollTop; if (grid.scrollTop === undefined) { grid.scrollTop = 0 } if (a !== grid.scrollTop) { grid.scrollTop = a; if (grid.timer) { clearTimeout(grid.timer) } grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout) } } grid.hDiv.scrollLeft = grid.bDiv.scrollLeft; if (p.footerrow) { grid.sDiv.scrollLeft = grid.bDiv.scrollLeft } if (e) { e.stopPropagation() } }, selectionPreserver: function (a) { var p = a.p, sr = p.selrow, sra = p.selarrrow ? $.makeArray(p.selarrrow) : null, left = a.grid.bDiv.scrollLeft, restoreSelection = function () { var i; p.selrow = null; p.selarrrow = []; if (p.multiselect && sra && sra.length > 0) { for (i = 0; i < sra.length; i++) { if (sra[i] !== sr) { $(a).jqGrid("setSelection", sra[i], false, null) } } } if (sr) { $(a).jqGrid("setSelection", sr, false, null) } a.grid.bDiv.scrollLeft = left; $(a).unbind('.selectionPreserver', restoreSelection) }; $(a).bind('jqGridGridComplete.selectionPreserver', restoreSelection) } }; if (this.tagName.toUpperCase() !== 'TABLE') { alert("Element is not a table"); return } if (document.documentMode !== undefined) { if (document.documentMode <= 5) { alert("Grid can not be used in this ('quirks') mode!"); return } } $(this).empty().attr("tabindex", "0"); this.p = p; this.p.useProp = !!$.fn.prop; var i, dir; if (this.p.colNames.length === 0) { for (i = 0; i < this.p.colModel.length; i++) { this.p.colNames[i] = this.p.colModel[i].label || this.p.colModel[i].name } } if (this.p.colNames.length !== this.p.colModel.length) { alert($.jgrid.errors.model); return } var z = $("<div class='ui-jqgrid-view'></div>"), isMSIE = $.jgrid.msie; u.p.direction = $.trim(u.p.direction.toLowerCase()); if ($.inArray(u.p.direction, ["ltr", "rtl"]) === -1) { u.p.direction = "ltr" } dir = u.p.direction; $(z).insertBefore(this); $(this).removeClass("scroll").appendTo(z); var A = $("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>"); $(A).attr({ "id": "gbox_" + this.id, "dir": dir }).insertBefore(z); $(z).attr("id", "gview_" + this.id).appendTo(A); $("<div class='ui-widget-overlay jqgrid-overlay' id='lui_" + this.id + "'></div>").insertBefore(z); $("<div class='loading ui-state-default ui-state-active' id='load_" + this.id + "'>" + this.p.loadtext + "</div>").insertBefore(z); $(this).attr({ cellspacing: "0", cellpadding: "0", border: "0", "role": "grid", "aria-multiselectable": !!this.p.multiselect, "aria-labelledby": "gbox_" + this.id }); var B = ["shiftKey", "altKey", "ctrlKey"], intNum = function (a, b) { a = parseInt(a, 10); if (isNaN(a)) { return b || 0 } return a }, formatCol = function (a, b, c, d, e, f) { var g = u.p.colModel[a], ral = g.align, result = "style=\"", clas = g.classes, nm = g.name, celp, acp = []; if (ral) { result += "text-align:" + ral + ";" } if (g.hidden === true) { result += "display:none;" } if (b === 0) { result += "width: " + grid.headers[a].width + "px;" } else if (g.cellattr && $.isFunction(g.cellattr)) { celp = g.cellattr.call(u, e, c, d, g, f); if (celp && typeof celp === "string") { celp = celp.replace(/style/i, 'style').replace(/title/i, 'title'); if (celp.indexOf('title') > -1) { g.title = false } if (celp.indexOf('class') > -1) { clas = undefined } acp = celp.replace('-style', '-sti').split(/style/); if (acp.length === 2) { acp[1] = $.trim(acp[1].replace('-sti', '-style').replace("=", "")); if (acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) { acp[1] = acp[1].substring(1) } result += acp[1].replace(/'/gi, '"') } else { result += "\"" } } } if (!acp.length) { acp[0] = ""; result += "\"" } result += (clas !== undefined ? (" class=\"" + clas + "\"") : "") + ((g.title && c) ? (" title=\"" + $.jgrid.stripHtml(c) + "\"") : ""); result += " aria-describedby=\"" + u.p.id + "_" + nm + "\""; return result + acp[0] }, cellVal = function (a) { return a == null || a === "" ? "&#160;" : (u.p.autoencode ? $.jgrid.htmlEncode(a) : String(a)) }, formatter = function (a, b, c, d, e) { var f = u.p.colModel[c], v; if (f.formatter !== undefined) { a = String(u.p.idPrefix) !== "" ? $.jgrid.stripPref(u.p.idPrefix, a) : a; var g = { rowId: a, colModel: f, gid: u.p.id, pos: c }; if ($.isFunction(f.formatter)) { v = f.formatter.call(u, b, g, d, e) } else if ($.fmatter) { v = $.fn.fmatter.call(u, f.formatter, b, g, d, e) } else { v = cellVal(b) } } else { v = cellVal(b) } return v }, addCell = function (a, b, c, d, e, f) { var v, prp; v = formatter(a, b, c, e, 'add'); prp = formatCol(c, d, v, e, a, f); return "<td role=\"gridcell\" " + prp + ">" + v + "</td>" }, addMulti = function (a, b, c, d) { var v = "<input role=\"checkbox\" type=\"checkbox\"" + " id=\"jqg_" + u.p.id + "_" + a + "\" class=\"cbox\" name=\"jqg_" + u.p.id + "_" + a + "\"" + (d ? "checked=\"checked\"" : "") + "/>", prp = formatCol(b, c, '', null, a, true); return "<td role=\"gridcell\" " + prp + ">" + v + "</td>" }, addRowNum = function (a, b, c, d) { var v = (parseInt(c, 10) - 1) * parseInt(d, 10) + 1 + b, prp = formatCol(a, b, v, null, b, true); return "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" " + prp + ">" + v + "</td>" }, reader = function (a) { var b, f = [], j = 0, i; for (i = 0; i < u.p.colModel.length; i++) { b = u.p.colModel[i]; if (b.name !== 'cb' && b.name !== 'subgrid' && b.name !== 'rn') { f[j] = a === "local" ? b.name : ((a === "xml" || a === "xmlstring") ? b.xmlmap || b.name : b.jsonmap || b.name); if (u.p.keyIndex !== false && b.key === true) { u.p.keyName = f[j] } j++ } } return f }, orderedCols = function (a) { var b = u.p.remapColumns; if (!b || !b.length) { b = $.map(u.p.colModel, function (v, i) { return i }) } if (a) { b = $.map(b, function (v) { return v < a ? null : v - a }) } return b }, emptyRows = function (a, b) { var c; if (this.p.deepempty) { $(this.rows).slice(1).remove() } else { c = this.rows.length > 0 ? this.rows[0] : null; $(this.firstChild).empty().append(c) } if (a && this.p.scroll) { $(this.grid.bDiv.firstChild).css({ height: "auto" }); $(this.grid.bDiv.firstChild.firstChild).css({ height: 0, display: "none" }); if (this.grid.bDiv.scrollTop !== 0) { this.grid.bDiv.scrollTop = 0 } } if (b === true && this.p.treeGrid) { this.p.data = []; this.p._index = {} } }, refreshIndex = function () { var a = u.p.data.length, idname, i, val, ni = u.p.rownumbers === true ? 1 : 0, gi = u.p.multiselect === true ? 1 : 0, si = u.p.subGrid === true ? 1 : 0; if (u.p.keyIndex === false || u.p.loadonce === true) { idname = u.p.localReader.id } else { idname = u.p.colModel[u.p.keyIndex + gi + si + ni].name } for (i = 0; i < a; i++) { val = $.jgrid.getAccessor(u.p.data[i], idname); if (val === undefined) { val = String(i + 1) } u.p._index[val] = i } }, constructTr = function (a, b, c, d, e, f) { var g = '-1', restAttr = '', attrName, style = b ? 'display:none;' : '', classes = 'ui-widget-content jqgrow ui-row-' + u.p.direction + (c ? ' ' + c : '') + (f ? ' ui-state-highlight' : ''), rowAttrObj = $(u).triggerHandler("jqGridRowAttr", [d, e, a]); if (typeof rowAttrObj !== "object") { rowAttrObj = $.isFunction(u.p.rowattr) ? u.p.rowattr.call(u, d, e, a) : {} } if (!$.isEmptyObject(rowAttrObj)) { if (rowAttrObj.hasOwnProperty("id")) { a = rowAttrObj.id; delete rowAttrObj.id } if (rowAttrObj.hasOwnProperty("tabindex")) { g = rowAttrObj.tabindex; delete rowAttrObj.tabindex } if (rowAttrObj.hasOwnProperty("style")) { style += rowAttrObj.style; delete rowAttrObj.style } if (rowAttrObj.hasOwnProperty("class")) { classes += ' ' + rowAttrObj['class']; delete rowAttrObj['class'] } try { delete rowAttrObj.role } catch (ra) { } for (attrName in rowAttrObj) { if (rowAttrObj.hasOwnProperty(attrName)) { restAttr += ' ' + attrName + '=' + rowAttrObj[attrName] } } } return '<tr role="row" id="' + a + '" tabindex="' + g + '" class="' + classes + '"' + (style === '' ? '' : ' style="' + style + '"') + restAttr + '>' }, addXmlData = function (b, t, c, d, g) { var h = new Date(), locdata = (u.p.datatype !== "local" && u.p.loadonce) || u.p.datatype === "xmlstring", xmlid = "_id_", xmlRd = u.p.xmlReader, frd = u.p.datatype === "local" ? "local" : "xml"; if (locdata) { u.p.data = []; u.p._index = {}; u.p.localReader.id = xmlid } u.p.reccount = 0; if ($.isXMLDoc(b)) { if (u.p.treeANode === -1 && !u.p.scroll) { emptyRows.call(u, false, true); c = 1 } else { c = c > 1 ? c : 1 } } else { return } var l = $(u), i, fpos, ir = 0, v, gi = u.p.multiselect === true ? 1 : 0, si = 0, addSubGridCell, ni = u.p.rownumbers === true ? 1 : 0, idn, getId, f = [], F, rd = {}, xmlr, rid, rowData = [], cn = (u.p.altRows === true) ? u.p.altclass : "", cn1; if (u.p.subGrid === true) { si = 1; addSubGridCell = $.jgrid.getMethod("addSubGridCell") } if (!xmlRd.repeatitems) { f = reader(frd) } if (u.p.keyIndex === false) { idn = $.isFunction(xmlRd.id) ? xmlRd.id.call(u, b) : xmlRd.id } else { idn = u.p.keyIndex } if (f.length > 0 && !isNaN(idn)) { idn = u.p.keyName } if (String(idn).indexOf("[") === -1) { if (f.length) { getId = function (a, k) { return $(idn, a).text() || k } } else { getId = function (a, k) { return $(xmlRd.cell, a).eq(idn).text() || k } } } else { getId = function (a, k) { return a.getAttribute(idn.replace(/[\[\]]/g, "")) || k } } u.p.userData = {}; u.p.page = intNum($.jgrid.getXmlData(b, xmlRd.page), u.p.page); u.p.lastpage = intNum($.jgrid.getXmlData(b, xmlRd.total), 1); u.p.records = intNum($.jgrid.getXmlData(b, xmlRd.records)); if ($.isFunction(xmlRd.userdata)) { u.p.userData = xmlRd.userdata.call(u, b) || {} } else { $.jgrid.getXmlData(b, xmlRd.userdata, true).each(function () { u.p.userData[this.getAttribute("name")] = $(this).text() }) } var m = $.jgrid.getXmlData(b, xmlRd.root, true); m = $.jgrid.getXmlData(m, xmlRd.row, true); if (!m) { m = [] } var n = m.length, j = 0, grpdata = [], rn = parseInt(u.p.rowNum, 10), br = u.p.scroll ? $.jgrid.randId() : 1, altr; if (n > 0 && u.p.page <= 0) { u.p.page = 1 } if (m && n) { if (g) { rn *= g + 1 } var o = $.isFunction(u.p.afterInsertRow), hiderow = false, groupingPrepare; if (u.p.grouping) { hiderow = u.p.groupingView.groupCollapse === true; groupingPrepare = $.jgrid.getMethod("groupingPrepare") } while (j < n) { xmlr = m[j]; rid = getId(xmlr, br + j); rid = u.p.idPrefix + rid; altr = c === 0 ? 0 : c + 1; cn1 = (altr + j) % 2 === 1 ? cn : ''; var p = rowData.length; rowData.push(""); if (ni) { rowData.push(addRowNum(0, j, u.p.page, u.p.rowNum)) } if (gi) { rowData.push(addMulti(rid, ni, j, false)) } if (si) { rowData.push(addSubGridCell.call(l, gi + ni, j + c)) } if (xmlRd.repeatitems) { if (!F) { F = orderedCols(gi + si + ni) } var q = $.jgrid.getXmlData(xmlr, xmlRd.cell, true); $.each(F, function (k) { var a = q[this]; if (!a) { return false } v = a.textContent || a.text; rd[u.p.colModel[k + gi + si + ni].name] = v; rowData.push(addCell(rid, v, k + gi + si + ni, j + c, xmlr, rd)) }) } else { for (i = 0; i < f.length; i++) { v = $.jgrid.getXmlData(xmlr, f[i]); rd[u.p.colModel[i + gi + si + ni].name] = v; rowData.push(addCell(rid, v, i + gi + si + ni, j + c, xmlr, rd)) } } rowData[p] = constructTr(rid, hiderow, cn1, rd, xmlr, false); rowData.push("</tr>"); if (u.p.grouping) { grpdata.push(rowData); if (!u.p.groupingView._locgr) { groupingPrepare.call(l, rd, j) } rowData = [] } if (locdata || u.p.treeGrid === true) { rd[xmlid] = $.jgrid.stripPref(u.p.idPrefix, rid); u.p.data.push(rd); u.p._index[rd[xmlid]] = u.p.data.length - 1 } if (u.p.gridview === false) { $("tbody:first", t).append(rowData.join('')); l.triggerHandler("jqGridAfterInsertRow", [rid, rd, xmlr]); if (o) { u.p.afterInsertRow.call(u, rid, rd, xmlr) } rowData = [] } rd = {}; ir++; j++; if (ir === rn) { break } } } if (u.p.gridview === true) { fpos = u.p.treeANode > -1 ? u.p.treeANode : 0; if (u.p.grouping) { if (!locdata) { l.jqGrid('groupingRender', grpdata, u.p.colModel.length, u.p.page, rn) } grpdata = null } else if (u.p.treeGrid === true && fpos > 0) { $(u.rows[fpos]).after(rowData.join('')) } else { $("tbody:first", t).append(rowData.join('')) } } if (u.p.subGrid === true) { try { l.jqGrid("addSubGrid", gi + ni) } catch (_) { } } u.p.totaltime = new Date() - h; if (ir > 0) { if (u.p.records === 0) { u.p.records = n } } rowData = null; if (u.p.treeGrid === true) { try { l.jqGrid("setTreeNode", fpos + 1, ir + fpos + 1) } catch (e) { } } if (!u.p.treeGrid && !u.p.scroll) { u.grid.bDiv.scrollTop = 0 } u.p.reccount = ir; u.p.treeANode = -1; if (u.p.userDataOnFooter) { l.jqGrid("footerData", "set", u.p.userData, true) } if (locdata) { u.p.records = n; u.p.lastpage = Math.ceil(n / rn) } if (!d) { u.updatepager(false, true) } if (locdata) { while (ir < n) { xmlr = m[ir]; rid = getId(xmlr, ir + br); rid = u.p.idPrefix + rid; if (xmlRd.repeatitems) { if (!F) { F = orderedCols(gi + si + ni) } var r = $.jgrid.getXmlData(xmlr, xmlRd.cell, true); $.each(F, function (k) { var a = r[this]; if (!a) { return false } v = a.textContent || a.text; rd[u.p.colModel[k + gi + si + ni].name] = v }) } else { for (i = 0; i < f.length; i++) { v = $.jgrid.getXmlData(xmlr, f[i]); rd[u.p.colModel[i + gi + si + ni].name] = v } } rd[xmlid] = $.jgrid.stripPref(u.p.idPrefix, rid); if (u.p.grouping) { groupingPrepare.call(l, rd, ir) } u.p.data.push(rd); u.p._index[rd[xmlid]] = u.p.data.length - 1; rd = {}; ir++ } if (u.p.grouping) { u.p.groupingView._locgr = true; l.jqGrid('groupingRender', grpdata, u.p.colModel.length, u.p.page, rn); grpdata = null } } }, addJSONData = function (a, t, b, c, d) { var g = new Date(); if (a) { if (u.p.treeANode === -1 && !u.p.scroll) { emptyRows.call(u, false, true); b = 1 } else { b = b > 1 ? b : 1 } } else { return } var h, locid = "_id_", frd, locdata = (u.p.datatype !== "local" && u.p.loadonce) || u.p.datatype === "jsonstring"; if (locdata) { u.p.data = []; u.p._index = {}; u.p.localReader.id = locid } u.p.reccount = 0; if (u.p.datatype === "local") { h = u.p.localReader; frd = 'local' } else { h = u.p.jsonReader; frd = 'json' } var k = $(u), ir = 0, v, i, j, f = [], cur, gi = u.p.multiselect ? 1 : 0, si = u.p.subGrid === true ? 1 : 0, addSubGridCell, ni = u.p.rownumbers === true ? 1 : 0, arrayReader = orderedCols(gi + si + ni), objectReader = reader(frd), rowReader, len, drows, idn, rd = {}, fpos, idr, rowData = [], cn = (u.p.altRows === true) ? u.p.altclass : "", cn1; u.p.page = intNum($.jgrid.getAccessor(a, h.page), u.p.page); u.p.lastpage = intNum($.jgrid.getAccessor(a, h.total), 1); u.p.records = intNum($.jgrid.getAccessor(a, h.records)); u.p.userData = $.jgrid.getAccessor(a, h.userdata) || {}; if (si) { addSubGridCell = $.jgrid.getMethod("addSubGridCell") } if (u.p.keyIndex === false) { idn = $.isFunction(h.id) ? h.id.call(u, a) : h.id } else { idn = u.p.keyIndex } if (!h.repeatitems) { f = objectReader; if (f.length > 0 && !isNaN(idn)) { idn = u.p.keyName } } drows = $.jgrid.getAccessor(a, h.root); if (drows == null && $.isArray(a)) { drows = a } if (!drows) { drows = [] } len = drows.length; i = 0; if (len > 0 && u.p.page <= 0) { u.p.page = 1 } var l = parseInt(u.p.rowNum, 10), br = u.p.scroll ? $.jgrid.randId() : 1, altr, selected = false, selr; if (d) { l *= d + 1 } if (u.p.datatype === "local" && !u.p.deselectAfterSort) { selected = true } var m = $.isFunction(u.p.afterInsertRow), grpdata = [], hiderow = false, groupingPrepare; if (u.p.grouping) { hiderow = u.p.groupingView.groupCollapse === true; groupingPrepare = $.jgrid.getMethod("groupingPrepare") } while (i < len) { cur = drows[i]; idr = $.jgrid.getAccessor(cur, idn); if (idr === undefined) { if (typeof idn === "number" && u.p.colModel[idn + gi + si + ni] != null) { idr = $.jgrid.getAccessor(cur, u.p.colModel[idn + gi + si + ni].name) } if (idr === undefined) { idr = br + i; if (f.length === 0) { if (h.cell) { var n = $.jgrid.getAccessor(cur, h.cell) || cur; idr = n != null && n[idn] !== undefined ? n[idn] : idr; n = null } } } } idr = u.p.idPrefix + idr; altr = b === 1 ? 0 : b; cn1 = (altr + i) % 2 === 1 ? cn : ''; if (selected) { if (u.p.multiselect) { selr = ($.inArray(idr, u.p.selarrrow) !== -1) } else { selr = (idr === u.p.selrow) } } var o = rowData.length; rowData.push(""); if (ni) { rowData.push(addRowNum(0, i, u.p.page, u.p.rowNum)) } if (gi) { rowData.push(addMulti(idr, ni, i, selr)) } if (si) { rowData.push(addSubGridCell.call(k, gi + ni, i + b)) } rowReader = objectReader; if (h.repeatitems) { if (h.cell) { cur = $.jgrid.getAccessor(cur, h.cell) || cur } if ($.isArray(cur)) { rowReader = arrayReader } } for (j = 0; j < rowReader.length; j++) { v = $.jgrid.getAccessor(cur, rowReader[j]); rd[u.p.colModel[j + gi + si + ni].name] = v; rowData.push(addCell(idr, v, j + gi + si + ni, i + b, cur, rd)) } rowData[o] = constructTr(idr, hiderow, cn1, rd, cur, selr); rowData.push("</tr>"); if (u.p.grouping) { grpdata.push(rowData); if (!u.p.groupingView._locgr) { groupingPrepare.call(k, rd, i) } rowData = [] } if (locdata || u.p.treeGrid === true) { rd[locid] = $.jgrid.stripPref(u.p.idPrefix, idr); u.p.data.push(rd); u.p._index[rd[locid]] = u.p.data.length - 1 } if (u.p.gridview === false) { $("#" + $.jgrid.jqID(u.p.id) + " tbody:first").append(rowData.join('')); k.triggerHandler("jqGridAfterInsertRow", [idr, rd, cur]); if (m) { u.p.afterInsertRow.call(u, idr, rd, cur) } rowData = [] } rd = {}; ir++; i++; if (ir === l) { break } } if (u.p.gridview === true) { fpos = u.p.treeANode > -1 ? u.p.treeANode : 0; if (u.p.grouping) { if (!locdata) { k.jqGrid('groupingRender', grpdata, u.p.colModel.length, u.p.page, l); grpdata = null } } else if (u.p.treeGrid === true && fpos > 0) { $(u.rows[fpos]).after(rowData.join('')) } else { $("#" + $.jgrid.jqID(u.p.id) + " tbody:first").append(rowData.join('')) } } if (u.p.subGrid === true) { try { k.jqGrid("addSubGrid", gi + ni) } catch (_) { } } u.p.totaltime = new Date() - g; if (ir > 0) { if (u.p.records === 0) { u.p.records = len } } rowData = null; if (u.p.treeGrid === true) { try { k.jqGrid("setTreeNode", fpos + 1, ir + fpos + 1) } catch (e) { } } if (!u.p.treeGrid && !u.p.scroll) { u.grid.bDiv.scrollTop = 0 } u.p.reccount = ir; u.p.treeANode = -1; if (u.p.userDataOnFooter) { k.jqGrid("footerData", "set", u.p.userData, true) } if (locdata) { u.p.records = len; u.p.lastpage = Math.ceil(len / l) } if (!c) { u.updatepager(false, true) } if (locdata) { while (ir < len && drows[ir]) { cur = drows[ir]; idr = $.jgrid.getAccessor(cur, idn); if (idr === undefined) { if (typeof idn === "number" && u.p.colModel[idn + gi + si + ni] != null) { idr = $.jgrid.getAccessor(cur, u.p.colModel[idn + gi + si + ni].name) } if (idr === undefined) { idr = br + ir; if (f.length === 0) { if (h.cell) { var p = $.jgrid.getAccessor(cur, h.cell) || cur; idr = p != null && p[idn] !== undefined ? p[idn] : idr; p = null } } } } if (cur) { idr = u.p.idPrefix + idr; rowReader = objectReader; if (h.repeatitems) { if (h.cell) { cur = $.jgrid.getAccessor(cur, h.cell) || cur } if ($.isArray(cur)) { rowReader = arrayReader } } for (j = 0; j < rowReader.length; j++) { rd[u.p.colModel[j + gi + si + ni].name] = $.jgrid.getAccessor(cur, rowReader[j]) } rd[locid] = $.jgrid.stripPref(u.p.idPrefix, idr); if (u.p.grouping) { groupingPrepare.call(k, rd, ir) } u.p.data.push(rd); u.p._index[rd[locid]] = u.p.data.length - 1; rd = {} } ir++ } if (u.p.grouping) { u.p.groupingView._locgr = true; k.jqGrid('groupingRender', grpdata, u.p.colModel.length, u.p.page, l); grpdata = null } } }, addLocalData = function () { var c = u.p.multiSort ? [] : "", sto = [], fndsort = false, cmtypes = {}, grtypes = [], grindexes = [], srcformat, sorttype, newformat; if (!$.isArray(u.p.data)) { return } var d = u.p.grouping ? u.p.groupingView : false, lengrp, gin; $.each(u.p.colModel, function () { sorttype = this.sorttype || "text"; if (sorttype === "date" || sorttype === "datetime") { if (this.formatter && typeof this.formatter === 'string' && this.formatter === 'date') { if (this.formatoptions && this.formatoptions.srcformat) { srcformat = this.formatoptions.srcformat } else { srcformat = $.jgrid.formatter.date.srcformat } if (this.formatoptions && this.formatoptions.newformat) { newformat = this.formatoptions.newformat } else { newformat = $.jgrid.formatter.date.newformat } } else { srcformat = newformat = this.datefmt || "Y-m-d" } cmtypes[this.name] = { "stype": sorttype, "srcfmt": srcformat, "newfmt": newformat, "sfunc": this.sortfunc || null} } else { cmtypes[this.name] = { "stype": sorttype, "srcfmt": '', "newfmt": '', "sfunc": this.sortfunc || null} } if (u.p.grouping) { for (gin = 0, lengrp = d.groupField.length; gin < lengrp; gin++) { if (this.name === d.groupField[gin]) { var a = this.name; if (this.index) { a = this.index } grtypes[gin] = cmtypes[a]; grindexes[gin] = a } } } if (u.p.multiSort) { if (this.lso) { c.push(this.name); var b = this.lso.split("-"); sto.push(b[b.length - 1]) } } else { if (!fndsort && (this.index === u.p.sortname || this.name === u.p.sortname)) { c = this.name; fndsort = true } } }); if (u.p.treeGrid) { $(u).jqGrid("SortTree", c, u.p.sortorder, cmtypes[c].stype || 'text', cmtypes[c].srcfmt || ''); return } var f = { 'eq': function (a) { return a.equals }, 'ne': function (a) { return a.notEquals }, 'lt': function (a) { return a.less }, 'le': function (a) { return a.lessOrEquals }, 'gt': function (a) { return a.greater }, 'ge': function (a) { return a.greaterOrEquals }, 'cn': function (a) { return a.contains }, 'nc': function (a, b) { return b === "OR" ? a.orNot().contains : a.andNot().contains }, 'bw': function (a) { return a.startsWith }, 'bn': function (a, b) { return b === "OR" ? a.orNot().startsWith : a.andNot().startsWith }, 'en': function (a, b) { return b === "OR" ? a.orNot().endsWith : a.andNot().endsWith }, 'ew': function (a) { return a.endsWith }, 'ni': function (a, b) { return b === "OR" ? a.orNot().equals : a.andNot().equals }, 'in': function (a) { return a.equals }, 'nu': function (a) { return a.isNull }, 'nn': function (a, b) { return b === "OR" ? a.orNot().isNull : a.andNot().isNull } }, query = $.jgrid.from(u.p.data); if (u.p.ignoreCase) { query = query.ignoreCase() } function tojLinq(a) { var s = 0, index, gor, ror, opr, rule; if (a.groups != null) { gor = a.groups.length && a.groupOp.toString().toUpperCase() === "OR"; if (gor) { query.orBegin() } for (index = 0; index < a.groups.length; index++) { if (s > 0 && gor) { query.or() } try { tojLinq(a.groups[index]) } catch (e) { alert(e) } s++ } if (gor) { query.orEnd() } } if (a.rules != null) { try { ror = a.rules.length && a.groupOp.toString().toUpperCase() === "OR"; if (ror) { query.orBegin() } for (index = 0; index < a.rules.length; index++) { rule = a.rules[index]; opr = a.groupOp.toString().toUpperCase(); if (f[rule.op] && rule.field) { if (s > 0 && opr && opr === "OR") { query = query.or() } query = f[rule.op](query, opr)(rule.field, rule.data, cmtypes[rule.field]) } s++ } if (ror) { query.orEnd() } } catch (g) { alert(g) } } } if (u.p.search === true) { var h = u.p.postData.filters; if (h) { if (typeof h === "string") { h = $.jgrid.parse(h) } tojLinq(h) } else { try { query = f[u.p.postData.searchOper](query)(u.p.postData.searchField, u.p.postData.searchString, cmtypes[u.p.postData.searchField]) } catch (se) { } } } if (u.p.grouping) { for (gin = 0; gin < lengrp; gin++) { query.orderBy(grindexes[gin], d.groupOrder[gin], grtypes[gin].stype, grtypes[gin].srcfmt) } } if (u.p.multiSort) { $.each(c, function (i) { query.orderBy(this, sto[i], cmtypes[this].stype, cmtypes[this].srcfmt, cmtypes[this].sfunc) }) } else { if (c && u.p.sortorder && fndsort) { if (u.p.sortorder.toUpperCase() === "DESC") { query.orderBy(u.p.sortname, "d", cmtypes[c].stype, cmtypes[c].srcfmt, cmtypes[c].sfunc) } else { query.orderBy(u.p.sortname, "a", cmtypes[c].stype, cmtypes[c].srcfmt, cmtypes[c].sfunc) } } } var k = query.select(), recordsperpage = parseInt(u.p.rowNum, 10), total = k.length, page = parseInt(u.p.page, 10), totalpages = Math.ceil(total / recordsperpage), retresult = {}; if ((u.p.search || u.p.resetsearch) && u.p.grouping && u.p.groupingView._locgr) { u.p.groupingView.groups = []; var j, grPrepare = $.jgrid.getMethod("groupingPrepare"), key, udc; if (u.p.footerrow && u.p.userDataOnFooter) { for (key in u.p.userData) { if (u.p.userData.hasOwnProperty(key)) { u.p.userData[key] = 0 } } udc = true } for (j = 0; j < total; j++) { if (udc) { for (key in u.p.userData) { u.p.userData[key] += parseFloat(k[j][key] || 0) } } grPrepare.call($(u), k[j], j, recordsperpage) } } k = k.slice((page - 1) * recordsperpage, page * recordsperpage); query = null; cmtypes = null; retresult[u.p.localReader.total] = totalpages; retresult[u.p.localReader.page] = page; retresult[u.p.localReader.records] = total; retresult[u.p.localReader.root] = k; retresult[u.p.localReader.userdata] = u.p.userData; k = null; return retresult }, updatepager = function (a, b) { var c, last, base, from, to, tot, fmt, pgboxes = "", sppg, tspg = u.p.pager ? "_" + $.jgrid.jqID(u.p.pager.substr(1)) : "", tspg_t = u.p.toppager ? "_" + u.p.toppager.substr(1) : ""; base = parseInt(u.p.page, 10) - 1; if (base < 0) { base = 0 } base = base * parseInt(u.p.rowNum, 10); to = base + u.p.reccount; if (u.p.scroll) { var d = $("tbody:first > tr:gt(0)", u.grid.bDiv); base = to - d.length; u.p.reccount = d.length; var e = d.outerHeight() || u.grid.prevRowHeight; if (e) { var f = base * e; var g = parseInt(u.p.records, 10) * e; $(">div:first", u.grid.bDiv).css({ height: g }).children("div:first").css({ height: f, display: f ? "" : "none" }); if (u.grid.bDiv.scrollTop == 0 && u.p.page > 1) { u.grid.bDiv.scrollTop = u.p.rowNum * (u.p.page - 1) * e } } u.grid.bDiv.scrollLeft = u.grid.hDiv.scrollLeft } pgboxes = u.p.pager || ""; pgboxes += u.p.toppager ? (pgboxes ? "," + u.p.toppager : u.p.toppager) : ""; if (pgboxes) { fmt = $.jgrid.formatter.integer || {}; c = intNum(u.p.page); last = intNum(u.p.lastpage); $(".selbox", pgboxes)[this.p.useProp ? 'prop' : 'attr']("disabled", false); if (u.p.pginput === true) { $('.ui-pg-input', pgboxes).val(u.p.page); sppg = u.p.toppager ? '#sp_1' + tspg + ",#sp_1" + tspg_t : '#sp_1' + tspg; $(sppg).html($.fmatter ? $.fmatter.util.NumberFormat(u.p.lastpage, fmt) : u.p.lastpage) } if (u.p.viewrecords) { if (u.p.reccount === 0) { $(".ui-paging-info", pgboxes).html(u.p.emptyrecords) } else { from = base + 1; tot = u.p.records; if ($.fmatter) { from = $.fmatter.util.NumberFormat(from, fmt); to = $.fmatter.util.NumberFormat(to, fmt); tot = $.fmatter.util.NumberFormat(tot, fmt) } $(".ui-paging-info", pgboxes).html($.jgrid.format(u.p.recordtext, from, to, tot)) } } if (u.p.pgbuttons === true) { if (c <= 0) { c = last = 0 } if (c === 1 || c === 0) { $("#first" + tspg + ", #prev" + tspg).addClass('ui-state-disabled').removeClass('ui-state-hover'); if (u.p.toppager) { $("#first_t" + tspg_t + ", #prev_t" + tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover') } } else { $("#first" + tspg + ", #prev" + tspg).removeClass('ui-state-disabled'); if (u.p.toppager) { $("#first_t" + tspg_t + ", #prev_t" + tspg_t).removeClass('ui-state-disabled') } } if (c === last || c === 0) { $("#next" + tspg + ", #last" + tspg).addClass('ui-state-disabled').removeClass('ui-state-hover'); if (u.p.toppager) { $("#next_t" + tspg_t + ", #last_t" + tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover') } } else { $("#next" + tspg + ", #last" + tspg).removeClass('ui-state-disabled'); if (u.p.toppager) { $("#next_t" + tspg_t + ", #last_t" + tspg_t).removeClass('ui-state-disabled') } } } } if (a === true && u.p.rownumbers === true) { $(">td.jqgrid-rownum", u.rows).each(function (i) { $(this).html(base + 1 + i) }) } if (b && u.p.jqgdnd) { $(u).jqGrid('gridDnD', 'updateDnD') } $(u).triggerHandler("jqGridGridComplete"); if ($.isFunction(u.p.gridComplete)) { u.p.gridComplete.call(u) } $(u).triggerHandler("jqGridAfterGridComplete") }, beginReq = function () { u.grid.hDiv.loading = true; if (u.p.hiddengrid) { return } switch (u.p.loadui) { case "disable": break; case "enable": $("#load_" + $.jgrid.jqID(u.p.id)).show(); break; case "block": $("#lui_" + $.jgrid.jqID(u.p.id)).show(); $("#load_" + $.jgrid.jqID(u.p.id)).show(); break } }, endReq = function () { u.grid.hDiv.loading = false; switch (u.p.loadui) { case "disable": break; case "enable": $("#load_" + $.jgrid.jqID(u.p.id)).hide(); break; case "block": $("#lui_" + $.jgrid.jqID(u.p.id)).hide(); $("#load_" + $.jgrid.jqID(u.p.id)).hide(); break } }, populate = function (d) { if (!u.grid.hDiv.loading) { var e = u.p.scroll && d === false, prm = {}, dt, dstr, pN = u.p.prmNames; if (u.p.page <= 0) { u.p.page = Math.min(1, u.p.lastpage) } if (pN.search !== null) { prm[pN.search] = u.p.search } if (pN.nd !== null) { prm[pN.nd] = new Date().getTime() } if (pN.rows !== null) { prm[pN.rows] = u.p.rowNum } if (pN.page !== null) { prm[pN.page] = u.p.page } if (pN.sort !== null) { prm[pN.sort] = u.p.sortname } if (pN.order !== null) { prm[pN.order] = u.p.sortorder } if (u.p.rowTotal !== null && pN.totalrows !== null) { prm[pN.totalrows] = u.p.rowTotal } var f = $.isFunction(u.p.loadComplete), lc = f ? u.p.loadComplete : null; var g = 0; d = d || 1; if (d > 1) { if (pN.npage !== null) { prm[pN.npage] = d; g = d - 1; d = 1 } else { lc = function (a) { u.p.page++; u.grid.hDiv.loading = false; if (f) { u.p.loadComplete.call(u, a) } populate(d - 1) } } } else if (pN.npage !== null) { delete u.p.postData[pN.npage] } if (u.p.grouping) { $(u).jqGrid('groupingSetup'); var h = u.p.groupingView, gi, gs = ""; for (gi = 0; gi < h.groupField.length; gi++) { var i = h.groupField[gi]; $.each(u.p.colModel, function (a, b) { if (b.name === i && b.index) { i = b.index } }); gs += i + " " + h.groupOrder[gi] + ", " } prm[pN.sort] = gs + prm[pN.sort] } $.extend(u.p.postData, prm); var j = !u.p.scroll ? 1 : u.rows.length - 1; var k = $(u).triggerHandler("jqGridBeforeRequest"); if (k === false || k === 'stop') { return } if ($.isFunction(u.p.datatype)) { u.p.datatype.call(u, u.p.postData, "load_" + u.p.id, j, d, g); return } if ($.isFunction(u.p.beforeRequest)) { k = u.p.beforeRequest.call(u); if (k === undefined) { k = true } if (k === false) { return } } dt = u.p.datatype.toLowerCase(); switch (dt) { case "json": case "jsonp": case "xml": case "script": $.ajax($.extend({ url: u.p.url, type: u.p.mtype, dataType: dt, data: $.isFunction(u.p.serializeGridData) ? u.p.serializeGridData.call(u, u.p.postData) : u.p.postData, success: function (a, b, c) { if ($.isFunction(u.p.beforeProcessing)) { if (u.p.beforeProcessing.call(u, a, b, c) === false) { endReq(); return } } if (dt === "xml") { addXmlData(a, u.grid.bDiv, j, d > 1, g) } else { addJSONData(a, u.grid.bDiv, j, d > 1, g) } $(u).triggerHandler("jqGridLoadComplete", [a]); if (lc) { lc.call(u, a) } $(u).triggerHandler("jqGridAfterLoadComplete", [a]); if (e) { u.grid.populateVisible() } if (u.p.loadonce || u.p.treeGrid) { u.p.datatype = "local" } a = null; if (d === 1) { endReq() } }, error: function (a, b, c) { if ($.isFunction(u.p.loadError)) { u.p.loadError.call(u, a, b, c) } if (d === 1) { endReq() } a = null }, beforeSend: function (a, b) { var c = true; if ($.isFunction(u.p.loadBeforeSend)) { c = u.p.loadBeforeSend.call(u, a, b) } if (c === undefined) { c = true } if (c === false) { return false } beginReq() } }, $.jgrid.ajaxOptions, u.p.ajaxGridOptions)); break; case "xmlstring": beginReq(); dstr = typeof u.p.datastr !== 'string' ? u.p.datastr : $.parseXML(u.p.datastr); addXmlData(dstr, u.grid.bDiv); $(u).triggerHandler("jqGridLoadComplete", [dstr]); if (f) { u.p.loadComplete.call(u, dstr) } $(u).triggerHandler("jqGridAfterLoadComplete", [dstr]); u.p.datatype = "local"; u.p.datastr = null; endReq(); break; case "jsonstring": beginReq(); if (typeof u.p.datastr === 'string') { dstr = $.jgrid.parse(u.p.datastr) } else { dstr = u.p.datastr } addJSONData(dstr, u.grid.bDiv); $(u).triggerHandler("jqGridLoadComplete", [dstr]); if (f) { u.p.loadComplete.call(u, dstr) } $(u).triggerHandler("jqGridAfterLoadComplete", [dstr]); u.p.datatype = "local"; u.p.datastr = null; endReq(); break; case "local": case "clientside": beginReq(); u.p.datatype = "local"; var l = addLocalData(); addJSONData(l, u.grid.bDiv, j, d > 1, g); $(u).triggerHandler("jqGridLoadComplete", [l]); if (lc) { lc.call(u, l) } $(u).triggerHandler("jqGridAfterLoadComplete", [l]); if (e) { u.grid.populateVisible() } endReq(); break } } }, setHeadCheckBox = function (a) { $('#cb_' + $.jgrid.jqID(u.p.id), u.grid.hDiv)[u.p.useProp ? 'prop' : 'attr']("checked", a); var b = u.p.frozenColumns ? u.p.id + "_frozen" : ""; if (b) { $('#cb_' + $.jgrid.jqID(u.p.id), u.grid.fhDiv)[u.p.useProp ? 'prop' : 'attr']("checked", a) } }, setPager = function (c, d) { var f = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>", pginp = "", pgl = "<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>", str = "", pgcnt, lft, cent, rgt, twd, tdw, i, clearVals = function (a) { var b; if ($.isFunction(u.p.onPaging)) { b = u.p.onPaging.call(u, a) } if (b === 'stop') { return false } u.p.selrow = null; if (u.p.multiselect) { u.p.selarrrow = []; setHeadCheckBox(false) } u.p.savedRow = []; return true }; c = c.substr(1); d += "_" + c; pgcnt = "pg_" + c; lft = c + "_left"; cent = c + "_center"; rgt = c + "_right"; $("#" + $.jgrid.jqID(c)).append("<div id='" + pgcnt + "' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody><tr><td id='" + lft + "' align='left'></td><td id='" + cent + "' align='center' style='white-space:pre;'></td><td id='" + rgt + "' align='right'></td></tr></tbody></table></div>").attr("dir", "ltr"); if (u.p.rowList.length > 0) { str = "<td dir='" + dir + "'>"; str += "<select class='ui-pg-selbox' role='listbox'>"; for (i = 0; i < u.p.rowList.length; i++) { str += "<option role=\"option\" value=\"" + u.p.rowList[i] + "\"" + ((u.p.rowNum === u.p.rowList[i]) ? " selected=\"selected\"" : "") + ">" + u.p.rowList[i] + "</option>" } str += "</select></td>" } if (dir === "rtl") { pgl += str } if (u.p.pginput === true) { pginp = "<td dir='" + dir + "'>" + $.jgrid.format(u.p.pgtext || "", "<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + $.jgrid.jqID(c) + "'></span>") + "</td>" } if (u.p.pgbuttons === true) { var g = ["first" + d, "prev" + d, "next" + d, "last" + d]; if (dir === "rtl") { g.reverse() } pgl += "<td id='" + g[0] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-first'></span></td>"; pgl += "<td id='" + g[1] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-prev'></span></td>"; pgl += pginp !== "" ? f + pginp + f : ""; pgl += "<td id='" + g[2] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-next'></span></td>"; pgl += "<td id='" + g[3] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-end'></span></td>" } else if (pginp !== "") { pgl += pginp } if (dir === "ltr") { pgl += str } pgl += "</tr></tbody></table>"; if (u.p.viewrecords === true) { $("td#" + c + "_" + u.p.recordpos, "#" + pgcnt).append("<div dir='" + dir + "' style='text-align:" + u.p.recordpos + "' class='ui-paging-info'></div>") } $("td#" + c + "_" + u.p.pagerpos, "#" + pgcnt).append(pgl); tdw = $(".ui-jqgrid").css("font-size") || "11px"; $(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + tdw + ";visibility:hidden;' ></div>"); twd = $(pgl).clone().appendTo("#testpg").width(); $("#testpg").remove(); if (twd > 0) { if (pginp !== "") { twd += 50 } $("td#" + c + "_" + u.p.pagerpos, "#" + pgcnt).width(twd) } u.p._nvtd = []; u.p._nvtd[0] = twd ? Math.floor((u.p.width - twd) / 2) : Math.floor(u.p.width / 3); u.p._nvtd[1] = 0; pgl = null; $('.ui-pg-selbox', "#" + pgcnt).bind('change', function () { if (!clearVals('records')) { return false } u.p.page = Math.round(u.p.rowNum * (u.p.page - 1) / this.value - 0.5) + 1; u.p.rowNum = this.value; if (u.p.pager) { $('.ui-pg-selbox', u.p.pager).val(this.value) } if (u.p.toppager) { $('.ui-pg-selbox', u.p.toppager).val(this.value) } populate(); return false }); if (u.p.pgbuttons === true) { $(".ui-pg-button", "#" + pgcnt).hover(function () { if ($(this).hasClass('ui-state-disabled')) { this.style.cursor = 'default' } else { $(this).addClass('ui-state-hover'); this.style.cursor = 'pointer' } }, function () { if (!$(this).hasClass('ui-state-disabled')) { $(this).removeClass('ui-state-hover'); this.style.cursor = "default" } }); $("#first" + $.jgrid.jqID(d) + ", #prev" + $.jgrid.jqID(d) + ", #next" + $.jgrid.jqID(d) + ", #last" + $.jgrid.jqID(d)).click(function () { if ($(this).hasClass("ui-state-disabled")) { return false } var a = intNum(u.p.page, 1), last = intNum(u.p.lastpage, 1), selclick = false, fp = true, pp = true, np = true, lp = true; if (last === 0 || last === 1) { fp = false; pp = false; np = false; lp = false } else if (last > 1 && a >= 1) { if (a === 1) { fp = false; pp = false } else if (a === last) { np = false; lp = false } } else if (last > 1 && a === 0) { np = false; lp = false; a = last - 1 } if (!clearVals(this.id)) { return false } if (this.id === 'first' + d && fp) { u.p.page = 1; selclick = true } if (this.id === 'prev' + d && pp) { u.p.page = (a - 1); selclick = true } if (this.id === 'next' + d && np) { u.p.page = (a + 1); selclick = true } if (this.id === 'last' + d && lp) { u.p.page = last; selclick = true } if (selclick) { populate() } return false }) } if (u.p.pginput === true) { $('input.ui-pg-input', "#" + pgcnt).keypress(function (e) { var a = e.charCode || e.keyCode || 0; if (a === 13) { if (!clearVals('user')) { return false } $(this).val(intNum($(this).val(), 1)); u.p.page = ($(this).val() > 0) ? $(this).val() : u.p.page; populate(); return false } return this }) } }, multiSort = function (a, b) { var c, sort = "", cm = u.p.colModel, fs = false, ls, selTh = u.p.frozenColumns ? b : u.grid.headers[a].el, so = ""; $("span.ui-grid-ico-sort", selTh).addClass('ui-state-disabled'); $(selTh).attr("aria-selected", "false"); if (cm[a].lso) { if (cm[a].lso === "asc") { cm[a].lso += "-desc"; so = "desc" } else if (cm[a].lso === "desc") { cm[a].lso += "-asc"; so = "asc" } else if (cm[a].lso === "asc-desc" || cm[a].lso === "desc-asc") { cm[a].lso = "" } } else { cm[a].lso = so = cm[a].firstsortorder || 'asc' } if (so) { $("span.s-ico", selTh).show(); $("span.ui-icon-" + so, selTh).removeClass('ui-state-disabled'); $(selTh).attr("aria-selected", "true") } else { if (!u.p.viewsortcols[0]) { $("span.s-ico", selTh).hide() } } u.p.sortorder = ""; $.each(cm, function (i) { if (this.lso) { if (i > 0 && fs) { sort += ", " } c = this.lso.split("-"); sort += cm[i].index || cm[i].name; sort += " " + c[c.length - 1]; fs = true; u.p.sortorder = c[c.length - 1] } }); ls = sort.lastIndexOf(u.p.sortorder); sort = sort.substring(0, ls); u.p.sortname = sort }, sortData = function (a, b, c, d, e) { if (!u.p.colModel[b].sortable) { return } if (u.p.savedRow.length > 0) { return } if (!c) { if (u.p.lastsort === b) { if (u.p.sortorder === 'asc') { u.p.sortorder = 'desc' } else if (u.p.sortorder === 'desc') { u.p.sortorder = 'asc' } } else { u.p.sortorder = u.p.colModel[b].firstsortorder || 'asc' } u.p.page = 1 } if (u.p.multiSort) { multiSort(b, e) } else { if (d) { if (u.p.lastsort === b && u.p.sortorder === d && !c) { return } u.p.sortorder = d } var f = u.grid.headers[u.p.lastsort].el, newSelectedTh = u.p.frozenColumns ? e : u.grid.headers[b].el; $("span.ui-grid-ico-sort", f).addClass('ui-state-disabled'); $(f).attr("aria-selected", "false"); if (u.p.frozenColumns) { u.grid.fhDiv.find("span.ui-grid-ico-sort").addClass('ui-state-disabled'); u.grid.fhDiv.find("th").attr("aria-selected", "false") } $("span.ui-icon-" + u.p.sortorder, newSelectedTh).removeClass('ui-state-disabled'); $(newSelectedTh).attr("aria-selected", "true"); if (!u.p.viewsortcols[0]) { if (u.p.lastsort !== b) { if (u.p.frozenColumns) { u.grid.fhDiv.find("span.s-ico").hide() } $("span.s-ico", f).hide(); $("span.s-ico", newSelectedTh).show() } } a = a.substring(5 + u.p.id.length + 1); u.p.sortname = u.p.colModel[b].index || a } if ($(u).triggerHandler("jqGridSortCol", [u.p.sortname, b, u.p.sortorder]) === 'stop') { u.p.lastsort = b; return } if ($.isFunction(u.p.onSortCol)) { if (u.p.onSortCol.call(u, u.p.sortname, b, u.p.sortorder) === 'stop') { u.p.lastsort = b; return } } if (u.p.datatype === "local") { if (u.p.deselectAfterSort) { $(u).jqGrid("resetSelection") } } else { u.p.selrow = null; if (u.p.multiselect) { setHeadCheckBox(false) } u.p.selarrrow = []; u.p.savedRow = [] } if (u.p.scroll) { var g = u.grid.bDiv.scrollLeft; emptyRows.call(u, true, false); u.grid.hDiv.scrollLeft = g } if (u.p.subGrid && u.p.datatype === 'local') { $("td.sgexpanded", "#" + $.jgrid.jqID(u.p.id)).each(function () { $(this).trigger("click") }) } populate(); u.p.lastsort = b; if (u.p.sortname !== a && b) { u.p.lastsort = b } }, setColWidth = function () { var b = 0, brd = $.jgrid.cell_width ? 0 : intNum(u.p.cellLayout, 0), vc = 0, lvc, scw = intNum(u.p.scrollOffset, 0), cw, hs = false, aw, gw = 0, cr; $.each(u.p.colModel, function () { if (this.hidden === undefined) { this.hidden = false } if (u.p.grouping && u.p.autowidth) { var a = $.inArray(this.name, u.p.groupingView.groupField); if (a >= 0 && u.p.groupingView.groupColumnShow.length > a) { this.hidden = !u.p.groupingView.groupColumnShow[a] } } this.widthOrg = cw = intNum(this.width, 0); if (this.hidden === false) { b += cw + brd; if (this.fixed) { gw += cw + brd } else { vc++ } } }); if (isNaN(u.p.width)) { u.p.width = b + ((u.p.shrinkToFit === false && !isNaN(u.p.height)) ? scw : 0) } grid.width = u.p.width; u.p.tblwidth = b; if (u.p.shrinkToFit === false && u.p.forceFit === true) { u.p.forceFit = false } if (u.p.shrinkToFit === true && vc > 0) { aw = grid.width - brd * vc - gw; if (!isNaN(u.p.height)) { aw -= scw; hs = true } b = 0; $.each(u.p.colModel, function (i) { if (this.hidden === false && !this.fixed) { cw = Math.round(aw * this.width / (u.p.tblwidth - brd * vc - gw)); this.width = cw; b += cw; lvc = i } }); cr = 0; if (hs) { if (grid.width - gw - (b + brd * vc) !== scw) { cr = grid.width - gw - (b + brd * vc) - scw } } else if (!hs && Math.abs(grid.width - gw - (b + brd * vc)) !== 1) { cr = grid.width - gw - (b + brd * vc) } u.p.colModel[lvc].width += cr; u.p.tblwidth = b + cr + brd * vc + gw; if (u.p.tblwidth > u.p.width) { u.p.colModel[lvc].width -= (u.p.tblwidth - parseInt(u.p.width, 10)); u.p.tblwidth = u.p.width } } }, nextVisible = function (a) { var b = a, j = a, i; for (i = a + 1; i < u.p.colModel.length; i++) { if (u.p.colModel[i].hidden !== true) { j = i; break } } return j - b }, getOffset = function (a) { var b = $(u.grid.headers[a].el), ret = [b.position().left + b.outerWidth()]; if (u.p.direction === "rtl") { ret[0] = u.p.width - ret[0] } ret[0] -= u.grid.bDiv.scrollLeft; ret.push($(u.grid.hDiv).position().top); ret.push($(u.grid.bDiv).offset().top - $(u.grid.hDiv).offset().top + $(u.grid.bDiv).height()); return ret }, getColumnHeaderIndex = function (a) { var i, headers = u.grid.headers, ci = $.jgrid.getCellIndex(a); for (i = 0; i < headers.length; i++) { if (a === headers[i].el) { ci = i; break } } return ci }; this.p.id = this.id; if ($.inArray(u.p.multikey, B) === -1) { u.p.multikey = false } u.p.keyIndex = false; u.p.keyName = false; for (i = 0; i < u.p.colModel.length; i++) { u.p.colModel[i] = $.extend(true, {}, u.p.cmTemplate, u.p.colModel[i].template || {}, u.p.colModel[i]); if (u.p.keyIndex === false && u.p.colModel[i].key === true) { u.p.keyIndex = i } } u.p.sortorder = u.p.sortorder.toLowerCase(); $.jgrid.cell_width = $.jgrid.cellWidth(); if (u.p.grouping === true) { u.p.scroll = false; u.p.rownumbers = false; u.p.treeGrid = false; u.p.gridview = true } if (this.p.treeGrid === true) { try { $(this).jqGrid("setTreeGrid") } catch (_) { } if (u.p.datatype !== "local") { u.p.localReader = { id: "_id_"} } } if (this.p.subGrid) { try { $(u).jqGrid("setSubGrid") } catch (s) { } } if (this.p.multiselect) { this.p.colNames.unshift("<input role='checkbox' id='cb_" + this.p.id + "' class='cbox' type='checkbox'/>"); this.p.colModel.unshift({ name: 'cb', width: $.jgrid.cell_width ? u.p.multiselectWidth + u.p.cellLayout : u.p.multiselectWidth, sortable: false, resizable: false, hidedlg: true, search: false, align: 'center', fixed: true }) } if (this.p.rownumbers) { this.p.colNames.unshift(""); this.p.colModel.unshift({ name: 'rn', width: u.p.rownumWidth, sortable: false, resizable: false, hidedlg: true, search: false, align: 'center', fixed: true }) } u.p.xmlReader = $.extend(true, { root: "rows", row: "row", page: "rows>page", total: "rows>total", records: "rows>records", repeatitems: true, cell: "cell", id: "[id]", userdata: "userdata", subgrid: { root: "rows", row: "row", repeatitems: true, cell: "cell"} }, u.p.xmlReader); u.p.jsonReader = $.extend(true, { root: "rows", page: "page", total: "total", records: "records", repeatitems: true, cell: "cell", id: "id", userdata: "userdata", subgrid: { root: "rows", repeatitems: true, cell: "cell"} }, u.p.jsonReader); u.p.localReader = $.extend(true, { root: "rows", page: "page", total: "total", records: "records", repeatitems: false, cell: "cell", id: "id", userdata: "userdata", subgrid: { root: "rows", repeatitems: true, cell: "cell"} }, u.p.localReader); if (u.p.scroll) { u.p.pgbuttons = false; u.p.pginput = false; u.p.rowList = [] } if (u.p.data.length) { refreshIndex() } var C = "<thead><tr class='ui-jqgrid-labels' role='rowheader'>", tdc, idn, w, res, sort, td, ptr, tbody, imgs, iac = "", idc = "", sortarr = [], sortord = [], sotmp = []; if (u.p.shrinkToFit === true && u.p.forceFit === true) { for (i = u.p.colModel.length - 1; i >= 0; i--) { if (!u.p.colModel[i].hidden) { u.p.colModel[i].resizable = false; break } } } if (u.p.viewsortcols[1] === 'horizontal') { iac = " ui-i-asc"; idc = " ui-i-desc" } tdc = isMSIE ? "class='ui-th-div-ie'" : ""; imgs = "<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc" + iac + " ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-" + dir + "'></span>"; imgs += "<span sort='desc' class='ui-grid-ico-sort ui-icon-desc" + idc + " ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-" + dir + "'></span></span>"; if (u.p.multiSort) { sortarr = u.p.sortname.split(","); for (i = 0; i < sortarr.length; i++) { sotmp = $.trim(sortarr[i]).split(" "); sortarr[i] = $.trim(sotmp[0]); sortord[i] = sotmp[1] ? $.trim(sotmp[1]) : u.p.sortorder || "asc" } } for (i = 0; i < this.p.colNames.length; i++) { var D = u.p.headertitles ? (" title=\"" + $.jgrid.stripHtml(u.p.colNames[i]) + "\"") : ""; C += "<th id='" + u.p.id + "_" + u.p.colModel[i].name + "' role='columnheader' class='ui-state-default ui-th-column ui-th-" + dir + "'" + D + ">"; idn = u.p.colModel[i].index || u.p.colModel[i].name; C += "<div id='jqgh_" + u.p.id + "_" + u.p.colModel[i].name + "' " + tdc + ">" + u.p.colNames[i]; if (!u.p.colModel[i].width) { u.p.colModel[i].width = 150 } else { u.p.colModel[i].width = parseInt(u.p.colModel[i].width, 10) } if (typeof u.p.colModel[i].title !== "boolean") { u.p.colModel[i].title = true } u.p.colModel[i].lso = ""; if (idn === u.p.sortname) { u.p.lastsort = i } if (u.p.multiSort) { sotmp = $.inArray(idn, sortarr); if (sotmp !== -1) { u.p.colModel[i].lso = sortord[sotmp] } } C += imgs + "</div></th>" } C += "</tr></thead>"; imgs = null; $(this).append(C); $("thead tr:first th", this).hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }); if (this.p.multiselect) { var E = [], chk; $('#cb_' + $.jgrid.jqID(u.p.id), this).bind('click', function () { u.p.selarrrow = []; var a = u.p.frozenColumns === true ? u.p.id + "_frozen" : ""; if (this.checked) { $(u.rows).each(function (i) { if (i > 0) { if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass('ui-state-disabled')) { $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(this.id))[u.p.useProp ? 'prop' : 'attr']("checked", true); $(this).addClass("ui-state-highlight").attr("aria-selected", "true"); u.p.selarrrow.push(this.id); u.p.selrow = this.id; if (a) { $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(this.id), u.grid.fbDiv)[u.p.useProp ? 'prop' : 'attr']("checked", true); $("#" + $.jgrid.jqID(this.id), u.grid.fbDiv).addClass("ui-state-highlight") } } } }); chk = true; E = [] } else { $(u.rows).each(function (i) { if (i > 0) { if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass('ui-state-disabled')) { $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(this.id))[u.p.useProp ? 'prop' : 'attr']("checked", false); $(this).removeClass("ui-state-highlight").attr("aria-selected", "false"); E.push(this.id); if (a) { $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(this.id), u.grid.fbDiv)[u.p.useProp ? 'prop' : 'attr']("checked", false); $("#" + $.jgrid.jqID(this.id), u.grid.fbDiv).removeClass("ui-state-highlight") } } } }); u.p.selrow = null; chk = false } $(u).triggerHandler("jqGridSelectAll", [chk ? u.p.selarrrow : E, chk]); if ($.isFunction(u.p.onSelectAll)) { u.p.onSelectAll.call(u, chk ? u.p.selarrrow : E, chk) } }) } if (u.p.autowidth === true) { var G = $(A).innerWidth(); u.p.width = G > 0 ? G : 'nw' } setColWidth(); $(A).css("width", grid.width + "px").append("<div class='ui-jqgrid-resize-mark' id='rs_m" + u.p.id + "'>&#160;</div>"); $(z).css("width", grid.width + "px"); C = $("thead:first", u).get(0); var H = ""; if (u.p.footerrow) { H += "<table role='grid' style='width:" + u.p.tblwidth + "px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-" + dir + "'>" } var I = $("tr:first", C), firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>"; u.p.disableClick = false; $("th", I).each(function (j) { w = u.p.colModel[j].width; if (u.p.colModel[j].resizable === undefined) { u.p.colModel[j].resizable = true } if (u.p.colModel[j].resizable) { res = document.createElement("span"); $(res).html("&#160;").addClass('ui-jqgrid-resize ui-jqgrid-resize-' + dir).css("cursor", "col-resize"); $(this).addClass(u.p.resizeclass) } else { res = "" } $(this).css("width", w + "px").prepend(res); res = null; var a = ""; if (u.p.colModel[j].hidden) { $(this).css("display", "none"); a = "display:none;" } firstr += "<td role='gridcell' style='height:0px;width:" + w + "px;" + a + "'></td>"; grid.headers[j] = { width: w, el: this }; sort = u.p.colModel[j].sortable; if (typeof sort !== 'boolean') { u.p.colModel[j].sortable = true; sort = true } var b = u.p.colModel[j].name; if (!(b === 'cb' || b === 'subgrid' || b === 'rn')) { if (u.p.viewsortcols[2]) { $(">div", this).addClass('ui-jqgrid-sortable') } } if (sort) { if (u.p.multiSort) { if (u.p.viewsortcols[0]) { $("div span.s-ico", this).show(); if (u.p.colModel[j].lso) { $("div span.ui-icon-" + u.p.colModel[j].lso, this).removeClass("ui-state-disabled") } } else if (u.p.colModel[j].lso) { $("div span.s-ico", this).show(); $("div span.ui-icon-" + u.p.colModel[j].lso, this).removeClass("ui-state-disabled") } } else { if (u.p.viewsortcols[0]) { $("div span.s-ico", this).show(); if (j === u.p.lastsort) { $("div span.ui-icon-" + u.p.sortorder, this).removeClass("ui-state-disabled") } } else if (j === u.p.lastsort) { $("div span.s-ico", this).show(); $("div span.ui-icon-" + u.p.sortorder, this).removeClass("ui-state-disabled") } } } if (u.p.footerrow) { H += "<td role='gridcell' " + formatCol(j, 0, '', null, '', false) + ">&#160;</td>" } }).mousedown(function (e) { if ($(e.target).closest("th>span.ui-jqgrid-resize").length !== 1) { return } var a = getColumnHeaderIndex(this); if (u.p.forceFit === true) { u.p.nv = nextVisible(a) } grid.dragStart(a, e, getOffset(a)); return false }).click(function (e) { if (u.p.disableClick) { u.p.disableClick = false; return false } var s = "th>div.ui-jqgrid-sortable", r, d; if (!u.p.viewsortcols[2]) { s = "th>div>span>span.ui-grid-ico-sort" } var t = $(e.target).closest(s); if (t.length !== 1) { return } var a; if (u.p.frozenColumns) { var b = $(this)[0].id.substring(u.p.id.length + 1); $(u.p.colModel).each(function (i) { if (this.name === b) { a = i; return false } }) } else { a = getColumnHeaderIndex(this) } if (!u.p.viewsortcols[2]) { r = true; d = t.attr("sort") } if (a != null) { sortData($('div', this)[0].id, a, r, d, this) } return false }); if (u.p.sortable && $.fn.sortable) { try { $(u).jqGrid("sortableColumns", I) } catch (e) { } } if (u.p.footerrow) { H += "</tr></tbody></table>" } firstr += "</tr>"; tbody = document.createElement("tbody"); this.appendChild(tbody); $(this).addClass('ui-jqgrid-btable').append(firstr); firstr = null; var J = $("<table class='ui-jqgrid-htable' style='width:" + u.p.tblwidth + "px' role='grid' aria-labelledby='gbox_" + this.id + "' cellspacing='0' cellpadding='0' border='0'></table>").append(C), hg = (u.p.caption && u.p.hiddengrid === true) ? true : false, hb = $("<div class='ui-jqgrid-hbox" + (dir === "rtl" ? "-rtl" : "") + "'></div>"); C = null; grid.hDiv = document.createElement("div"); $(grid.hDiv).css({ width: grid.width + "px" }).addClass("ui-state-default ui-jqgrid-hdiv").append(hb); $(hb).append(J); J = null; if (hg) { $(grid.hDiv).hide() } if (u.p.pager) { if (typeof u.p.pager === "string") { if (u.p.pager.substr(0, 1) !== "#") { u.p.pager = "#" + u.p.pager } } else { u.p.pager = "#" + $(u.p.pager).attr("id") } $(u.p.pager).css({ width: grid.width + "px" }).addClass('ui-state-default ui-jqgrid-pager ui-corner-bottom').appendTo(A); if (hg) { $(u.p.pager).hide() } setPager(u.p.pager, '') } if (u.p.cellEdit === false && u.p.hoverrows === true) { $(u).bind('mouseover', function (e) { ptr = $(e.target).closest("tr.jqgrow"); if ($(ptr).attr("class") !== "ui-subgrid") { $(ptr).addClass("ui-state-hover") } }).bind('mouseout', function (e) { ptr = $(e.target).closest("tr.jqgrow"); $(ptr).removeClass("ui-state-hover") }) } var K, ci, tdHtml; $(u).before(grid.hDiv).click(function (e) { td = e.target; ptr = $(td, u.rows).closest("tr.jqgrow"); if ($(ptr).length === 0 || ptr[0].className.indexOf('ui-state-disabled') > -1 || ($(td, u).closest("table.ui-jqgrid-btable").attr('id') || '').replace("_frozen", "") !== u.id) { return this } var b = $(td).hasClass("cbox"), cSel = $(u).triggerHandler("jqGridBeforeSelectRow", [ptr[0].id, e]); cSel = (cSel === false || cSel === 'stop') ? false : true; if (cSel && $.isFunction(u.p.beforeSelectRow)) { cSel = u.p.beforeSelectRow.call(u, ptr[0].id, e) } if (td.tagName === 'A' || ((td.tagName === 'INPUT' || td.tagName === 'TEXTAREA' || td.tagName === 'OPTION' || td.tagName === 'SELECT') && !b)) { return } if (cSel === true) { K = ptr[0].id; ci = $.jgrid.getCellIndex(td); tdHtml = $(td).closest("td,th").html(); $(u).triggerHandler("jqGridCellSelect", [K, ci, tdHtml, e]); if ($.isFunction(u.p.onCellSelect)) { u.p.onCellSelect.call(u, K, ci, tdHtml, e) } if (u.p.cellEdit === true) { if (u.p.multiselect && b) { $(u).jqGrid("setSelection", K, true, e) } else { K = ptr[0].rowIndex; try { $(u).jqGrid("editCell", K, ci, true) } catch (_) { } } } else if (!u.p.multikey) { if (u.p.multiselect && u.p.multiboxonly) { if (b) { $(u).jqGrid("setSelection", K, true, e) } else { var c = u.p.frozenColumns ? u.p.id + "_frozen" : ""; $(u.p.selarrrow).each(function (i, n) { var a = $(u).jqGrid('getGridRowById', n); $(a).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(n))[u.p.useProp ? 'prop' : 'attr']("checked", false); if (c) { $("#" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(c)).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(c))[u.p.useProp ? 'prop' : 'attr']("checked", false) } }); u.p.selarrrow = []; $(u).jqGrid("setSelection", K, true, e) } } else { $(u).jqGrid("setSelection", K, true, e) } } else { if (e[u.p.multikey]) { $(u).jqGrid("setSelection", K, true, e) } else if (u.p.multiselect && b) { b = $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + K).is(":checked"); $("#jqg_" + $.jgrid.jqID(u.p.id) + "_" + K)[u.p.useProp ? 'prop' : 'attr']("checked", b) } } } }).bind('reloadGrid', function (e, a) { if (u.p.treeGrid === true) { u.p.datatype = u.p.treedatatype } if (a && a.current) { u.grid.selectionPreserver(u) } if (u.p.datatype === "local") { $(u).jqGrid("resetSelection"); if (u.p.data.length) { refreshIndex() } } else if (!u.p.treeGrid) { u.p.selrow = null; if (u.p.multiselect) { u.p.selarrrow = []; setHeadCheckBox(false) } u.p.savedRow = [] } if (u.p.scroll) { emptyRows.call(u, true, false) } if (a && a.page) { var b = a.page; if (b > u.p.lastpage) { b = u.p.lastpage } if (b < 1) { b = 1 } u.p.page = b; if (u.grid.prevRowHeight) { u.grid.bDiv.scrollTop = (b - 1) * u.grid.prevRowHeight * u.p.rowNum } else { u.grid.bDiv.scrollTop = 0 } } if (u.grid.prevRowHeight && u.p.scroll) { delete u.p.lastpage; u.grid.populateVisible() } else { u.grid.populate() } if (u.p._inlinenav === true) { $(u).jqGrid('showAddEditButtons') } return false }).dblclick(function (e) { td = e.target; ptr = $(td, u.rows).closest("tr.jqgrow"); if ($(ptr).length === 0) { return } K = ptr[0].rowIndex; ci = $.jgrid.getCellIndex(td); $(u).triggerHandler("jqGridDblClickRow", [$(ptr).attr("id"), K, ci, e]); if ($.isFunction(u.p.ondblClickRow)) { u.p.ondblClickRow.call(u, $(ptr).attr("id"), K, ci, e) } }).bind('contextmenu', function (e) { td = e.target; ptr = $(td, u.rows).closest("tr.jqgrow"); if ($(ptr).length === 0) { return } if (!u.p.multiselect) { $(u).jqGrid("setSelection", ptr[0].id, true, e) } K = ptr[0].rowIndex; ci = $.jgrid.getCellIndex(td); $(u).triggerHandler("jqGridRightClickRow", [$(ptr).attr("id"), K, ci, e]); if ($.isFunction(u.p.onRightClickRow)) { u.p.onRightClickRow.call(u, $(ptr).attr("id"), K, ci, e) } }); grid.bDiv = document.createElement("div"); if (isMSIE) { if (String(u.p.height).toLowerCase() === "auto") { u.p.height = "100%" } } $(grid.bDiv).append($('<div style="position:relative;' + (isMSIE && $.jgrid.msiever() < 8 ? "height:0.01%;" : "") + '"></div>').append('<div></div>').append(this)).addClass("ui-jqgrid-bdiv").css({ height: u.p.height + (isNaN(u.p.height) ? "" : "px"), width: (grid.width) + "px" }).scroll(grid.scrollGrid); $("table:first", grid.bDiv).css({ width: u.p.tblwidth + "px" }); if (!$.support.tbody) { if ($("tbody", this).length === 2) { $("tbody:gt(0)", this).remove() } } if (u.p.multikey) { if ($.jgrid.msie) { $(grid.bDiv).bind("selectstart", function () { return false }) } else { $(grid.bDiv).bind("mousedown", function () { return false }) } } if (hg) { $(grid.bDiv).hide() } grid.cDiv = document.createElement("div"); var L = u.p.hidegrid === true ? $("<a role='link' class='ui-jqgrid-titlebar-close ui-corner-all HeaderButton' />").hover(function () { L.addClass('ui-state-hover') }, function () { L.removeClass('ui-state-hover') }).append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css((dir === "rtl" ? "left" : "right"), "0px") : ""; $(grid.cDiv).append(L).append("<span class='ui-jqgrid-title'>" + u.p.caption + "</span>").addClass("ui-jqgrid-titlebar ui-jqgrid-caption" + (dir === "rtl" ? "-rtl" : "") + " ui-widget-header ui-corner-top ui-helper-clearfix"); $(grid.cDiv).insertBefore(grid.hDiv); if (u.p.toolbar[0]) { grid.uDiv = document.createElement("div"); if (u.p.toolbar[1] === "top") { $(grid.uDiv).insertBefore(grid.hDiv) } else if (u.p.toolbar[1] === "bottom") { $(grid.uDiv).insertAfter(grid.hDiv) } if (u.p.toolbar[1] === "both") { grid.ubDiv = document.createElement("div"); $(grid.uDiv).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id).insertBefore(grid.hDiv); $(grid.ubDiv).addClass("ui-userdata ui-state-default").attr("id", "tb_" + this.id).insertAfter(grid.hDiv); if (hg) { $(grid.ubDiv).hide() } } else { $(grid.uDiv).width(grid.width).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id) } if (hg) { $(grid.uDiv).hide() } } if (u.p.toppager) { u.p.toppager = $.jgrid.jqID(u.p.id) + "_toppager"; grid.topDiv = $("<div id='" + u.p.toppager + "'></div>")[0]; u.p.toppager = "#" + u.p.toppager; $(grid.topDiv).addClass('ui-state-default ui-jqgrid-toppager').width(grid.width).insertBefore(grid.hDiv); setPager(u.p.toppager, '_t') } if (u.p.footerrow) { grid.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0]; hb = $("<div class='ui-jqgrid-hbox" + (dir === "rtl" ? "-rtl" : "") + "'></div>"); $(grid.sDiv).append(hb).width(grid.width).insertAfter(grid.hDiv); $(hb).append(H); grid.footers = $(".ui-jqgrid-ftable", grid.sDiv)[0].rows[0].cells; if (u.p.rownumbers) { grid.footers[0].className = 'ui-state-default jqgrid-rownum' } if (hg) { $(grid.sDiv).hide() } } hb = null; if (u.p.caption) { var M = u.p.datatype; if (u.p.hidegrid === true) { $(".ui-jqgrid-titlebar-close", grid.cDiv).click(function (e) { var a = $.isFunction(u.p.onHeaderClick), elems = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv", counter, self = this; if (u.p.toolbar[0] === true) { if (u.p.toolbar[1] === 'both') { elems += ', #' + $(grid.ubDiv).attr('id') } elems += ', #' + $(grid.uDiv).attr('id') } counter = $(elems, "#gview_" + $.jgrid.jqID(u.p.id)).length; if (u.p.gridstate === 'visible') { $(elems, "#gbox_" + $.jgrid.jqID(u.p.id)).slideUp("fast", function () { counter--; if (counter === 0) { $("span", self).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); u.p.gridstate = 'hidden'; if ($("#gbox_" + $.jgrid.jqID(u.p.id)).hasClass("ui-resizable")) { $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(u.p.id)).hide() } $(u).triggerHandler("jqGridHeaderClick", [u.p.gridstate, e]); if (a) { if (!hg) { u.p.onHeaderClick.call(u, u.p.gridstate, e) } } } }) } else if (u.p.gridstate === 'hidden') { $(elems, "#gbox_" + $.jgrid.jqID(u.p.id)).slideDown("fast", function () { counter--; if (counter === 0) { $("span", self).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); if (hg) { u.p.datatype = M; populate(); hg = false } u.p.gridstate = 'visible'; if ($("#gbox_" + $.jgrid.jqID(u.p.id)).hasClass("ui-resizable")) { $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(u.p.id)).show() } $(u).triggerHandler("jqGridHeaderClick", [u.p.gridstate, e]); if (a) { if (!hg) { u.p.onHeaderClick.call(u, u.p.gridstate, e) } } } }) } return false }); if (hg) { u.p.datatype = "local"; $(".ui-jqgrid-titlebar-close", grid.cDiv).trigger("click") } } } else { $(grid.cDiv).hide() } $(grid.hDiv).after(grid.bDiv).mousemove(function (e) { if (grid.resizing) { grid.dragMove(e); return false } }); $(".ui-jqgrid-labels", grid.hDiv).bind("selectstart", function () { return false }); $(document).bind("mouseup.jqGrid" + u.p.id, function () { if (grid.resizing) { grid.dragEnd(); return false } return true }); u.formatCol = formatCol; u.sortData = sortData; u.updatepager = updatepager; u.refreshIndex = refreshIndex; u.setHeadCheckBox = setHeadCheckBox; u.constructTr = constructTr; u.formatter = function (a, b, c, d, e) { return formatter(a, b, c, d, e) }; $.extend(grid, { populate: populate, emptyRows: emptyRows, beginReq: beginReq, endReq: endReq }); this.grid = grid; u.addXmlData = function (d) { addXmlData(d, u.grid.bDiv) }; u.addJSONData = function (d) { addJSONData(d, u.grid.bDiv) }; this.grid.cols = this.rows[0].cells; $(u).triggerHandler("jqGridInitGrid"); if ($.isFunction(u.p.onInitGrid)) { u.p.onInitGrid.call(u) } populate(); u.p.hiddengrid = false }) }; $.jgrid.extend({ getGridParam: function (a) { var b = this[0]; if (!b || !b.grid) { return } if (!a) { return b.p } return b.p[a] !== undefined ? b.p[a] : null }, setGridParam: function (a) { return this.each(function () { if (this.grid && typeof a === 'object') { $.extend(true, this.p, a) } }) }, getGridRowById: function (a) { var b; this.each(function () { try { var i = this.rows.length; while (i--) { if (a.toString() === this.rows[i].id) { b = this.rows[i]; break } } } catch (e) { b = $(this.grid.bDiv).find("#" + $.jgrid.jqID(a)) } }); return b }, getDataIDs: function () { var a = [], i = 0, len, j = 0; this.each(function () { len = this.rows.length; if (len && len > 0) { while (i < len) { if ($(this.rows[i]).hasClass('jqgrow')) { a[j] = this.rows[i].id; j++ } i++ } } }); return a }, setSelection: function (d, f, e) { return this.each(function () { var c = this, stat, pt, ner, ia, tpsr, fid; if (d === undefined) { return } f = f === false ? false : true; pt = $(c).jqGrid('getGridRowById', d); if (!pt || !pt.className || pt.className.indexOf('ui-state-disabled') > -1) { return } function scrGrid(a) { var b = $(c.grid.bDiv)[0].clientHeight, st = $(c.grid.bDiv)[0].scrollTop, rpos = $(c.rows[a]).position().top, rh = c.rows[a].clientHeight; if (rpos + rh >= b + st) { $(c.grid.bDiv)[0].scrollTop = rpos - (b + st) + rh + st } else if (rpos < b + st) { if (rpos < st) { $(c.grid.bDiv)[0].scrollTop = rpos } } } if (c.p.scrollrows === true) { ner = $(c).jqGrid('getGridRowById', d).rowIndex; if (ner >= 0) { scrGrid(ner) } } if (c.p.frozenColumns === true) { fid = c.p.id + "_frozen" } if (!c.p.multiselect) { if (pt.className !== "ui-subgrid") { if (c.p.selrow !== pt.id) { $($(c).jqGrid('getGridRowById', c.p.selrow)).removeClass("ui-state-highlight").attr({ "aria-selected": "false", "tabindex": "-1" }); $(pt).addClass("ui-state-highlight").attr({ "aria-selected": "true", "tabindex": "0" }); if (fid) { $("#" + $.jgrid.jqID(c.p.selrow), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight"); $("#" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(fid)).addClass("ui-state-highlight") } stat = true } else { stat = false } c.p.selrow = pt.id; if (f) { $(c).triggerHandler("jqGridSelectRow", [pt.id, stat, e]); if (c.p.onSelectRow) { c.p.onSelectRow.call(c, pt.id, stat, e) } } } } else { c.setHeadCheckBox(false); c.p.selrow = pt.id; ia = $.inArray(c.p.selrow, c.p.selarrrow); if (ia === -1) { if (pt.className !== "ui-subgrid") { $(pt).addClass("ui-state-highlight").attr("aria-selected", "true") } stat = true; c.p.selarrrow.push(c.p.selrow) } else { if (pt.className !== "ui-subgrid") { $(pt).removeClass("ui-state-highlight").attr("aria-selected", "false") } stat = false; c.p.selarrrow.splice(ia, 1); tpsr = c.p.selarrrow[0]; c.p.selrow = (tpsr === undefined) ? null : tpsr } $("#jqg_" + $.jgrid.jqID(c.p.id) + "_" + $.jgrid.jqID(pt.id))[c.p.useProp ? 'prop' : 'attr']("checked", stat); if (fid) { if (ia === -1) { $("#" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(fid)).addClass("ui-state-highlight") } else { $("#" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight") } $("#jqg_" + $.jgrid.jqID(c.p.id) + "_" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(fid))[c.p.useProp ? 'prop' : 'attr']("checked", stat) } if (f) { $(c).triggerHandler("jqGridSelectRow", [pt.id, stat, e]); if (c.p.onSelectRow) { c.p.onSelectRow.call(c, pt.id, stat, e) } } } }) }, resetSelection: function (a) { return this.each(function () { var t = this, sr, fid; if (t.p.frozenColumns === true) { fid = t.p.id + "_frozen" } if (a !== undefined) { sr = a === t.p.selrow ? t.p.selrow : a; $("#" + $.jgrid.jqID(t.p.id) + " tbody:first tr#" + $.jgrid.jqID(sr)).removeClass("ui-state-highlight").attr("aria-selected", "false"); if (fid) { $("#" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight") } if (t.p.multiselect) { $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(t.p.id))[t.p.useProp ? 'prop' : 'attr']("checked", false); if (fid) { $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(fid))[t.p.useProp ? 'prop' : 'attr']("checked", false) } t.setHeadCheckBox(false) } sr = null } else if (!t.p.multiselect) { if (t.p.selrow) { $("#" + $.jgrid.jqID(t.p.id) + " tbody:first tr#" + $.jgrid.jqID(t.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected", "false"); if (fid) { $("#" + $.jgrid.jqID(t.p.selrow), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight") } t.p.selrow = null } } else { $(t.p.selarrrow).each(function (i, n) { $($(t).jqGrid('getGridRowById', n)).removeClass("ui-state-highlight").attr("aria-selected", "false"); $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(n))[t.p.useProp ? 'prop' : 'attr']("checked", false); if (fid) { $("#" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(fid))[t.p.useProp ? 'prop' : 'attr']("checked", false) } }); t.setHeadCheckBox(false); t.p.selarrrow = []; t.p.selrow = null } if (t.p.cellEdit === true) { if (parseInt(t.p.iCol, 10) >= 0 && parseInt(t.p.iRow, 10) >= 0) { $("td:eq(" + t.p.iCol + ")", t.rows[t.p.iRow]).removeClass("edit-cell ui-state-highlight"); $(t.rows[t.p.iRow]).removeClass("selected-row ui-state-hover") } } t.p.savedRow = [] }) }, getRowData: function (b) { var c = {}, resall, getall = false, len, j = 0; this.each(function () { var a = this, nm, ind; if (b === undefined) { getall = true; resall = []; len = a.rows.length } else { ind = $(a).jqGrid('getGridRowById', b); if (!ind) { return c } len = 2 } while (j < len) { if (getall) { ind = a.rows[j] } if ($(ind).hasClass('jqgrow')) { $('td[role="gridcell"]', ind).each(function (i) { nm = a.p.colModel[i].name; if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') { if (a.p.treeGrid === true && nm === a.p.ExpandColumn) { c[nm] = $.jgrid.htmlDecode($("span:first", this).html()) } else { try { c[nm] = $.unformat.call(a, this, { rowId: ind.id, colModel: a.p.colModel[i] }, i) } catch (e) { c[nm] = $.jgrid.htmlDecode($(this).html()) } } } }); if (getall) { resall.push(c); c = {} } } j++ } }); return resall || c }, delRowData: function (d) { var e = false, rowInd, ia; this.each(function () { var a = this; rowInd = $(a).jqGrid('getGridRowById', d); if (!rowInd) { return false } $(rowInd).remove(); a.p.records--; a.p.reccount--; a.updatepager(true, false); e = true; if (a.p.multiselect) { ia = $.inArray(d, a.p.selarrrow); if (ia !== -1) { a.p.selarrrow.splice(ia, 1) } } if (a.p.multiselect && a.p.selarrrow.length > 0) { a.p.selrow = a.p.selarrrow[a.p.selarrrow.length - 1] } else { a.p.selrow = null } if (a.p.datatype === 'local') { var b = $.jgrid.stripPref(a.p.idPrefix, d), pos = a.p._index[b]; if (pos !== undefined) { a.p.data.splice(pos, 1); a.refreshIndex() } } if (a.p.altRows === true && e) { var c = a.p.altclass; $(a.rows).each(function (i) { if (i % 2 === 1) { $(this).addClass(c) } else { $(this).removeClass(c) } }) } }); return e }, setRowData: function (c, d, f) { var g, success = true, title; this.each(function () { if (!this.grid) { return false } var t = this, vl, ind, cp = typeof f, lcdata = {}; ind = $(this).jqGrid('getGridRowById', c); if (!ind) { return false } if (d) { try { $(this.p.colModel).each(function (i) { g = this.name; var a = $.jgrid.getAccessor(d, g); if (a !== undefined) { lcdata[g] = this.formatter && typeof this.formatter === 'string' && this.formatter === 'date' ? $.unformat.date.call(t, a, this) : a; vl = t.formatter(c, a, i, d, 'edit'); title = this.title ? { "title": $.jgrid.stripHtml(vl)} : {}; if (t.p.treeGrid === true && g === t.p.ExpandColumn) { $("td[role='gridcell']:eq(" + i + ") > span:first", ind).html(vl).attr(title) } else { $("td[role='gridcell']:eq(" + i + ")", ind).html(vl).attr(title) } } }); if (t.p.datatype === 'local') { var b = $.jgrid.stripPref(t.p.idPrefix, c), pos = t.p._index[b], key; if (t.p.treeGrid) { for (key in t.p.treeReader) { if (t.p.treeReader.hasOwnProperty(key)) { delete lcdata[t.p.treeReader[key]] } } } if (pos !== undefined) { t.p.data[pos] = $.extend(true, t.p.data[pos], lcdata) } lcdata = null } } catch (e) { success = false } } if (success) { if (cp === 'string') { $(ind).addClass(f) } else if (f !== null && cp === 'object') { $(ind).css(f) } $(t).triggerHandler("jqGridAfterGridComplete") } }); return success }, addRowData: function (a, b, c, d) { if (!c) { c = "last" } var f = false, nm, row, gi, si, ni, sind, i, v, prp = "", aradd, cnm, cn, data, cm, id; if (b) { if ($.isArray(b)) { aradd = true; c = "last"; cnm = a } else { b = [b]; aradd = false } this.each(function () { var t = this, datalen = b.length; ni = t.p.rownumbers === true ? 1 : 0; gi = t.p.multiselect === true ? 1 : 0; si = t.p.subGrid === true ? 1 : 0; if (!aradd) { if (a !== undefined) { a = String(a) } else { a = $.jgrid.randId(); if (t.p.keyIndex !== false) { cnm = t.p.colModel[t.p.keyIndex + gi + si + ni].name; if (b[0][cnm] !== undefined) { a = b[0][cnm] } } } } cn = t.p.altclass; var k = 0, cna = "", lcdata = {}, air = $.isFunction(t.p.afterInsertRow) ? true : false; while (k < datalen) { data = b[k]; row = []; if (aradd) { try { a = data[cnm]; if (a === undefined) { a = $.jgrid.randId() } } catch (e) { a = $.jgrid.randId() } cna = t.p.altRows === true ? (t.rows.length - 1) % 2 === 0 ? cn : "" : "" } id = a; a = t.p.idPrefix + a; if (ni) { prp = t.formatCol(0, 1, '', null, a, true); row[row.length] = "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" " + prp + ">0</td>" } if (gi) { v = "<input role=\"checkbox\" type=\"checkbox\"" + " id=\"jqg_" + t.p.id + "_" + a + "\" class=\"cbox\"/>"; prp = t.formatCol(ni, 1, '', null, a, true); row[row.length] = "<td role=\"gridcell\" " + prp + ">" + v + "</td>" } if (si) { row[row.length] = $(t).jqGrid("addSubGridCell", gi + ni, 1) } for (i = gi + si + ni; i < t.p.colModel.length; i++) { cm = t.p.colModel[i]; nm = cm.name; lcdata[nm] = data[nm]; v = t.formatter(a, $.jgrid.getAccessor(data, nm), i, data); prp = t.formatCol(i, 1, v, data, a, lcdata); row[row.length] = "<td role=\"gridcell\" " + prp + ">" + v + "</td>" } row.unshift(t.constructTr(a, false, cna, lcdata, data, false)); row[row.length] = "</tr>"; if (t.rows.length === 0) { $("table:first", t.grid.bDiv).append(row.join('')) } else { switch (c) { case 'last': $(t.rows[t.rows.length - 1]).after(row.join('')); sind = t.rows.length - 1; break; case 'first': $(t.rows[0]).after(row.join('')); sind = 1; break; case 'after': sind = $(t).jqGrid('getGridRowById', d); if (sind) { if ($(t.rows[sind.rowIndex + 1]).hasClass("ui-subgrid")) { $(t.rows[sind.rowIndex + 1]).after(row) } else { $(sind).after(row.join('')) } sind = sind.rowIndex + 1 } break; case 'before': sind = $(t).jqGrid('getGridRowById', d); if (sind) { $(sind).before(row.join('')); sind = sind.rowIndex - 1 } break } } if (t.p.subGrid === true) { $(t).jqGrid("addSubGrid", gi + ni, sind) } t.p.records++; t.p.reccount++; $(t).triggerHandler("jqGridAfterInsertRow", [a, data, data]); if (air) { t.p.afterInsertRow.call(t, a, data, data) } k++; if (t.p.datatype === 'local') { lcdata[t.p.localReader.id] = id; t.p._index[id] = t.p.data.length; t.p.data.push(lcdata); lcdata = {} } } if (t.p.altRows === true && !aradd) { if (c === "last") { if ((t.rows.length - 1) % 2 === 1) { $(t.rows[t.rows.length - 1]).addClass(cn) } } else { $(t.rows).each(function (i) { if (i % 2 === 1) { $(this).addClass(cn) } else { $(this).removeClass(cn) } }) } } t.updatepager(true, true); f = true }) } return f }, footerData: function (b, c, d) { var e, success = false, res = {}, title; function isEmpty(a) { var i; for (i in a) { if (a.hasOwnProperty(i)) { return false } } return true } if (b == undefined) { b = "get" } if (typeof d !== "boolean") { d = true } b = b.toLowerCase(); this.each(function () { var t = this, vl; if (!t.grid || !t.p.footerrow) { return false } if (b === "set") { if (isEmpty(c)) { return false } } success = true; $(this.p.colModel).each(function (i) { e = this.name; if (b === "set") { if (c[e] !== undefined) { vl = d ? t.formatter("", c[e], i, c, 'edit') : c[e]; title = this.title ? { "title": $.jgrid.stripHtml(vl)} : {}; $("tr.footrow td:eq(" + i + ")", t.grid.sDiv).html(vl).attr(title); success = true } } else if (b === "get") { res[e] = $("tr.footrow td:eq(" + i + ")", t.grid.sDiv).html() } }) }); return b === "get" ? res : success }, showHideCol: function (c, d) { return this.each(function () { var a = this, fndh = false, brd = $.jgrid.cell_width ? 0 : a.p.cellLayout, cw; if (!a.grid) { return } if (typeof c === 'string') { c = [c] } d = d !== "none" ? "" : "none"; var b = d === "" ? true : false, gh = a.p.groupHeader && (typeof a.p.groupHeader === 'object' || $.isFunction(a.p.groupHeader)); if (gh) { $(a).jqGrid('destroyGroupHeader', false) } $(this.p.colModel).each(function (i) { if ($.inArray(this.name, c) !== -1 && this.hidden === b) { if (a.p.frozenColumns === true && this.frozen === true) { return true } $("tr[role=rowheader]", a.grid.hDiv).each(function () { $(this.cells[i]).css("display", d) }); $(a.rows).each(function () { if (!$(this).hasClass("jqgroup")) { $(this.cells[i]).css("display", d) } }); if (a.p.footerrow) { $("tr.footrow td:eq(" + i + ")", a.grid.sDiv).css("display", d) } cw = parseInt(this.width, 10); if (d === "none") { a.p.tblwidth -= cw + brd } else { a.p.tblwidth += cw + brd } this.hidden = !b; fndh = true; $(a).triggerHandler("jqGridShowHideCol", [b, this.name, i]) } }); if (fndh === true) { if (a.p.shrinkToFit === true && !isNaN(a.p.height)) { a.p.tblwidth += parseInt(a.p.scrollOffset, 10) } $(a).jqGrid("setGridWidth", a.p.shrinkToFit === true ? a.p.tblwidth : a.p.width) } if (gh) { $(a).jqGrid('setGroupHeaders', a.p.groupHeader) } }) }, hideCol: function (a) { return this.each(function () { $(this).jqGrid("showHideCol", a, "none") }) }, showCol: function (a) { return this.each(function () { $(this).jqGrid("showHideCol", a, "") }) }, remapColumns: function (f, g, h) { function resortArray(a) { var b; if (a.length) { b = $.makeArray(a) } else { b = $.extend({}, a) } $.each(f, function (i) { a[i] = b[this] }) } var j = this.get(0); function resortRows(c, d) { $(">tr" + (d || ""), c).each(function () { var a = this; var b = $.makeArray(a.cells); $.each(f, function () { var e = b[this]; if (e) { a.appendChild(e) } }) }) } resortArray(j.p.colModel); resortArray(j.p.colNames); resortArray(j.grid.headers); resortRows($("thead:first", j.grid.hDiv), h && ":not(.ui-jqgrid-labels)"); if (g) { resortRows($("#" + $.jgrid.jqID(j.p.id) + " tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot") } if (j.p.footerrow) { resortRows($("tbody:first", j.grid.sDiv)) } if (j.p.remapColumns) { if (!j.p.remapColumns.length) { j.p.remapColumns = $.makeArray(f) } else { resortArray(j.p.remapColumns) } } j.p.lastsort = $.inArray(j.p.lastsort, f); if (j.p.treeGrid) { j.p.expColInd = $.inArray(j.p.expColInd, f) } $(j).triggerHandler("jqGridRemapColumns", [f, g, h]) }, setGridWidth: function (d, e) { return this.each(function () { if (!this.grid) { return } var a = this, cw, initwidth = 0, brd = $.jgrid.cell_width ? 0 : a.p.cellLayout, lvc, vc = 0, hs = false, scw = a.p.scrollOffset, aw, gw = 0, cr; if (typeof e !== 'boolean') { e = a.p.shrinkToFit } if (isNaN(d)) { return } d = parseInt(d, 10); a.grid.width = a.p.width = d; $("#gbox_" + $.jgrid.jqID(a.p.id)).css("width", d + "px"); $("#gview_" + $.jgrid.jqID(a.p.id)).css("width", d + "px"); $(a.grid.bDiv).css("width", d + "px"); $(a.grid.hDiv).css("width", d + "px"); if (a.p.pager) { $(a.p.pager).css("width", d + "px") } if (a.p.toppager) { $(a.p.toppager).css("width", d + "px") } if (a.p.toolbar[0] === true) { $(a.grid.uDiv).css("width", d + "px"); if (a.p.toolbar[1] === "both") { $(a.grid.ubDiv).css("width", d + "px") } } if (a.p.footerrow) { $(a.grid.sDiv).css("width", d + "px") } if (e === false && a.p.forceFit === true) { a.p.forceFit = false } if (e === true) { $.each(a.p.colModel, function () { if (this.hidden === false) { cw = this.widthOrg; initwidth += cw + brd; if (this.fixed) { gw += cw + brd } else { vc++ } } }); if (vc === 0) { return } a.p.tblwidth = initwidth; aw = d - brd * vc - gw; if (!isNaN(a.p.height)) { if ($(a.grid.bDiv)[0].clientHeight < $(a.grid.bDiv)[0].scrollHeight || a.rows.length === 1) { hs = true; aw -= scw } } initwidth = 0; var b = a.grid.cols.length > 0; $.each(a.p.colModel, function (i) { if (this.hidden === false && !this.fixed) { cw = this.widthOrg; cw = Math.round(aw * cw / (a.p.tblwidth - brd * vc - gw)); if (cw < 0) { return } this.width = cw; initwidth += cw; a.grid.headers[i].width = cw; a.grid.headers[i].el.style.width = cw + "px"; if (a.p.footerrow) { a.grid.footers[i].style.width = cw + "px" } if (b) { a.grid.cols[i].style.width = cw + "px" } lvc = i } }); if (!lvc) { return } cr = 0; if (hs) { if (d - gw - (initwidth + brd * vc) !== scw) { cr = d - gw - (initwidth + brd * vc) - scw } } else if (Math.abs(d - gw - (initwidth + brd * vc)) !== 1) { cr = d - gw - (initwidth + brd * vc) } a.p.colModel[lvc].width += cr; a.p.tblwidth = initwidth + cr + brd * vc + gw; if (a.p.tblwidth > d) { var c = a.p.tblwidth - parseInt(d, 10); a.p.tblwidth = d; cw = a.p.colModel[lvc].width = a.p.colModel[lvc].width - c } else { cw = a.p.colModel[lvc].width } a.grid.headers[lvc].width = cw; a.grid.headers[lvc].el.style.width = cw + "px"; if (b) { a.grid.cols[lvc].style.width = cw + "px" } if (a.p.footerrow) { a.grid.footers[lvc].style.width = cw + "px" } } if (a.p.tblwidth) { $('table:first', a.grid.bDiv).css("width", a.p.tblwidth + "px"); $('table:first', a.grid.hDiv).css("width", a.p.tblwidth + "px"); a.grid.hDiv.scrollLeft = a.grid.bDiv.scrollLeft; if (a.p.footerrow) { $('table:first', a.grid.sDiv).css("width", a.p.tblwidth + "px") } } }) }, setGridHeight: function (c) { return this.each(function () { var a = this; if (!a.grid) { return } var b = $(a.grid.bDiv); b.css({ height: c + (isNaN(c) ? "" : "px") }); if (a.p.frozenColumns === true) { $('#' + $.jgrid.jqID(a.p.id) + "_frozen").parent().height(b.height() - 16) } a.p.height = c; if (a.p.scroll) { a.grid.populateVisible() } }) }, setCaption: function (a) { return this.each(function () { this.p.caption = a; $("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl", this.grid.cDiv).html(a); $(this.grid.cDiv).show() }) }, setLabel: function (d, e, f, g) { return this.each(function () { var a = this, pos = -1; if (!a.grid) { return } if (d !== undefined) { $(a.p.colModel).each(function (i) { if (this.name === d) { pos = i; return false } }) } else { return } if (pos >= 0) { var b = $("tr.ui-jqgrid-labels th:eq(" + pos + ")", a.grid.hDiv); if (e) { var c = $(".s-ico", b); $("[id^=jqgh_]", b).empty().html(e).append(c); a.p.colNames[pos] = e } if (f) { if (typeof f === 'string') { $(b).addClass(f) } else { $(b).css(f) } } if (typeof g === 'object') { $(b).attr(g) } } }) }, setCell: function (e, f, g, h, j, k) { return this.each(function () { var a = this, pos = -1, v, title; if (!a.grid) { return } if (isNaN(f)) { $(a.p.colModel).each(function (i) { if (this.name === f) { pos = i; return false } }) } else { pos = parseInt(f, 10) } if (pos >= 0) { var b = $(a).jqGrid('getGridRowById', e); if (b) { var c = $("td:eq(" + pos + ")", b); if (g !== "" || k === true) { v = a.formatter(e, g, pos, b, 'edit'); title = a.p.colModel[pos].title ? { "title": $.jgrid.stripHtml(v)} : {}; if (a.p.treeGrid && $(".tree-wrap", $(c)).length > 0) { $("span", $(c)).html(v).attr(title) } else { $(c).html(v).attr(title) } if (a.p.datatype === "local") { var d = a.p.colModel[pos], index; g = d.formatter && typeof d.formatter === 'string' && d.formatter === 'date' ? $.unformat.date.call(a, g, d) : g; index = a.p._index[$.jgrid.stripPref(a.p.idPrefix, e)]; if (index !== undefined) { a.p.data[index][d.name] = g } } } if (typeof h === 'string') { $(c).addClass(h) } else if (h) { $(c).css(h) } if (typeof j === 'object') { $(c).attr(j) } } } }) }, getCell: function (c, d) { var f = false; this.each(function () { var a = this, pos = -1; if (!a.grid) { return } if (isNaN(d)) { $(a.p.colModel).each(function (i) { if (this.name === d) { pos = i; return false } }) } else { pos = parseInt(d, 10) } if (pos >= 0) { var b = $(a).jqGrid('getGridRowById', c); if (b) { try { f = $.unformat.call(a, $("td:eq(" + pos + ")", b), { rowId: b.id, colModel: a.p.colModel[pos] }, pos) } catch (e) { f = $.jgrid.htmlDecode($("td:eq(" + pos + ")", b).html()) } } } }); return f }, getCol: function (c, d, f) { var g = [], val, sum = 0, min, max, v; d = typeof d !== 'boolean' ? false : d; if (f === undefined) { f = false } this.each(function () { var a = this, pos = -1; if (!a.grid) { return } if (isNaN(c)) { $(a.p.colModel).each(function (i) { if (this.name === c) { pos = i; return false } }) } else { pos = parseInt(c, 10) } if (pos >= 0) { var b = a.rows.length, i = 0, dlen = 0; if (b && b > 0) { while (i < b) { if ($(a.rows[i]).hasClass('jqgrow')) { try { val = $.unformat.call(a, $(a.rows[i].cells[pos]), { rowId: a.rows[i].id, colModel: a.p.colModel[pos] }, pos) } catch (e) { val = $.jgrid.htmlDecode(a.rows[i].cells[pos].innerHTML) } if (f) { v = parseFloat(val); if (!isNaN(v)) { sum += v; if (max === undefined) { max = min = v } min = Math.min(min, v); max = Math.max(max, v); dlen++ } } else if (d) { g.push({ id: a.rows[i].id, value: val }) } else { g.push(val) } } i++ } if (f) { switch (f.toLowerCase()) { case 'sum': g = sum; break; case 'avg': g = sum / dlen; break; case 'count': g = (b - 1); break; case 'min': g = min; break; case 'max': g = max; break } } } } }); return g }, getColAll: function (d, e, f) { var g = [], val, sum = 0, min, max, v; e = typeof e !== 'boolean' ? false : e; if (f === undefined) { f = false } this.each(function () { var a = this, pos = -1; if (!a.grid) { return } if (isNaN(d)) { $(a.p.colModel).each(function (i) { if (this.name === d) { pos = i; return false } }) } else { pos = parseInt(d, 10) } if (pos >= 0) { var b = $(a).jqGrid("getGridParam", "data"); var c = b.length, i = 0, dlen = 0; if (c && c > 0) { while (i < c) { if (f) { val = b[i][d] || 0; v = parseFloat(val); if (!isNaN(v)) { sum += v; if (max === undefined) { max = min = v } min = Math.min(min, v); max = Math.max(max, v); dlen++ } } else { val = b[i][d]; g.push(val) } i++ } if (f) { switch (f.toLowerCase()) { case 'sum': g = sum; break; case 'avg': g = sum / dlen; break; case 'count': g = (c - 1); break; case 'min': g = min; break; case 'max': g = max; break } } } } }); return g }, clearGridData: function (c) { return this.each(function () { var a = this; if (!a.grid) { return } if (typeof c !== 'boolean') { c = false } if (a.p.deepempty) { $("#" + $.jgrid.jqID(a.p.id) + " tbody:first tr:gt(0)").remove() } else { var b = $("#" + $.jgrid.jqID(a.p.id) + " tbody:first tr:first")[0]; $("#" + $.jgrid.jqID(a.p.id) + " tbody:first").empty().append(b) } if (a.p.footerrow && c) { $(".ui-jqgrid-ftable td", a.grid.sDiv).html("&#160;") } a.p.selrow = null; a.p.selarrrow = []; a.p.savedRow = []; a.p.records = 0; a.p.page = 1; a.p.lastpage = 0; a.p.reccount = 0; a.p.data = []; a.p._index = {}; a.updatepager(true, false) }) }, getInd: function (a, b) { var c = false, rw; this.each(function () { rw = $(this).jqGrid('getGridRowById', a); if (rw) { c = b === true ? rw : rw.rowIndex } }); return c }, bindKeys: function (d) { var o = $.extend({ onEnter: null, onSpace: null, onLeftKey: null, onRightKey: null, scrollingRows: true }, d || {}); return this.each(function () { var c = this; if (!$('body').is('[role]')) { $('body').attr('role', 'application') } c.p.scrollrows = o.scrollingRows; $(c).keydown(function (a) { var b = $(c).find('tr[tabindex=0]')[0], id, r, mind, expanded = c.p.treeReader.expanded_field; if (b) { mind = c.p._index[$.jgrid.stripPref(c.p.idPrefix, b.id)]; if (a.keyCode === 37 || a.keyCode === 38 || a.keyCode === 39 || a.keyCode === 40) { if (a.keyCode === 38) { r = b.previousSibling; id = ""; if (r) { if ($(r).is(":hidden")) { while (r) { r = r.previousSibling; if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) { id = r.id; break } } } else { id = r.id } } $(c).jqGrid('setSelection', id, true, a); a.preventDefault() } if (a.keyCode === 40) { r = b.nextSibling; id = ""; if (r) { if ($(r).is(":hidden")) { while (r) { r = r.nextSibling; if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) { id = r.id; break } } } else { id = r.id } } $(c).jqGrid('setSelection', id, true, a); a.preventDefault() } if (a.keyCode === 37) { if (c.p.treeGrid && c.p.data[mind][expanded]) { $(b).find("div.treeclick").trigger('click') } $(c).triggerHandler("jqGridKeyLeft", [c.p.selrow]); if ($.isFunction(o.onLeftKey)) { o.onLeftKey.call(c, c.p.selrow) } } if (a.keyCode === 39) { if (c.p.treeGrid && !c.p.data[mind][expanded]) { $(b).find("div.treeclick").trigger('click') } $(c).triggerHandler("jqGridKeyRight", [c.p.selrow]); if ($.isFunction(o.onRightKey)) { o.onRightKey.call(c, c.p.selrow) } } } else if (a.keyCode === 13) { $(c).triggerHandler("jqGridKeyEnter", [c.p.selrow]); if ($.isFunction(o.onEnter)) { o.onEnter.call(c, c.p.selrow) } } else if (a.keyCode === 32) { $(c).triggerHandler("jqGridKeySpace", [c.p.selrow]); if ($.isFunction(o.onSpace)) { o.onSpace.call(c, c.p.selrow) } } } }) }) }, unbindKeys: function () { return this.each(function () { $(this).unbind('keydown') }) }, getLocalRow: function (a) { var b = false, ind; this.each(function () { if (a !== undefined) { ind = this.p._index[$.jgrid.stripPref(this.p.idPrefix, a)]; if (ind >= 0) { b = this.p.data[ind] } } }); return b } }) })(jQuery); (function ($) { "use strict"; $.jgrid.extend({ getColProp: function (a) { var b = {}, $t = this[0]; if (!$t.grid) { return false } var c = $t.p.colModel, i; for (i = 0; i < c.length; i++) { if (c[i].name === a) { b = c[i]; break } } return b }, setColProp: function (b, c) { return this.each(function () { if (this.grid) { if (c) { var a = this.p.colModel, i; for (i = 0; i < a.length; i++) { if (a[i].name === b) { $.extend(true, this.p.colModel[i], c); break } } } } }) }, sortGrid: function (c, d, e) { return this.each(function () { var a = this, idx = -1, i, sobj = false; if (!a.grid) { return } if (!c) { c = a.p.sortname } for (i = 0; i < a.p.colModel.length; i++) { if (a.p.colModel[i].index === c || a.p.colModel[i].name === c) { idx = i; if (a.p.frozenColumns === true && a.p.colModel[i].frozen === true) { sobj = a.grid.fhDiv.find("#" + a.p.id + "_" + c) } break } } if (idx !== -1) { var b = a.p.colModel[idx].sortable; if (!sobj) { sobj = a.grid.headers[idx].el } if (typeof b !== 'boolean') { b = true } if (typeof d !== 'boolean') { d = false } if (b) { a.sortData("jqgh_" + a.p.id + "_" + c, idx, d, e, sobj) } } }) }, clearBeforeUnload: function () { return this.each(function () { var a = this.grid; if ($.isFunction(a.emptyRows)) { a.emptyRows.call(this, true, true) } $(document).unbind("mouseup.jqGrid" + this.p.id); $(a.hDiv).unbind("mousemove"); $(this).unbind(); a.dragEnd = null; a.dragMove = null; a.dragStart = null; a.emptyRows = null; a.populate = null; a.populateVisible = null; a.scrollGrid = null; a.selectionPreserver = null; a.bDiv = null; a.cDiv = null; a.hDiv = null; a.cols = null; var i, l = a.headers.length; for (i = 0; i < l; i++) { a.headers[i].el = null } this.formatCol = null; this.sortData = null; this.updatepager = null; this.refreshIndex = null; this.setHeadCheckBox = null; this.constructTr = null; this.formatter = null; this.addXmlData = null; this.addJSONData = null; this.grid = null }) }, GridDestroy: function () { return this.each(function () { if (this.grid) { if (this.p.pager) { $(this.p.pager).remove() } try { $(this).jqGrid('clearBeforeUnload'); $("#gbox_" + $.jgrid.jqID(this.id)).remove() } catch (_) { } } }) }, GridUnload: function () { return this.each(function () { if (!this.grid) { return } var a = { id: $(this).attr('id'), cl: $(this).attr('class') }; if (this.p.pager) { $(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager ui-corner-bottom") } var b = document.createElement('table'); $(b).attr({ id: a.id }); b.className = a.cl; var c = $.jgrid.jqID(this.id); $(b).removeClass("ui-jqgrid-btable"); if ($(this.p.pager).parents("#gbox_" + c).length === 1) { $(b).insertBefore("#gbox_" + c).show(); $(this.p.pager).insertBefore("#gbox_" + c) } else { $(b).insertBefore("#gbox_" + c).show() } $(this).jqGrid('clearBeforeUnload'); $("#gbox_" + c).remove() }) }, setGridState: function (b) { return this.each(function () { if (!this.grid) { return } var a = this; if (b === 'hidden') { $(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + $.jgrid.jqID(a.p.id)).slideUp("fast"); if (a.p.pager) { $(a.p.pager).slideUp("fast") } if (a.p.toppager) { $(a.p.toppager).slideUp("fast") } if (a.p.toolbar[0] === true) { if (a.p.toolbar[1] === 'both') { $(a.grid.ubDiv).slideUp("fast") } $(a.grid.uDiv).slideUp("fast") } if (a.p.footerrow) { $(".ui-jqgrid-sdiv", "#gbox_" + $.jgrid.jqID(a.p.id)).slideUp("fast") } $(".ui-jqgrid-titlebar-close span", a.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); a.p.gridstate = 'hidden' } else if (b === 'visible') { $(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + $.jgrid.jqID(a.p.id)).slideDown("fast"); if (a.p.pager) { $(a.p.pager).slideDown("fast") } if (a.p.toppager) { $(a.p.toppager).slideDown("fast") } if (a.p.toolbar[0] === true) { if (a.p.toolbar[1] === 'both') { $(a.grid.ubDiv).slideDown("fast") } $(a.grid.uDiv).slideDown("fast") } if (a.p.footerrow) { $(".ui-jqgrid-sdiv", "#gbox_" + $.jgrid.jqID(a.p.id)).slideDown("fast") } $(".ui-jqgrid-titlebar-close span", a.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); a.p.gridstate = 'visible' } }) }, filterToolbar: function (p) { p = $.extend({ autosearch: true, searchOnEnter: true, beforeSearch: null, afterSearch: null, beforeClear: null, afterClear: null, searchurl: '', stringResult: false, groupOp: 'AND', defaultSearch: "bw", searchOperators: false, resetIcon: "x", operands: { "eq": "==", "ne": "!", "lt": "<", "le": "<=", "gt": ">", "ge": ">=", "bw": "^", "bn": "!^", "in": "=", "ni": "!=", "ew": "|", "en": "!@", "cn": "~", "nc": "!~", "nu": "#", "nn": "!#"} }, $.jgrid.search, p || {}); return this.each(function () { var o = this; if (this.ftoolbar) { return } var q = function () { var b = {}, j = 0, v, nm, sopt = {}, so; $.each(o.p.colModel, function () { var a = $("#gs_" + $.jgrid.jqID(this.name), (this.frozen === true && o.p.frozenColumns === true) ? o.grid.fhDiv : o.grid.hDiv); nm = this.index || this.name; if (p.searchOperators) { so = a.parent().prev().children("a").attr("soper") || p.defaultSearch } else { so = (this.searchoptions && this.searchoptions.sopt) ? this.searchoptions.sopt[0] : this.stype === 'select' ? 'eq' : p.defaultSearch } v = this.stype === "custom" && $.isFunction(this.searchoptions.custom_value) && a.length > 0 && a[0].nodeName.toUpperCase() === "SPAN" ? this.searchoptions.custom_value.call(o, a.children(".customelement:first"), "get") : a.val(); if (v || so === "nu" || so === "nn") { b[nm] = v; sopt[nm] = so; j++ } else { try { delete o.p.postData[nm] } catch (z) { } } }); var c = j > 0 ? true : false; if (p.stringResult === true || o.p.datatype === "local") { var d = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":["; var e = 0; $.each(b, function (i, n) { if (e > 0) { d += "," } d += "{\"field\":\"" + i + "\","; d += "\"op\":\"" + sopt[i] + "\","; n += ""; d += "\"data\":\"" + n.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"}"; e++ }); d += "]}"; $.extend(o.p.postData, { filters: d }); $.each(['searchField', 'searchString', 'searchOper'], function (i, n) { if (o.p.postData.hasOwnProperty(n)) { delete o.p.postData[n] } }) } else { $.extend(o.p.postData, b) } var f; if (o.p.searchurl) { f = o.p.url; $(o).jqGrid("setGridParam", { url: o.p.searchurl }) } var g = $(o).triggerHandler("jqGridToolbarBeforeSearch") === 'stop' ? true : false; if (!g && $.isFunction(p.beforeSearch)) { g = p.beforeSearch.call(o) } if (!g) { $(o).jqGrid("setGridParam", { search: c }).trigger("reloadGrid", [{ page: 1}]) } if (f) { $(o).jqGrid("setGridParam", { url: f }) } $(o).triggerHandler("jqGridToolbarAfterSearch"); if ($.isFunction(p.afterSearch)) { p.afterSearch.call(o) } }, clearToolbar = function (a) { var b = {}, j = 0, nm; a = (typeof a !== 'boolean') ? true : a; $.each(o.p.colModel, function () { var v, $elem = $("#gs_" + $.jgrid.jqID(this.name), (this.frozen === true && o.p.frozenColumns === true) ? o.grid.fhDiv : o.grid.hDiv); if (this.searchoptions && this.searchoptions.defaultValue !== undefined) { v = this.searchoptions.defaultValue } nm = this.index || this.name; switch (this.stype) { case 'select': $elem.find("option").each(function (i) { if (i === 0) { this.selected = true } if ($(this).val() === v) { this.selected = true; return false } }); if (v !== undefined) { b[nm] = v; j++ } else { try { delete o.p.postData[nm] } catch (e) { } } break; case 'text': $elem.val(v || ""); if (v !== undefined) { b[nm] = v; j++ } else { try { delete o.p.postData[nm] } catch (y) { } } break; case 'custom': if ($.isFunction(this.searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN") { this.searchoptions.custom_value.call(o, $elem.children(".customelement:first"), "set", v || "") } break } }); var c = j > 0 ? true : false; o.p.resetsearch = true; if (p.stringResult === true || o.p.datatype === "local") { var d = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":["; var f = 0; $.each(b, function (i, n) { if (f > 0) { d += "," } d += "{\"field\":\"" + i + "\","; d += "\"op\":\"" + "eq" + "\","; n += ""; d += "\"data\":\"" + n.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"}"; f++ }); d += "]}"; $.extend(o.p.postData, { filters: d }); $.each(['searchField', 'searchString', 'searchOper'], function (i, n) { if (o.p.postData.hasOwnProperty(n)) { delete o.p.postData[n] } }) } else { $.extend(o.p.postData, b) } var g; if (o.p.searchurl) { g = o.p.url; $(o).jqGrid("setGridParam", { url: o.p.searchurl }) } var h = $(o).triggerHandler("jqGridToolbarBeforeClear") === 'stop' ? true : false; if (!h && $.isFunction(p.beforeClear)) { h = p.beforeClear.call(o) } if (!h) { if (a) { $(o).jqGrid("setGridParam", { search: c }).trigger("reloadGrid", [{ page: 1}]) } } if (g) { $(o).jqGrid("setGridParam", { url: g }) } $(o).triggerHandler("jqGridToolbarAfterClear"); if ($.isFunction(p.afterClear)) { p.afterClear() } }, toggleToolbar = function () { var a = $("tr.ui-search-toolbar", o.grid.hDiv), trow2 = o.p.frozenColumns === true ? $("tr.ui-search-toolbar", o.grid.fhDiv) : false; if (a.css("display") === 'none') { a.show(); if (trow2) { trow2.show() } } else { a.hide(); if (trow2) { trow2.hide() } } }, buildRuleMenu = function (b, c, d) { $("#sopt_menu").remove(); c = parseInt(c, 10); d = parseInt(d, 10) + 18; var f = $('.ui-jqgrid-view').css('font-size') || '11px'; var g = '<ul id="sopt_menu" class="ui-search-menu" role="menu" tabindex="0" style="font-size:' + f + ';left:' + c + 'px;top:' + d + 'px;">', selected = $(b).attr("soper"), selclass, aoprs = [], ina; var i = 0, nm = $(b).attr("colname"), len = o.p.colModel.length; while (i < len) { if (o.p.colModel[i].name === nm) { break } i++ } var h = o.p.colModel[i], options = $.extend({}, h.searchoptions); if (!options.sopt) { options.sopt = []; options.sopt[0] = h.stype === 'select' ? 'eq' : p.defaultSearch } $.each(p.odata, function () { aoprs.push(this.oper) }); for (i = 0; i < options.sopt.length; i++) { ina = $.inArray(options.sopt[i], aoprs); if (ina !== -1) { selclass = selected === p.odata[ina].oper ? "ui-state-highlight" : ""; g += '<li class="ui-menu-item ' + selclass + '" role="presentation"><a class="ui-corner-all g-menu-item" tabindex="0" role="menuitem" value="' + p.odata[ina].oper + '" oper="' + p.operands[p.odata[ina].oper] + '"><table cellspacing="0" cellpadding="0" border="0"><tr><td width="25px">' + p.operands[p.odata[ina].oper] + '</td><td>' + p.odata[ina].text + '</td></tr></table></a></li>' } } g += "</ul>"; $('body').append(g); $("#sopt_menu").addClass("ui-menu ui-widget ui-widget-content ui-corner-all"); $("#sopt_menu > li > a").hover(function () { $(this).addClass("ui-state-hover") }, function () { $(this).removeClass("ui-state-hover") }).click(function (e) { var v = $(this).attr("value"), oper = $(this).attr("oper"); $(o).triggerHandler("jqGridToolbarSelectOper", [v, oper, b]); $("#sopt_menu").hide(); $(b).text(oper).attr("soper", v); if (p.autosearch === true) { var a = $(b).parent().next().children()[0]; if ($(a).val() || v === "nu" || v === "nn") { q() } } }) }; var r = $("<tr class='ui-search-toolbar' role='rowheader'></tr>"); var s; $.each(o.p.colModel, function (b) { var c = this, soptions, surl, self, select = "", sot = "=", so, i, th = $("<th role='columnheader' class='ui-state-default ui-th-column ui-th-" + o.p.direction + "'></th>"), thd = $("<div style='position:relative;height:100%;padding-right:0.3em;padding-left:0.3em;'></div>"), stbl = $("<table class='ui-search-table' cellspacing='0'><tr><td class='ui-search-oper'></td><td class='ui-search-input'></td><td class='ui-search-clear'></td></tr></table>"); if (this.hidden === true) { $(th).css("display", "none") } this.search = this.search === false ? false : true; if (this.stype === undefined) { this.stype = 'text' } soptions = $.extend({}, this.searchoptions || {}); if (this.search) { if (p.searchOperators) { so = (soptions.sopt) ? soptions.sopt[0] : c.stype === 'select' ? 'eq' : p.defaultSearch; for (i = 0; i < p.odata.length; i++) { if (p.odata[i].oper === so) { sot = p.operands[so] || ""; break } } var f = soptions.searchtitle != null ? soptions.searchtitle : p.operandTitle; select = "<a title='" + f + "' style='padding-right: 0.5em;' soper='" + so + "' class='soptclass' colname='" + this.name + "'>" + sot + "</a>" } $("td:eq(0)", stbl).attr("colindex", b).append(select); if (soptions.clearSearch === undefined) { soptions.clearSearch = true } if (soptions.clearSearch) { var g = p.resetTitle || 'Clear Search Value'; $("td:eq(2)", stbl).append("<a title='" + g + "' style='padding-right: 0.3em;padding-left: 0.3em;' class='clearsearchclass'>" + p.resetIcon + "</a>") } else { $("td:eq(2)", stbl).hide() } switch (this.stype) { case "select": surl = this.surl || soptions.dataUrl; if (surl) { self = thd; $(self).append(stbl); $.ajax($.extend({ url: surl, dataType: "html", success: function (a) { if (soptions.buildSelect !== undefined) { var d = soptions.buildSelect(a); if (d) { $("td:eq(1)", stbl).append(d) } } else { $("td:eq(1)", stbl).append(a) } if (soptions.defaultValue !== undefined) { $("select", self).val(soptions.defaultValue) } $("select", self).attr({ name: c.index || c.name, id: "gs_" + c.name }); if (soptions.attr) { $("select", self).attr(soptions.attr) } $("select", self).css({ width: "100%" }); $.jgrid.bindEv.call(o, $("select", self)[0], soptions); if (p.autosearch === true) { $("select", self).change(function () { q(); return false }) } a = null } }, $.jgrid.ajaxOptions, o.p.ajaxSelectOptions || {})) } else { var h, sep, delim; if (c.searchoptions) { h = c.searchoptions.value === undefined ? "" : c.searchoptions.value; sep = c.searchoptions.separator === undefined ? ":" : c.searchoptions.separator; delim = c.searchoptions.delimiter === undefined ? ";" : c.searchoptions.delimiter } else if (c.editoptions) { h = c.editoptions.value === undefined ? "" : c.editoptions.value; sep = c.editoptions.separator === undefined ? ":" : c.editoptions.separator; delim = c.editoptions.delimiter === undefined ? ";" : c.editoptions.delimiter } if (h) { var j = document.createElement("select"); j.style.width = "100%"; $(j).attr({ name: c.index || c.name, id: "gs_" + c.name }); var l, ov, key, k; if (typeof h === "string") { so = h.split(delim); for (k = 0; k < so.length; k++) { l = so[k].split(sep); ov = document.createElement("option"); ov.value = l[0]; ov.innerHTML = l[1]; j.appendChild(ov) } } else if (typeof h === "object") { for (key in h) { if (h.hasOwnProperty(key)) { ov = document.createElement("option"); ov.value = key; ov.innerHTML = h[key]; j.appendChild(ov) } } } if (soptions.defaultValue !== undefined) { $(j).val(soptions.defaultValue) } if (soptions.attr) { $(j).attr(soptions.attr) } $(thd).append(stbl); $.jgrid.bindEv.call(o, j, soptions); $("td:eq(1)", stbl).append(j); if (p.autosearch === true) { $(j).change(function () { q(); return false }) } } } break; case "text": var m = soptions.defaultValue !== undefined ? soptions.defaultValue : ""; $("td:eq(1)", stbl).append("<input type='text' style='width:100%;padding:0px;' name='" + (c.index || c.name) + "' id='gs_" + c.name + "' value='" + m + "'/>"); $(thd).append(stbl); if (soptions.attr) { $("input", thd).attr(soptions.attr) } $.jgrid.bindEv.call(o, $("input", thd)[0], soptions); if (p.autosearch === true) { if (p.searchOnEnter) { $("input", thd).keypress(function (e) { var a = e.charCode || e.keyCode || 0; if (a === 13) { q(); return false } return this }) } else { $("input", thd).keydown(function (e) { var a = e.which; switch (a) { case 13: return false; case 9: case 16: case 37: case 38: case 39: case 40: case 27: break; default: if (s) { clearTimeout(s) } s = setTimeout(function () { q() }, 500) } }) } } break; case "custom": $("td:eq(1)", stbl).append("<span style='width:95%;padding:0px;' name='" + (c.index || c.name) + "' id='gs_" + c.name + "'/>"); $(thd).append(stbl); try { if ($.isFunction(soptions.custom_element)) { var n = soptions.custom_element.call(o, soptions.defaultValue !== undefined ? soptions.defaultValue : "", soptions); if (n) { n = $(n).addClass("customelement"); $(thd).find(">span").append(n) } else { throw "e2"; } } else { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose) } if (e === "e2") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, typeof e === "string" ? e : e.message, $.jgrid.edit.bClose) } } break } } $(th).append(thd); $(r).append(th); if (!p.searchOperators) { $("td:eq(0)", stbl).hide() } }); $("table thead", o.grid.hDiv).append(r); if (p.searchOperators) { $(".soptclass", r).click(function (e) { var a = $(this).offset(), left = (a.left), top = (a.top); buildRuleMenu(this, left, top); e.stopPropagation() }); $("body").on('click', function (e) { if (e.target.className !== "soptclass") { $("#sopt_menu").hide() } }) } $(".clearsearchclass", r).click(function (e) { var a = $(this).parents("tr:first"), coli = parseInt($("td.ui-search-oper", a).attr('colindex'), 10), sval = $.extend({}, o.p.colModel[coli].searchoptions || {}), dval = sval.defaultValue ? sval.defaultValue : ""; if (o.p.colModel[coli].stype === "select") { if (dval) { $("td.ui-search-input select", a).val(dval) } else { $("td.ui-search-input select", a)[0].selectedIndex = 0 } } else { $("td.ui-search-input input", a).val(dval) } if (p.autosearch === true) { q() } }); this.ftoolbar = true; this.triggerToolbar = q; this.clearToolbar = clearToolbar; this.toggleToolbar = toggleToolbar }) }, destroyFilterToolbar: function () { return this.each(function () { if (!this.ftoolbar) { return } this.triggerToolbar = null; this.clearToolbar = null; this.toggleToolbar = null; this.ftoolbar = false; $(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove() }) }, destroyGroupHeader: function (b) { if (b === undefined) { b = true } return this.each(function () { var a = this, $tr, i, l, headers, $th, $resizing, grid = a.grid, thead = $("table.ui-jqgrid-htable thead", grid.hDiv), cm = a.p.colModel, hc; if (!grid) { return } $(this).unbind('.setGroupHeaders'); $tr = $("<tr>", { role: "rowheader" }).addClass("ui-jqgrid-labels"); headers = grid.headers; for (i = 0, l = headers.length; i < l; i++) { hc = cm[i].hidden ? "none" : ""; $th = $(headers[i].el).width(headers[i].width).css('display', hc); try { $th.removeAttr("rowSpan") } catch (rs) { $th.attr("rowSpan", 1) } $tr.append($th); $resizing = $th.children("span.ui-jqgrid-resize"); if ($resizing.length > 0) { $resizing[0].style.height = "" } $th.children("div")[0].style.top = "" } $(thead).children('tr.ui-jqgrid-labels').remove(); $(thead).prepend($tr); if (b === true) { $(a).jqGrid('setGridParam', { 'groupHeader': null }) } }) }, setGroupHeaders: function (o) { o = $.extend({ useColSpanStyle: false, groupHeaders: [] }, o || {}); return this.each(function () { this.p.groupHeader = o; var d = this, i, cmi, skip = 0, $tr, $colHeader, th, $th, thStyle, iCol, cghi, numberOfColumns, titleText, cVisibleColumns, colModel = d.p.colModel, cml = colModel.length, ths = d.grid.headers, $htable = $("table.ui-jqgrid-htable", d.grid.hDiv), $trLabels = $htable.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header"), $thead = $htable.children("thead"), $theadInTable, $firstHeaderRow = $htable.find(".jqg-first-row-header"); if ($firstHeaderRow[0] === undefined) { $firstHeaderRow = $('<tr>', { role: "row", "aria-hidden": "true" }).addClass("jqg-first-row-header").css("height", "auto") } else { $firstHeaderRow.empty() } var f, inColumnHeader = function (a, b) { var c = b.length, i; for (i = 0; i < c; i++) { if (b[i].startColumnName === a) { return i } } return -1 }; $(d).prepend($thead); $tr = $('<tr>', { role: "rowheader" }).addClass("ui-jqgrid-labels jqg-third-row-header"); for (i = 0; i < cml; i++) { th = ths[i].el; $th = $(th); cmi = colModel[i]; thStyle = { height: '0px', width: ths[i].width + 'px', display: (cmi.hidden ? 'none' : '') }; $("<th>", { role: 'gridcell' }).css(thStyle).addClass("ui-first-th-" + d.p.direction).appendTo($firstHeaderRow); th.style.width = ""; iCol = inColumnHeader(cmi.name, o.groupHeaders); if (iCol >= 0) { cghi = o.groupHeaders[iCol]; numberOfColumns = cghi.numberOfColumns; titleText = cghi.titleText; for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) { if (!colModel[i + iCol].hidden) { cVisibleColumns++ } } $colHeader = $('<th>').attr({ role: "columnheader" }).addClass("ui-state-default ui-th-column-header ui-th-" + d.p.direction).css({ 'height': '22px', 'border-top': '0 none' }).html(titleText); if (cVisibleColumns > 0) { $colHeader.attr("colspan", String(cVisibleColumns)) } if (d.p.headertitles) { $colHeader.attr("title", $colHeader.text()) } if (cVisibleColumns === 0) { $colHeader.hide() } $th.before($colHeader); $tr.append(th); skip = numberOfColumns - 1 } else { if (skip === 0) { if (o.useColSpanStyle) { $th.attr("rowspan", "2") } else { $('<th>', { role: "columnheader" }).addClass("ui-state-default ui-th-column-header ui-th-" + d.p.direction).css({ "display": cmi.hidden ? 'none' : '', 'border-top': '0 none' }).insertBefore($th); $tr.append(th) } } else { $tr.append(th); skip-- } } } $theadInTable = $(d).children("thead"); $theadInTable.prepend($firstHeaderRow); $tr.insertAfter($trLabels); $htable.append($theadInTable); if (o.useColSpanStyle) { $htable.find("span.ui-jqgrid-resize").each(function () { var a = $(this).parent(); if (a.is(":visible")) { this.style.cssText = 'height: ' + a.height() + 'px !important; cursor: col-resize;' } }); $htable.find("div.ui-jqgrid-sortable").each(function () { var a = $(this), $parent = a.parent(); if ($parent.is(":visible") && $parent.is(":has(span.ui-jqgrid-resize)")) { a.css('top', ($parent.height() - a.outerHeight()) / 2 + 'px') } }) } f = $theadInTable.find("tr.jqg-first-row-header"); $(d).bind('jqGridResizeStop.setGroupHeaders', function (e, a, b) { f.find('th').eq(b).width(a) }) }) }, setFrozenColumns: function () { return this.each(function () { if (!this.grid) { return } var d = this, cm = d.p.colModel, i = 0, len = cm.length, maxfrozen = -1, frozen = false; if (d.p.subGrid === true || d.p.treeGrid === true || d.p.cellEdit === true || d.p.sortable || d.p.scroll) { return } if (d.p.rownumbers) { i++ } if (d.p.multiselect) { i++ } while (i < len) { if (cm[i].frozen === true) { frozen = true; maxfrozen = i } else { break } i++ } if (maxfrozen >= 0 && frozen) { var f = d.p.caption ? $(d.grid.cDiv).outerHeight() : 0, hth = $(".ui-jqgrid-htable", "#gview_" + $.jgrid.jqID(d.p.id)).height(); if (d.p.toppager) { f = f + $(d.grid.topDiv).outerHeight() } if (d.p.toolbar[0] === true) { if (d.p.toolbar[1] !== "bottom") { f = f + $(d.grid.uDiv).outerHeight() } } d.grid.fhDiv = $('<div style="position:absolute;left:0px;top:' + f + 'px;height:' + hth + 'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>'); d.grid.fbDiv = $('<div style="position:absolute;left:0px;top:' + (parseInt(f, 10) + parseInt(hth, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>'); $("#gview_" + $.jgrid.jqID(d.p.id)).append(d.grid.fhDiv); var g = $(".ui-jqgrid-htable", "#gview_" + $.jgrid.jqID(d.p.id)).clone(true); if (d.p.groupHeader) { $("tr.jqg-first-row-header, tr.jqg-third-row-header", g).each(function () { $("th:gt(" + maxfrozen + ")", this).remove() }); var h = -1, fdel = -1, cs, rs; $("tr.jqg-second-row-header th", g).each(function () { cs = parseInt($(this).attr("colspan"), 10); rs = parseInt($(this).attr("rowspan"), 10); if (rs) { h++; fdel++ } if (cs) { h = h + cs; fdel++ } if (h === maxfrozen) { return false } }); if (h !== maxfrozen) { fdel = maxfrozen } $("tr.jqg-second-row-header", g).each(function () { $("th:gt(" + fdel + ")", this).remove() }) } else { $("tr", g).each(function () { $("th:gt(" + maxfrozen + ")", this).remove() }) } $(g).width(1); $(d.grid.fhDiv).append(g).mousemove(function (e) { if (d.grid.resizing) { d.grid.dragMove(e); return false } }); $(d).bind('jqGridResizeStop.setFrozenColumns', function (e, w, a) { var b = $(".ui-jqgrid-htable", d.grid.fhDiv); $("th:eq(" + a + ")", b).width(w); var c = $(".ui-jqgrid-btable", d.grid.fbDiv); $("tr:first td:eq(" + a + ")", c).width(w) }); $(d).bind('jqGridSortCol.setFrozenColumns', function (e, a, b) { var c = $("tr.ui-jqgrid-labels:last th:eq(" + d.p.lastsort + ")", d.grid.fhDiv), newSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + b + ")", d.grid.fhDiv); $("span.ui-grid-ico-sort", c).addClass('ui-state-disabled'); $(c).attr("aria-selected", "false"); $("span.ui-icon-" + d.p.sortorder, newSelectedTh).removeClass('ui-state-disabled'); $(newSelectedTh).attr("aria-selected", "true"); if (!d.p.viewsortcols[0]) { if (d.p.lastsort !== b) { $("span.s-ico", c).hide(); $("span.s-ico", newSelectedTh).show() } } }); $("#gview_" + $.jgrid.jqID(d.p.id)).append(d.grid.fbDiv); $(d.grid.bDiv).scroll(function () { $(d.grid.fbDiv).scrollTop($(this).scrollTop()) }); if (d.p.hoverrows === true) { $("#" + $.jgrid.jqID(d.p.id)).unbind('mouseover').unbind('mouseout') } $(d).bind('jqGridAfterGridComplete.setFrozenColumns', function () { $("#" + $.jgrid.jqID(d.p.id) + "_frozen").remove(); $(d.grid.fbDiv).height($(d.grid.bDiv).height() - 16); var a = $("#" + $.jgrid.jqID(d.p.id)).clone(true); $("tr[role=row]", a).each(function () { $("td[role=gridcell]:gt(" + maxfrozen + ")", this).remove() }); $(a).width(1).attr("id", d.p.id + "_frozen"); $(d.grid.fbDiv).append(a); if (d.p.hoverrows === true) { $("tr.jqgrow", a).hover(function () { $(this).addClass("ui-state-hover"); $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID(d.p.id)).addClass("ui-state-hover") }, function () { $(this).removeClass("ui-state-hover"); $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID(d.p.id)).removeClass("ui-state-hover") }); $("tr.jqgrow", "#" + $.jgrid.jqID(d.p.id)).hover(function () { $(this).addClass("ui-state-hover"); $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID(d.p.id) + "_frozen").addClass("ui-state-hover") }, function () { $(this).removeClass("ui-state-hover"); $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID(d.p.id) + "_frozen").removeClass("ui-state-hover") }) } a = null }); if (!d.grid.hDiv.loading) { $(d).triggerHandler("jqGridAfterGridComplete") } d.p.frozenColumns = true } }) }, destroyFrozenColumns: function () { return this.each(function () { if (!this.grid) { return } if (this.p.frozenColumns === true) { var a = this; $(a.grid.fhDiv).remove(); $(a.grid.fbDiv).remove(); a.grid.fhDiv = null; a.grid.fbDiv = null; $(this).unbind('.setFrozenColumns'); if (a.p.hoverrows === true) { var b; $("#" + $.jgrid.jqID(a.p.id)).bind('mouseover', function (e) { b = $(e.target).closest("tr.jqgrow"); if ($(b).attr("class") !== "ui-subgrid") { $(b).addClass("ui-state-hover") } }).bind('mouseout', function (e) { b = $(e.target).closest("tr.jqgrow"); $(b).removeClass("ui-state-hover") }) } this.p.frozenColumns = false } }) } }) })(jQuery); (function ($) { $.fn.jqm = function (o) { var p = { overlay: 50, closeoverlay: true, overlayClass: 'jqmOverlay', closeClass: 'jqmClose', trigger: '.jqModal', ajax: F, ajaxText: '', target: F, modal: F, toTop: F, onShow: F, onHide: F, onLoad: F }; return this.each(function () { if (this._jqm) return H[this._jqm].c = $.extend({}, H[this._jqm].c, o); s++; this._jqm = s; H[s] = { c: $.extend(p, $.jqm.params, o), a: F, w: $(this).addClass('jqmID' + s), s: s }; if (p.trigger) $(this).jqmAddTrigger(p.trigger) }) }; $.fn.jqmAddClose = function (e) { return hs(this, e, 'jqmHide') }; $.fn.jqmAddTrigger = function (e) { return hs(this, e, 'jqmShow') }; $.fn.jqmShow = function (t) { return this.each(function () { $.jqm.open(this._jqm, t) }) }; $.fn.jqmHide = function (t) { return this.each(function () { $.jqm.close(this._jqm, t) }) }; $.jqm = { hash: {}, open: function (s, t) { var h = H[s], c = h.c, cc = '.' + c.closeClass, z = (parseInt(h.w.css('z-index'))); z = (z > 0) ? z : 3000; var o = $('<div></div>').css({ height: '100%', width: '100%', position: 'fixed', left: 0, top: 0, 'z-index': z - 1, opacity: c.overlay / 100 }); if (h.a) return F; h.t = t; h.a = true; h.w.css('z-index', z); if (c.modal) { if (!A[0]) setTimeout(function () { L('bind') }, 1); A.push(s) } else if (c.overlay > 0) { if (c.closeoverlay) h.w.jqmAddClose(o) } else o = F; h.o = (o) ? o.addClass(c.overlayClass).prependTo('body') : F; if (c.ajax) { var r = c.target || h.w, u = c.ajax; r = (typeof r == 'string') ? $(r, h.w) : $(r); u = (u.substr(0, 1) == '@') ? $(t).attr(u.substring(1)) : u; r.html(c.ajaxText).load(u, function () { if (c.onLoad) c.onLoad.call(this, h); if (cc) h.w.jqmAddClose($(cc, h.w)); e(h) }) } else if (cc) h.w.jqmAddClose($(cc, h.w)); if (c.toTop && h.o) h.w.before('<span id="jqmP' + h.w[0]._jqm + '"></span>').insertAfter(h.o); (c.onShow) ? c.onShow(h) : h.w.show(); e(h); return F }, close: function (s) { var h = H[s]; if (!h.a) return F; h.a = F; if (A[0]) { A.pop(); if (!A[0]) L('unbind') } if (h.c.toTop && h.o) $('#jqmP' + h.w[0]._jqm).after(h.w).remove(); if (h.c.onHide) h.c.onHide(h); else { h.w.hide(); if (h.o) h.o.remove() } return F }, params: {} }; var s = 0, H = $.jqm.hash, A = [], F = false, e = function (h) { f(h) }, f = function (h) { try { $(':input:visible', h.w)[0].focus() } catch (_) { } }, L = function (t) { $(document)[t]("keypress", m)[t]("keydown", m)[t]("mousedown", m) }, m = function (e) { var h = H[A[A.length - 1]], r = (!$(e.target).parents('.jqmID' + h.s)[0]); if (r) { $('.jqmID' + h.s).each(function () { var a = $(this), offset = a.offset(); if (offset.top <= e.pageY && e.pageY <= offset.top + a.height() && offset.left <= e.pageX && e.pageX <= offset.left + a.width()) { r = false; return false } }); f(h) } return !r }, hs = function (w, t, c) { return w.each(function () { var s = this._jqm; $(t).each(function () { if (!this[c]) { this[c] = []; $(this).click(function () { for (var i in { jqmShow: 1, jqmHide: 1 }) for (var s in this[i]) if (H[this[i][s]]) H[this[i][s]].w[i](this); return F }) } this[c].push(s) }) }) } })(jQuery); (function ($) { $.fn.jqDrag = function (h) { return i(this, h, 'd') }; $.fn.jqResize = function (h, a) { return i(this, h, 'r', a) }; $.jqDnR = { dnr: {}, e: 0, drag: function (v) { if (M.k == 'd') { E.css({ left: M.X + v.pageX - M.pX, top: M.Y + v.pageY - M.pY }) } else { E.css({ width: Math.max(v.pageX - M.pX + M.W, 0), height: Math.max(v.pageY - M.pY + M.H, 0) }); if (M1) { E1.css({ width: Math.max(v.pageX - M1.pX + M1.W, 0), height: Math.max(v.pageY - M1.pY + M1.H, 0) }) } } return false }, stop: function () { $(document).unbind('mousemove', J.drag).unbind('mouseup', J.stop) } }; var J = $.jqDnR, M = J.dnr, E = J.e, E1, M1, i = function (e, h, k, a) { return e.each(function () { h = (h) ? $(h, e) : e; h.bind('mousedown', { e: e, k: k }, function (v) { var d = v.data, p = {}; E = d.e; E1 = a ? $(a) : false; if (E.css('position') != 'relative') { try { E.position(p) } catch (e) { } } M = { X: p.left || f('left') || 0, Y: p.top || f('top') || 0, W: f('width') || E[0].scrollWidth || 0, H: f('height') || E[0].scrollHeight || 0, pX: v.pageX, pY: v.pageY, k: d.k }; if (E1 && d.k != 'd') { M1 = { X: p.left || f1('left') || 0, Y: p.top || f1('top') || 0, W: E1[0].offsetWidth || f1('width') || 0, H: E1[0].offsetHeight || f1('height') || 0, pX: v.pageX, pY: v.pageY, k: d.k} } else { M1 = false } if ($("input.hasDatepicker", E[0])[0]) { try { $("input.hasDatepicker", E[0]).datepicker('hide') } catch (dpe) { } } $(document).mousemove($.jqDnR.drag).mouseup($.jqDnR.stop); return false }) }) }, f = function (k) { return parseInt(E.css(k), 10) || false }, f1 = function (k) { return parseInt(E1.css(k), 10) || false } })(jQuery); var xmlJsonClass = { xml2json: function (a, b) { if (a.nodeType === 9) { a = a.documentElement } var c = this.removeWhite(a); var d = this.toObj(c); var e = this.toJson(d, a.nodeName, "\t"); return "{\n" + b + (b ? e.replace(/\t/g, b) : e.replace(/\t|\n/g, "")) + "\n}" }, json2xml: function (o, f) { var g = function (v, a, b) { var c = ""; var i, n; if (v instanceof Array) { if (v.length === 0) { c += b + "<" + a + ">__EMPTY_ARRAY_</" + a + ">\n" } else { for (i = 0, n = v.length; i < n; i += 1) { var d = b + g(v[i], a, b + "\t") + "\n"; c += d } } } else if (typeof (v) === "object") { var e = false; c += b + "<" + a; var m; for (m in v) if (v.hasOwnProperty(m)) { if (m.charAt(0) === "@") { c += " " + m.substr(1) + "=\"" + v[m].toString() + "\"" } else { e = true } } c += e ? ">" : "/>"; if (e) { for (m in v) if (v.hasOwnProperty(m)) { if (m === "#text") { c += v[m] } else if (m === "#cdata") { c += "<![CDATA[" + v[m] + "]]>" } else if (m.charAt(0) !== "@") { c += g(v[m], m, b + "\t") } } c += (c.charAt(c.length - 1) === "\n" ? b : "") + "</" + a + ">" } } else if (typeof (v) === "function") { c += b + "<" + a + ">" + "<![CDATA[" + v + "]]>" + "</" + a + ">" } else { if (v === undefined) { v = "" } if (v.toString() === "\"\"" || v.toString().length === 0) { c += b + "<" + a + ">__EMPTY_STRING_</" + a + ">" } else { c += b + "<" + a + ">" + v.toString() + "</" + a + ">" } } return c }; var h = ""; var m; for (m in o) if (o.hasOwnProperty(m)) { h += g(o[m], m, "") } return f ? h.replace(/\t/g, f) : h.replace(/\t|\n/g, "") }, toObj: function (a) { var o = {}; var b = /function/i; if (a.nodeType === 1) { if (a.attributes.length) { var i; for (i = 0; i < a.attributes.length; i += 1) { o["@" + a.attributes[i].nodeName] = (a.attributes[i].nodeValue || "").toString() } } if (a.firstChild) { var c = 0, cdataChild = 0, hasElementChild = false; var n; for (n = a.firstChild; n; n = n.nextSibling) { if (n.nodeType === 1) { hasElementChild = true } else if (n.nodeType === 3 && n.nodeValue.match(/[^ \f\n\r\t\v]/)) { c += 1 } else if (n.nodeType === 4) { cdataChild += 1 } } if (hasElementChild) { if (c < 2 && cdataChild < 2) { this.removeWhite(a); for (n = a.firstChild; n; n = n.nextSibling) { if (n.nodeType === 3) { o["#text"] = this.escape(n.nodeValue) } else if (n.nodeType === 4) { if (b.test(n.nodeValue)) { o[n.nodeName] = [o[n.nodeName], n.nodeValue] } else { o["#cdata"] = this.escape(n.nodeValue) } } else if (o[n.nodeName]) { if (o[n.nodeName] instanceof Array) { o[n.nodeName][o[n.nodeName].length] = this.toObj(n) } else { o[n.nodeName] = [o[n.nodeName], this.toObj(n)] } } else { o[n.nodeName] = this.toObj(n) } } } else { if (!a.attributes.length) { o = this.escape(this.innerXml(a)) } else { o["#text"] = this.escape(this.innerXml(a)) } } } else if (c) { if (!a.attributes.length) { o = this.escape(this.innerXml(a)); if (o === "__EMPTY_ARRAY_") { o = "[]" } else if (o === "__EMPTY_STRING_") { o = "" } } else { o["#text"] = this.escape(this.innerXml(a)) } } else if (cdataChild) { if (cdataChild > 1) { o = this.escape(this.innerXml(a)) } else { for (n = a.firstChild; n; n = n.nextSibling) { if (b.test(a.firstChild.nodeValue)) { o = a.firstChild.nodeValue; break } else { o["#cdata"] = this.escape(n.nodeValue) } } } } } if (!a.attributes.length && !a.firstChild) { o = null } } else if (a.nodeType === 9) { o = this.toObj(a.documentElement) } else { alert("unhandled node type: " + a.nodeType) } return o }, toJson: function (o, a, b, c) { if (c === undefined) c = true; var d = a ? ("\"" + a + "\"") : "", tab = "\t", newline = "\n"; if (!c) { tab = ""; newline = "" } if (o === "[]") { d += (a ? ":[]" : "[]") } else if (o instanceof Array) { var n, i, ar = []; for (i = 0, n = o.length; i < n; i += 1) { ar[i] = this.toJson(o[i], "", b + tab, c) } d += (a ? ":[" : "[") + (ar.length > 1 ? (newline + b + tab + ar.join("," + newline + b + tab) + newline + b) : ar.join("")) + "]" } else if (o === null) { d += (a && ":") + "null" } else if (typeof (o) === "object") { var e = [], m; for (m in o) { if (o.hasOwnProperty(m)) { e[e.length] = this.toJson(o[m], m, b + tab, c) } } d += (a ? ":{" : "{") + (e.length > 1 ? (newline + b + tab + e.join("," + newline + b + tab) + newline + b) : e.join("")) + "}" } else if (typeof (o) === "string") { d += (a && ":") + "\"" + o.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"" } else { d += (a && ":") + o.toString() } return d }, innerXml: function (a) { var s = ""; if ("innerHTML" in a) { s = a.innerHTML } else { var b = function (n) { var s = "", i; if (n.nodeType === 1) { s += "<" + n.nodeName; for (i = 0; i < n.attributes.length; i += 1) { s += " " + n.attributes[i].nodeName + "=\"" + (n.attributes[i].nodeValue || "").toString() + "\"" } if (n.firstChild) { s += ">"; for (var c = n.firstChild; c; c = c.nextSibling) { s += b(c) } s += "</" + n.nodeName + ">" } else { s += "/>" } } else if (n.nodeType === 3) { s += n.nodeValue } else if (n.nodeType === 4) { s += "<![CDATA[" + n.nodeValue + "]]>" } return s }; for (var c = a.firstChild; c; c = c.nextSibling) { s += b(c) } } return s }, escape: function (a) { return a.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r') }, removeWhite: function (e) { e.normalize(); var n; for (n = e.firstChild; n; ) { if (n.nodeType === 3) { if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) { var a = n.nextSibling; e.removeChild(n); n = a } else { n = n.nextSibling } } else if (n.nodeType === 1) { this.removeWhite(n); n = n.nextSibling } else { n = n.nextSibling } } return e } }; (function ($) { "use strict"; $.fmatter = {}; $.extend($.fmatter, { isBoolean: function (o) { return typeof o === 'boolean' }, isObject: function (o) { return (o && (typeof o === 'object' || $.isFunction(o))) || false }, isString: function (o) { return typeof o === 'string' }, isNumber: function (o) { return typeof o === 'number' && isFinite(o) }, isValue: function (o) { return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o)) }, isEmpty: function (o) { if (!this.isString(o) && this.isValue(o)) { return false } if (!this.isValue(o)) { return true } o = $.trim(o).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, ''); return o === "" } }); $.fn.fmatter = function (a, b, c, d, e) { var v = b; c = $.extend({}, $.jgrid.formatter, c); try { v = $.fn.fmatter[a].call(this, b, c, d, e) } catch (fe) { } return v }; $.fmatter.util = { NumberFormat: function (a, b) { if (!$.fmatter.isNumber(a)) { a *= 1 } if ($.fmatter.isNumber(a)) { var c = (a < 0); var d = String(a); var e = b.decimalSeparator || "."; var f; if ($.fmatter.isNumber(b.decimalPlaces)) { var g = b.decimalPlaces; var h = Math.pow(10, g); d = String(Math.round(a * h) / h); f = d.lastIndexOf("."); if (g > 0) { if (f < 0) { d += e; f = d.length - 1 } else if (e !== ".") { d = d.replace(".", e) } while ((d.length - 1 - f) < g) { d += "0" } } } if (b.thousandsSeparator) { var j = b.thousandsSeparator; f = d.lastIndexOf(e); f = (f > -1) ? f : d.length; var k = d.substring(f); var l = -1, i; for (i = f; i > 0; i--) { l++; if ((l % 3 === 0) && (i !== f) && (!c || (i > 1))) { k = j + k } k = d.charAt(i - 1) + k } d = k } d = (b.prefix) ? b.prefix + d : d; d = (b.suffix) ? d + b.suffix : d; return d } return a } }; $.fn.fmatter.defaultFormat = function (a, b) { return ($.fmatter.isValue(a) && a !== "") ? a : b.defaultValue || "&#160;" }; $.fn.fmatter.email = function (a, b) { if (!$.fmatter.isEmpty(a)) { return "<a href=\"mailto:" + a + "\">" + a + "</a>" } return $.fn.fmatter.defaultFormat(a, b) }; $.fn.fmatter.checkbox = function (a, b) { var c = $.extend({}, b.checkbox), ds; if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if (c.disabled === true) { ds = "disabled=\"disabled\"" } else { ds = "" } if ($.fmatter.isEmpty(a) || a === undefined) { a = $.fn.fmatter.defaultFormat(a, c) } a = String(a); a = (a + "").toLowerCase(); var d = a.search(/(false|f|0|no|n|off|undefined)/i) < 0 ? " checked='checked' " : ""; return "<input type=\"checkbox\" " + d + " value=\"" + a + "\" offval=\"no\" " + ds + "/>" }; $.fn.fmatter.link = function (a, b) { var c = { target: b.target }; var d = ""; if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if (c.target) { d = 'target=' + c.target } if (!$.fmatter.isEmpty(a)) { return "<a " + d + " href=\"" + a + "\">" + a + "</a>" } return $.fn.fmatter.defaultFormat(a, b) }; $.fn.fmatter.showlink = function (a, b) { var c = { baseLinkUrl: b.baseLinkUrl, showAction: b.showAction, addParam: b.addParam || "", target: b.target, idName: b.idName }, target = "", idUrl; if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if (c.target) { target = 'target=' + c.target } idUrl = c.baseLinkUrl + c.showAction + '?' + c.idName + '=' + b.rowId + c.addParam; if ($.fmatter.isString(a) || $.fmatter.isNumber(a)) { return "<a " + target + " href=\"" + idUrl + "\">" + a + "</a>" } return $.fn.fmatter.defaultFormat(a, b) }; $.fn.fmatter.integer = function (a, b) { var c = $.extend({}, b.integer); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if ($.fmatter.isEmpty(a) || (parseFloat(a) === 0) || isNaN(a)) { return c.defaultValue } return $.fmatter.util.NumberFormat(a, c) }; $.fn.fmatter.number = function (a, b) { var c = $.extend({}, b.number); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if ($.fmatter.isEmpty(a) || (parseFloat(a) === 0) || isNaN(a)) { return c.defaultValue } return $.fmatter.util.NumberFormat(a, c) }; $.fn.fmatter.currency = function (a, b) { var c = $.extend({}, b.currency); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { c = $.extend({}, c, b.colModel.formatoptions) } if ($.fmatter.isEmpty(a) || (parseFloat(a) === 0) || isNaN(a)) { return c.defaultValue } return $.fmatter.util.NumberFormat(a, c) }; $.fn.fmatter.date = function (a, b, c, d) { var e = $.extend({}, b.date); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) { e = $.extend({}, e, b.colModel.formatoptions) } if (!e.reformatAfterEdit && d === 'edit') { return $.fn.fmatter.defaultFormat(a, b) } if (!$.fmatter.isEmpty(a)) { return $.jgrid.parseDate(e.srcformat, a, e.newformat, e) } return $.fn.fmatter.defaultFormat(a, b) }; $.fn.fmatter.select = function (a, b) { a = String(a); var c = false, ret = [], sep, delim; if (b.colModel.formatoptions !== undefined) { c = b.colModel.formatoptions.value; sep = b.colModel.formatoptions.separator === undefined ? ":" : b.colModel.formatoptions.separator; delim = b.colModel.formatoptions.delimiter === undefined ? ";" : b.colModel.formatoptions.delimiter } else if (b.colModel.editoptions !== undefined) { c = b.colModel.editoptions.value; sep = b.colModel.editoptions.separator === undefined ? ":" : b.colModel.editoptions.separator; delim = b.colModel.editoptions.delimiter === undefined ? ";" : b.colModel.editoptions.delimiter } if (c) { var d = b.colModel.editoptions.multiple === true ? true : false, scell = [], sv; if (d) { scell = a.split(","); scell = $.map(scell, function (n) { return $.trim(n) }) } if ($.fmatter.isString(c)) { var e = c.split(delim), j = 0, i; for (i = 0; i < e.length; i++) { sv = e[i].split(sep); if (sv.length > 2) { sv[1] = $.map(sv, function (n, i) { if (i > 0) { return n } }).join(sep) } if (d) { if ($.inArray(sv[0], scell) > -1) { ret[j] = sv[1]; j++ } } else if ($.trim(sv[0]) === $.trim(a)) { ret[0] = sv[1]; break } } } else if ($.fmatter.isObject(c)) { if (d) { ret = $.map(scell, function (n) { return c[n] }) } else { ret[0] = c[a] || "" } } } a = ret.join(", "); return a === "" ? $.fn.fmatter.defaultFormat(a, b) : a }; $.fn.fmatter.rowactions = function (c) { var d = $(this).closest("tr.jqgrow"), rid = d.attr("id"), $id = $(this).closest("table.ui-jqgrid-btable").attr('id').replace(/_frozen([^_]*)$/, '$1'), $grid = $("#" + $id), $t = $grid[0], p = $t.p, cm = p.colModel[$.jgrid.getCellIndex(this)], $actionsDiv = cm.frozen ? $("tr#" + rid + " td:eq(" + $.jgrid.getCellIndex(this) + ") > div", $grid) : $(this).parent(), op = { extraparam: {} }, saverow = function (a, b) { if ($.isFunction(op.afterSave)) { op.afterSave.call($t, a, b) } $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show(); $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide() }, restorerow = function (a) { if ($.isFunction(op.afterRestore)) { op.afterRestore.call($t, a) } $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show(); $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide() }; if (cm.formatoptions !== undefined) { op = $.extend(op, cm.formatoptions) } if (p.editOptions !== undefined) { op.editOptions = p.editOptions } if (p.delOptions !== undefined) { op.delOptions = p.delOptions } if (d.hasClass("jqgrid-new-row")) { op.extraparam[p.prmNames.oper] = p.prmNames.addoper } var e = { keys: op.keys, oneditfunc: op.onEdit, successfunc: op.onSuccess, url: op.url, extraparam: op.extraparam, aftersavefunc: saverow, errorfunc: op.onError, afterrestorefunc: restorerow, restoreAfterError: op.restoreAfterError, mtype: op.mtype }; switch (c) { case 'edit': $grid.jqGrid('editRow', rid, e); $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").hide(); $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").show(); $grid.triggerHandler("jqGridAfterGridComplete"); break; case 'save': if ($grid.jqGrid('saveRow', rid, e)) { $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show(); $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide(); $grid.triggerHandler("jqGridAfterGridComplete") } break; case 'cancel': $grid.jqGrid('restoreRow', rid, restorerow); $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show(); $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide(); $grid.triggerHandler("jqGridAfterGridComplete"); break; case 'del': $grid.jqGrid('delGridRow', rid, op.delOptions); break; case 'formedit': $grid.jqGrid('setSelection', rid); $grid.jqGrid('editGridRow', rid, op.editOptions); break } }; $.fn.fmatter.actions = function (a, b) { var c = { keys: false, editbutton: true, delbutton: true, editformbutton: false }, rowid = b.rowId, str = "", ocl; if (b.colModel.formatoptions !== undefined) { c = $.extend(c, b.colModel.formatoptions) } if (rowid === undefined || $.fmatter.isEmpty(rowid)) { return "" } if (c.editformbutton) { ocl = "id='jEditButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; str += "<div title='" + $.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ocl + "><span class='ui-icon ui-icon-pencil'></span></div>" } else if (c.editbutton) { ocl = "id='jEditButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') "; str += "<div title='" + $.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ocl + "><span class='ui-icon ui-icon-pencil'></span></div>" } if (c.delbutton) { ocl = "id='jDeleteButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; str += "<div title='" + $.jgrid.nav.deltitle + "' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' " + ocl + "><span class='ui-icon ui-icon-trash'></span></div>" } ocl = "id='jSaveButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; str += "<div title='" + $.jgrid.edit.bSubmit + "' style='float:left;display:none' class='ui-pg-div ui-inline-save' " + ocl + "><span class='ui-icon ui-icon-disk'></span></div>"; ocl = "id='jCancelButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; str += "<div title='" + $.jgrid.edit.bCancel + "' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' " + ocl + "><span class='ui-icon ui-icon-cancel'></span></div>"; return "<div style='margin-left:8px;'>" + str + "</div>" }; $.unformat = function (a, b, c, d) { var e, formatType = b.colModel.formatter, op = b.colModel.formatoptions || {}, sep, re = /([\.\*\_\'\(\)\{\}\+\?\\])/g, unformatFunc = b.colModel.unformat || ($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat); if (unformatFunc !== undefined && $.isFunction(unformatFunc)) { e = unformatFunc.call(this, $(a).text(), b, a) } else if (formatType !== undefined && $.fmatter.isString(formatType)) { var f = $.jgrid.formatter || {}, stripTag; switch (formatType) { case 'integer': op = $.extend({}, f.integer, op); sep = op.thousandsSeparator.replace(re, "\\$1"); stripTag = new RegExp(sep, "g"); if ($(a).text() == '-') { e = '' } else { e = $(a).text().replace(stripTag, '') } break; case 'number': op = $.extend({}, f.number, op); sep = op.thousandsSeparator.replace(re, "\\$1"); stripTag = new RegExp(sep, "g"); if ($(a).text() == '-') { e = '' } else { e = $(a).text().replace(stripTag, "").replace(op.decimalSeparator, '.') } break; case 'currency': op = $.extend({}, f.currency, op); sep = op.thousandsSeparator.replace(re, "\\$1"); stripTag = new RegExp(sep, "g"); e = $(a).text(); if ($(a).text() == '-') { e = '' } else { if (op.prefix && op.prefix.length) { e = e.substr(op.prefix.length) } if (op.suffix && op.suffix.length) { e = e.substr(0, e.length - op.suffix.length) } e = e.replace(stripTag, '').replace(op.decimalSeparator, '.') } break; case 'checkbox': var g = (b.colModel.editoptions) ? b.colModel.editoptions.value.split(":") : ["Yes", "No"]; e = $('input', a).is(":checked") ? g[0] : g[1]; break; case 'select': e = $.unformat.select(a, b, c, d); break; case 'actions': return ""; default: e = $.trim($(a).text()) } } return e !== undefined ? e : d === true ? $(a).text() : $.jgrid.htmlDecode($(a).html()) }; $.unformat.select = function (c, d, e, f) { var g = []; var h = $(c).text(); if (f === true) { return h } var k = $.extend({}, d.colModel.formatoptions !== undefined ? d.colModel.formatoptions : d.colModel.editoptions), sep = k.separator === undefined ? ":" : k.separator, delim = k.delimiter === undefined ? ";" : k.delimiter; if (k.value) { var l = k.value, msl = k.multiple === true ? true : false, scell = [], sv; if (msl) { scell = h.split(","); scell = $.map(scell, function (n) { return $.trim(n) }) } if ($.fmatter.isString(l)) { var m = l.split(delim), j = 0, i; for (i = 0; i < m.length; i++) { sv = m[i].split(sep); if (sv.length > 2) { sv[1] = $.map(sv, function (n, i) { if (i > 0) { return n } }).join(sep) } if (msl) { if ($.inArray(sv[1], scell) > -1) { g[j] = sv[0]; j++ } } else if ($.trim(sv[1]) === $.trim(h)) { g[0] = sv[0]; break } } } else if ($.fmatter.isObject(l) || $.isArray(l)) { if (!msl) { scell[0] = h } g = $.map(scell, function (n) { var b; $.each(l, function (i, a) { if (a === n) { b = i; return false } }); if (b !== undefined) { return b } }) } return g.join(", ") } return h || "" }; $.unformat.date = function (a, b) { var c = $.jgrid.formatter.date || {}; if (b.formatoptions !== undefined) { c = $.extend({}, c, b.formatoptions) } if (!$.fmatter.isEmpty(a)) { return $.jgrid.parseDate(c.newformat, a, c.srcformat, c) } return $.fn.fmatter.defaultFormat(a, b) } })(jQuery); (function ($) { "use strict"; $.extend($.jgrid, { showModal: function (h) { h.w.show() }, closeModal: function (h) { h.w.hide().attr("aria-hidden", "true"); if (h.o) { h.o.remove() } }, hideModal: function (a, o) { o = $.extend({ jqm: true, gb: '' }, o || {}); if (o.onClose) { var b = o.gb && typeof o.gb === "string" && o.gb.substr(0, 6) === "#gbox_" ? o.onClose.call($("#" + o.gb.substr(6))[0], a) : o.onClose(a); if (typeof b === 'boolean' && !b) { return } } if ($.fn.jqm && o.jqm === true) { $(a).attr("aria-hidden", "true").jqmHide() } else { if (o.gb !== '') { try { $(".jqgrid-overlay:first", o.gb).hide() } catch (e) { } } $(a).hide().attr("aria-hidden", "true") } }, findPos: function (a) { var b = 0, curtop = 0; if (a.offsetParent) { do { b += a.offsetLeft; curtop += a.offsetTop } while (a = a.offsetParent) } return [b, curtop] }, createModal: function (c, d, p, f, g, h, i) { p = $.extend(true, {}, $.jgrid.jqModal || {}, p); var j = document.createElement('div'), rtlsup, self = this; i = $.extend({}, i || {}); rtlsup = $(p.gbox).attr("dir") === "rtl" ? true : false; j.className = "ui-widget ui-widget-content ui-corner-all ui-jqdialog"; j.id = c.themodal; var k = document.createElement('div'); k.className = "ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix"; k.id = c.modalhead; $(k).append("<span class='ui-jqdialog-title'>" + p.caption + "</span>"); var l = $("<a class='ui-jqdialog-titlebar-close ui-corner-all'></a>").hover(function () { l.addClass('ui-state-hover') }, function () { l.removeClass('ui-state-hover') }).append("<span class='ui-icon ui-icon-closethick'></span>"); $(k).append(l); if (rtlsup) { j.dir = "rtl"; $(".ui-jqdialog-title", k).css("float", "right"); $(".ui-jqdialog-titlebar-close", k).css("left", 0.3 + "em") } else { j.dir = "ltr"; $(".ui-jqdialog-title", k).css("float", "left"); $(".ui-jqdialog-titlebar-close", k).css("right", 0.3 + "em") } var m = document.createElement('div'); $(m).addClass("ui-jqdialog-content ui-widget-content").attr("id", c.modalcontent); $(m).append(d); j.appendChild(m); $(j).prepend(k); if (h === true) { $('body').append(j) } else if (typeof h === "string") { $(h).append(j) } else { $(j).insertBefore(f) } $(j).css(i); if (p.jqModal === undefined) { p.jqModal = true } var n = {}; if ($.fn.jqm && p.jqModal === true) { if (p.left === 0 && p.top === 0 && p.overlay) { var o = []; o = $.jgrid.findPos(g); p.left = o[0] + 4; p.top = o[1] + 4 } n.top = p.top + "px"; n.left = p.left } else if (p.left !== 0 || p.top !== 0) { n.left = p.left; n.top = p.top + "px" } $("a.ui-jqdialog-titlebar-close", k).click(function () { var a = $("#" + $.jgrid.jqID(c.themodal)).data("onClose") || p.onClose; var b = $("#" + $.jgrid.jqID(c.themodal)).data("gbox") || p.gbox; self.hideModal("#" + $.jgrid.jqID(c.themodal), { gb: b, jqm: p.jqModal, onClose: a }); return false }); if (p.width === 0 || !p.width) { p.width = 300 } if (p.height === 0 || !p.height) { p.height = 200 } if (!p.zIndex) { var q = $(f).parents("*[role=dialog]").filter(':first').css("z-index"); if (q) { p.zIndex = parseInt(q, 10) + 2 } else { p.zIndex = 950 } } var s = 0; if (rtlsup && n.left && !h) { s = $(p.gbox).width() - (!isNaN(p.width) ? parseInt(p.width, 10) : 0) - 8; n.left = parseInt(n.left, 10) + parseInt(s, 10) } if (n.left) { n.left += "px" } $(j).css($.extend({ width: isNaN(p.width) ? "auto" : p.width + "px", height: isNaN(p.height) ? "auto" : p.height + "px", zIndex: p.zIndex, overflow: 'hidden' }, n)).attr({ tabIndex: "-1", "role": "dialog", "aria-labelledby": c.modalhead, "aria-hidden": "true" }); if (p.drag === undefined) { p.drag = true } if (p.resize === undefined) { p.resize = true } if (p.drag) { $(k).css('cursor', 'move'); if ($.fn.jqDrag) { $(j).jqDrag(k) } else { try { $(j).draggable({ handle: $("#" + $.jgrid.jqID(k.id)) }) } catch (e) { } } } if (p.resize) { if ($.fn.jqResize) { $(j).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se'></div>"); $("#" + $.jgrid.jqID(c.themodal)).jqResize(".jqResize", c.scrollelm ? "#" + $.jgrid.jqID(c.scrollelm) : false) } else { try { $(j).resizable({ handles: 'se, sw', alsoResize: c.scrollelm ? "#" + $.jgrid.jqID(c.scrollelm) : false }) } catch (r) { } } } if (p.closeOnEscape === true) { $(j).keydown(function (e) { if (e.which == 27) { var a = $("#" + $.jgrid.jqID(c.themodal)).data("onClose") || p.onClose; self.hideModal("#" + $.jgrid.jqID(c.themodal), { gb: p.gbox, jqm: p.jqModal, onClose: a }) } }) } }, viewModal: function (a, o) { o = $.extend({ toTop: true, overlay: 10, modal: false, overlayClass: 'ui-widget-overlay', onShow: $.jgrid.showModal, onHide: $.jgrid.closeModal, gbox: '', jqm: true, jqM: true }, o || {}); if ($.fn.jqm && o.jqm === true) { if (o.jqM) { $(a).attr("aria-hidden", "false").jqm(o).jqmShow() } else { $(a).attr("aria-hidden", "false").jqmShow() } } else { if (o.gbox !== '') { $(".jqgrid-overlay:first", o.gbox).show(); $(a).data("gbox", o.gbox) } $(a).show().attr("aria-hidden", "false"); try { $(':input:visible', a)[0].focus() } catch (_) { } } }, info_dialog: function (a, b, c, d) { var f = { width: 290, height: 'auto', dataheight: 'auto', drag: true, resize: false, left: 250, top: 170, zIndex: 1000, jqModal: true, modal: false, closeOnEscape: true, align: 'center', buttonalign: 'center', buttons: [] }; $.extend(true, f, $.jgrid.jqModal || {}, { caption: "<b>" + a + "</b>" }, d || {}); var g = f.jqModal, self = this; if ($.fn.jqm && !g) { g = false } var j = "", i; if (f.buttons.length > 0) { for (i = 0; i < f.buttons.length; i++) { if (f.buttons[i].id === undefined) { f.buttons[i].id = "info_button_" + i } j += "<a id='" + f.buttons[i].id + "' class='fm-button ui-state-default ui-corner-all'>" + f.buttons[i].text + "</a>" } } var k = isNaN(f.dataheight) ? f.dataheight : f.dataheight + "px", cn = "text-align:" + f.align + ";"; var l = "<div id='info_id'>"; l += "<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:" + k + ";" + cn + "'>" + b + "</div>"; l += c ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + f.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a id='closedialog' class='fm-button ui-state-default ui-corner-all'>" + c + "</a>" + j + "</div>" : j !== "" ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + f.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>" + j + "</div>" : ""; l += "</div>"; try { if ($("#info_dialog").attr("aria-hidden") === "false") { $.jgrid.hideModal("#info_dialog", { jqm: g }) } $("#info_dialog").remove() } catch (e) { } $.jgrid.createModal({ themodal: 'info_dialog', modalhead: 'info_head', modalcontent: 'info_content', scrollelm: 'infocnt' }, l, f, '', '', true); if (j) { $.each(f.buttons, function (i) { $("#" + $.jgrid.jqID(this.id), "#info_id").bind('click', function () { f.buttons[i].onClick.call($("#info_dialog")); return false }) }) } $("#closedialog", "#info_id").click(function () { self.hideModal("#info_dialog", { jqm: g, onClose: $("#info_dialog").data("onClose") || f.onClose, gb: $("#info_dialog").data("gbox") || f.gbox }); return false }); $(".fm-button", "#info_dialog").hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }); if ($.isFunction(f.beforeOpen)) { f.beforeOpen() } $.jgrid.viewModal("#info_dialog", { onHide: function (h) { h.w.hide().remove(); if (h.o) { h.o.remove() } }, modal: f.modal, jqm: g }); if ($.isFunction(f.afterOpen)) { f.afterOpen() } try { $("#info_dialog").focus() } catch (m) { } }, bindEv: function (a, b) { var c = this; if ($.isFunction(b.dataInit)) { b.dataInit.call(c, a, b) } if (b.dataEvents) { $.each(b.dataEvents, function () { if (this.data !== undefined) { $(a).bind(this.type, this.data, this.fn) } else { $(a).bind(this.type, this.fn) } }) } }, createEl: function (g, h, j, k, l) { var m = "", $t = this; function setAttributes(c, d, e) { var f = ['dataInit', 'dataEvents', 'dataUrl', 'buildSelect', 'sopt', 'searchhidden', 'defaultValue', 'attr', 'custom_element', 'custom_value']; if (e !== undefined && $.isArray(e)) { $.merge(f, e) } $.each(d, function (a, b) { if ($.inArray(a, f) === -1) { $(c).attr(a, b) } }); if (!d.hasOwnProperty('id')) { $(c).attr('id', $.jgrid.randId()) } } switch (g) { case "textarea": m = document.createElement("textarea"); if (k) { if (!h.cols) { $(m).css({ width: "98%" }) } } else if (!h.cols) { h.cols = 20 } if (!h.rows) { h.rows = 2 } if (j === '&nbsp;' || j === '&#160;' || (j.length === 1 && j.charCodeAt(0) === 160)) { j = "" } m.value = j; setAttributes(m, h); $(m).attr({ "role": "textbox", "multiline": "true" }); break; case "checkbox": m = document.createElement("input"); m.type = "checkbox"; if (!h.value) { var o = (j + "").toLowerCase(); if (o.search(/(false|f|0|no|n|off|undefined)/i) < 0 && o !== "") { m.checked = true; m.defaultChecked = true; m.value = j } else { m.value = "on" } $(m).attr("offval", "off") } else { var p = h.value.split(":"); if (j === p[0]) { m.checked = true; m.defaultChecked = true } m.value = p[0]; $(m).attr("offval", p[1]) } setAttributes(m, h, ['value']); $(m).attr("role", "checkbox"); break; case "select": m = document.createElement("select"); m.setAttribute("role", "select"); var q, ovm = []; if (h.multiple === true) { q = true; m.multiple = "multiple"; $(m).attr("aria-multiselectable", "true") } else { q = false } if (h.dataUrl !== undefined) { var r = h.name ? String(h.id).substring(0, String(h.id).length - String(h.name).length - 1) : String(h.id), postData = h.postData || l.postData; if ($t.p && $t.p.idPrefix) { r = $.jgrid.stripPref($t.p.idPrefix, r) } $.ajax($.extend({ url: $.isFunction(h.dataUrl) ? h.dataUrl.call($t, r, j, String(h.name)) : h.dataUrl, type: "GET", dataType: "html", data: $.isFunction(postData) ? postData.call($t, r, j, String(h.name)) : postData, context: { elem: m, options: h, vl: j }, success: function (b) { var c = [], m = this.elem, j = this.vl, h = $.extend({}, this.options), q = h.multiple === true, a = $.isFunction(h.buildSelect) ? h.buildSelect.call($t, b) : b; if (typeof a === 'string') { a = $($.trim(a)).html() } if (a) { $(m).append(a); setAttributes(m, h, postData ? ['postData'] : undefined); if (h.size === undefined) { h.size = q ? 3 : 1 } if (q) { c = j.split(","); c = $.map(c, function (n) { return $.trim(n) }) } else { c[0] = $.trim(j) } setTimeout(function () { $("option", m).each(function (i) { if (i === 0 && m.multiple) { this.selected = false } $(this).attr("role", "option"); if ($.inArray($.trim($(this).text()), c) > -1 || $.inArray($.trim($(this).val()), c) > -1) { this.selected = "selected" } }) }, 0) } } }, l || {})) } else if (h.value) { var i; if (h.size === undefined) { h.size = q ? 3 : 1 } if (q) { ovm = j.split(","); ovm = $.map(ovm, function (n) { return $.trim(n) }) } if (typeof h.value === 'function') { h.value = h.value() } var s, sv, ov, sep = h.separator === undefined ? ":" : h.separator, delim = h.delimiter === undefined ? ";" : h.delimiter; if (typeof h.value === 'string') { s = h.value.split(delim); for (i = 0; i < s.length; i++) { sv = s[i].split(sep); if (sv.length > 2) { sv[1] = $.map(sv, function (n, a) { if (a > 0) { return n } }).join(sep) } ov = document.createElement("option"); ov.setAttribute("role", "option"); ov.value = sv[0]; ov.innerHTML = sv[1]; m.appendChild(ov); if (!q && ($.trim(sv[0]) === $.trim(j) || $.trim(sv[1]) === $.trim(j))) { ov.selected = "selected" } if (q && ($.inArray($.trim(sv[1]), ovm) > -1 || $.inArray($.trim(sv[0]), ovm) > -1)) { ov.selected = "selected" } } } else if (typeof h.value === 'object') { var t = h.value, key; for (key in t) { if (t.hasOwnProperty(key)) { ov = document.createElement("option"); ov.setAttribute("role", "option"); ov.value = key; ov.innerHTML = t[key]; m.appendChild(ov); if (!q && ($.trim(key) === $.trim(j) || $.trim(t[key]) === $.trim(j))) { ov.selected = "selected" } if (q && ($.inArray($.trim(t[key]), ovm) > -1 || $.inArray($.trim(key), ovm) > -1)) { ov.selected = "selected" } } } } setAttributes(m, h, ['value']) } break; case "text": case "password": case "button": var u; if (g === "button") { u = "button" } else { u = "textbox" } m = document.createElement("input"); m.type = g; m.value = j; setAttributes(m, h); if (g !== "button") { if (k) { if (!h.size) { $(m).css({ width: "98%" }) } } else if (!h.size) { h.size = 20 } } $(m).attr("role", u); break; case "image": case "file": m = document.createElement("input"); m.type = g; setAttributes(m, h); break; case "custom": m = document.createElement("span"); try { if ($.isFunction(h.custom_element)) { var v = h.custom_element.call($t, j, h); if (v) { v = $(v).addClass("customelement").attr({ id: h.id, name: h.name }); $(m).empty().append(v) } else { throw "e2"; } } else { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose) } if (e === "e2") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, typeof e === "string" ? e : e.message, $.jgrid.edit.bClose) } } break } return m }, checkDate: function (b, c) { var d = function (a) { return (((a % 4 === 0) && (a % 100 !== 0 || (a % 400 === 0))) ? 29 : 28) }, tsp = {}, sep; b = b.toLowerCase(); if (b.indexOf("/") !== -1) { sep = "/" } else if (b.indexOf("-") !== -1) { sep = "-" } else if (b.indexOf(".") !== -1) { sep = "." } else { sep = "/" } b = b.split(sep); c = c.split(sep); if (c.length !== 3) { return false } var j = -1, yln, dln = -1, mln = -1, i; for (i = 0; i < b.length; i++) { var e = isNaN(c[i]) ? 0 : parseInt(c[i], 10); tsp[b[i]] = e; yln = b[i]; if (yln.indexOf("y") !== -1) { j = i } if (yln.indexOf("m") !== -1) { mln = i } if (yln.indexOf("d") !== -1) { dln = i } } if (b[j] === "y" || b[j] === "yyyy") { yln = 4 } else if (b[j] === "yy") { yln = 2 } else { yln = -1 } var f = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], strDate; if (j === -1) { return false } strDate = tsp[b[j]].toString(); if (yln === 2 && strDate.length === 1) { yln = 1 } if (strDate.length !== yln || (tsp[b[j]] === 0 && c[j] !== "00")) { return false } if (mln === -1) { return false } strDate = tsp[b[mln]].toString(); if (strDate.length < 1 || tsp[b[mln]] < 1 || tsp[b[mln]] > 12) { return false } if (dln === -1) { return false } strDate = tsp[b[dln]].toString(); if (strDate.length < 1 || tsp[b[dln]] < 1 || tsp[b[dln]] > 31 || (tsp[b[mln]] === 2 && tsp[b[dln]] > d(tsp[b[j]])) || tsp[b[dln]] > f[tsp[b[mln]]]) { return false } return true }, isEmpty: function (a) { if (a.match(/^\s+$/) || a === "") { return true } return false }, checkTime: function (a) { var b = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/, regs; if (!$.jgrid.isEmpty(a)) { regs = a.match(b); if (regs) { if (regs[3]) { if (regs[1] < 1 || regs[1] > 12) { return false } } else { if (regs[1] > 23) { return false } } if (regs[2] > 59) { return false } } else { return false } } return true }, checkValues: function (a, b, c, d) { var e, i, nm, dft, len, g = this, cm = g.p.colModel; if (c === undefined) { if (typeof b === 'string') { for (i = 0, len = cm.length; i < len; i++) { if (cm[i].name === b) { e = cm[i].editrules; b = i; if (cm[i].formoptions != null) { nm = cm[i].formoptions.label } break } } } else if (b >= 0) { e = cm[b].editrules } } else { e = c; nm = d === undefined ? "_" : d } if (e) { if (!nm) { nm = g.p.colNames != null ? g.p.colNames[b] : cm[b].label } if (e.required === true) { if ($.jgrid.isEmpty(a)) { return [false, nm + ": " + $.jgrid.edit.msg.required, ""] } } var f = e.required === false ? false : true; if (e.number === true) { if (!(f === false && $.jgrid.isEmpty(a))) { if (isNaN(a)) { return [false, nm + ": " + $.jgrid.edit.msg.number, ""] } } } if (e.minValue !== undefined && !isNaN(e.minValue)) { if (parseFloat(a) < parseFloat(e.minValue)) { return [false, nm + ": " + $.jgrid.edit.msg.minValue + " " + e.minValue, ""] } } if (e.maxValue !== undefined && !isNaN(e.maxValue)) { if (parseFloat(a) > parseFloat(e.maxValue)) { return [false, nm + ": " + $.jgrid.edit.msg.maxValue + " " + e.maxValue, ""] } } var h; if (e.email === true) { if (!(f === false && $.jgrid.isEmpty(a))) { h = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i; if (!h.test(a)) { return [false, nm + ": " + $.jgrid.edit.msg.email, ""] } } } if (e.integer === true) { if (!(f === false && $.jgrid.isEmpty(a))) { if (isNaN(a)) { return [false, nm + ": " + $.jgrid.edit.msg.integer, ""] } if ((a % 1 !== 0) || (a.indexOf('.') !== -1)) { return [false, nm + ": " + $.jgrid.edit.msg.integer, ""] } } } if (e.date === true) { if (!(f === false && $.jgrid.isEmpty(a))) { if (cm[b].formatoptions && cm[b].formatoptions.newformat) { dft = cm[b].formatoptions.newformat; if ($.jgrid.formatter.date.masks.hasOwnProperty(dft)) { dft = $.jgrid.formatter.date.masks[dft] } } else { dft = cm[b].datefmt || "Y-m-d" } if (!$.jgrid.checkDate(dft, a)) { return [false, nm + ": " + $.jgrid.edit.msg.date + " - " + dft, ""] } } } if (e.time === true) { if (!(f === false && $.jgrid.isEmpty(a))) { if (!$.jgrid.checkTime(a)) { return [false, nm + ": " + $.jgrid.edit.msg.date + " - hh:mm (am/pm)", ""] } } } if (e.url === true) { if (!(f === false && $.jgrid.isEmpty(a))) { h = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i; if (!h.test(a)) { return [false, nm + ": " + $.jgrid.edit.msg.url, ""] } } } if (e.custom === true) { if (!(f === false && $.jgrid.isEmpty(a))) { if ($.isFunction(e.custom_func)) { var j = e.custom_func.call(g, a, nm, b); return $.isArray(j) ? j : [false, $.jgrid.edit.msg.customarray, ""] } return [false, $.jgrid.edit.msg.customfcheck, ""] } } } return [true, "", ""] } }) })(jQuery); (function ($) { "use strict"; $.fn.jqFilter = function (w) { if (typeof w === 'string') { var x = $.fn.jqFilter[w]; if (!x) { throw ("jqFilter - No such method: " + w); } var y = $.makeArray(arguments).slice(1); return x.apply(this, y) } var p = $.extend(true, { filter: null, columns: [], onChange: null, afterRedraw: null, checkValues: null, error: false, errmsg: "", errorcheck: true, showQuery: true, sopt: null, ops: [], operands: null, numopts: ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'], stropts: ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'in', 'ni'], strarr: ['text', 'string', 'blob'], groupOps: [{ op: "AND", text: "AND" }, { op: "OR", text: "OR"}], groupButton: true, ruleButtons: true, direction: "ltr" }, $.jgrid.filter, w || {}); return this.each(function () { if (this.filter) { return } this.p = p; if (this.p.filter === null || this.p.filter === undefined) { this.p.filter = { groupOp: this.p.groupOps[0].op, rules: [], groups: []} } var i, len = this.p.columns.length, cl, isIE = /msie/i.test(navigator.userAgent) && !window.opera; this.p.initFilter = $.extend(true, {}, this.p.filter); if (!len) { return } for (i = 0; i < len; i++) { cl = this.p.columns[i]; if (cl.stype) { cl.inputtype = cl.stype } else if (!cl.inputtype) { cl.inputtype = 'text' } if (cl.sorttype) { cl.searchtype = cl.sorttype } else if (!cl.searchtype) { cl.searchtype = 'string' } if (cl.hidden === undefined) { cl.hidden = false } if (!cl.label) { cl.label = cl.name } if (cl.index) { cl.name = cl.index } if (!cl.hasOwnProperty('searchoptions')) { cl.searchoptions = {} } if (!cl.hasOwnProperty('searchrules')) { cl.searchrules = {} } } if (this.p.showQuery) { $(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='" + this.p.direction + "'><tbody><tr><td class='query'></td></tr></tbody></table>") } var u = function () { return $("#" + $.jgrid.jqID(p.id))[0] || null }; var v = function (a, b) { var c = [true, ""], $t = u(); if ($.isFunction(b.searchrules)) { c = b.searchrules.call($t, a, b) } else if ($.jgrid && $.jgrid.checkValues) { try { c = $.jgrid.checkValues.call($t, a, -1, b.searchrules, b.label) } catch (e) { } } if (c && c.length && c[0] === false) { p.error = !c[0]; p.errmsg = c[1] } }; this.onchange = function () { this.p.error = false; this.p.errmsg = ""; return $.isFunction(this.p.onChange) ? this.p.onChange.call(this, this.p) : false }; this.reDraw = function () { $("table.group:first", this).remove(); var t = this.createTableForGroup(p.filter, null); $(this).append(t); if ($.isFunction(this.p.afterRedraw)) { this.p.afterRedraw.call(this, this.p) } }; this.createTableForGroup = function (c, d) { var e = this, i; var f = $("<table class='group ui-widget ui-widget-content' style='border:0px none;'><tbody></tbody></table>"), align = "left"; if (this.p.direction === "rtl") { align = "right"; f.attr("dir", "rtl") } if (d === null) { f.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='" + align + "'></th></tr>") } var g = $("<tr></tr>"); f.append(g); var h = $("<th colspan='5' align='" + align + "'></th>"); g.append(h); if (this.p.ruleButtons === true) { var j = $("<select class='opsel'></select>"); h.append(j); var k = "", selected; for (i = 0; i < p.groupOps.length; i++) { selected = c.groupOp === e.p.groupOps[i].op ? " selected='selected'" : ""; k += "<option value='" + e.p.groupOps[i].op + "'" + selected + ">" + e.p.groupOps[i].text + "</option>" } j.append(k).bind('change', function () { c.groupOp = $(j).val(); e.onchange() }) } var l = "<span></span>"; if (this.p.groupButton) { l = $("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>"); l.bind('click', function () { if (c.groups === undefined) { c.groups = [] } c.groups.push({ groupOp: p.groupOps[0].op, rules: [], groups: [] }); e.reDraw(); e.onchange(); return false }) } h.append(l); if (this.p.ruleButtons === true) { var m = $("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"), cm; m.bind('click', function () { if (c.rules === undefined) { c.rules = [] } for (i = 0; i < e.p.columns.length; i++) { var a = (e.p.columns[i].search === undefined) ? true : e.p.columns[i].search, hidden = (e.p.columns[i].hidden === true), ignoreHiding = (e.p.columns[i].searchoptions.searchhidden === true); if ((ignoreHiding && a) || (a && !hidden)) { cm = e.p.columns[i]; break } } var b; if (cm.searchoptions.sopt) { b = cm.searchoptions.sopt } else if (e.p.sopt) { b = e.p.sopt } else if ($.inArray(cm.searchtype, e.p.strarr) !== -1) { b = e.p.stropts } else { b = e.p.numopts } c.rules.push({ field: cm.name, op: b[0], data: "" }); e.reDraw(); return false }); h.append(m) } if (d !== null) { var n = $("<input type='button' value='-' title='Delete group' class='delete-group'/>"); h.append(n); n.bind('click', function () { for (i = 0; i < d.groups.length; i++) { if (d.groups[i] === c) { d.groups.splice(i, 1); break } } e.reDraw(); e.onchange(); return false }) } if (c.groups !== undefined) { for (i = 0; i < c.groups.length; i++) { var o = $("<tr></tr>"); f.append(o); var q = $("<td class='first'></td>"); o.append(q); var r = $("<td colspan='4'></td>"); r.append(this.createTableForGroup(c.groups[i], c)); o.append(r) } } if (c.groupOp === undefined) { c.groupOp = e.p.groupOps[0].op } if (c.rules !== undefined) { for (i = 0; i < c.rules.length; i++) { f.append(this.createTableRowForRule(c.rules[i], c)) } } return f }; this.createTableRowForRule = function (d, f) { var g = this, $t = u(), tr = $("<tr></tr>"), i, op, trpar, cm, str = "", selected; tr.append("<td class='first'></td>"); var h = $("<td class='columns'></td>"); tr.append(h); var k = $("<select></select>"), ina, aoprs = []; h.append(k); k.bind('change', function () { d.field = $(k).val(); trpar = $(this).parents("tr:first"); for (i = 0; i < g.p.columns.length; i++) { if (g.p.columns[i].name === d.field) { cm = g.p.columns[i]; break } } if (!cm) { return } cm.searchoptions.id = $.jgrid.randId(); if (isIE && cm.inputtype === "text") { if (!cm.searchoptions.size) { cm.searchoptions.size = 10 } } var b = $.jgrid.createEl.call($t, cm.inputtype, cm.searchoptions, "", true, g.p.ajaxSelectOptions || {}, true); $(b).addClass("input-elm"); if (cm.searchoptions.sopt) { op = cm.searchoptions.sopt } else if (g.p.sopt) { op = g.p.sopt } else if ($.inArray(cm.searchtype, g.p.strarr) !== -1) { op = g.p.stropts } else { op = g.p.numopts } var s = "", so = 0; aoprs = []; $.each(g.p.ops, function () { aoprs.push(this.oper) }); for (i = 0; i < op.length; i++) { ina = $.inArray(op[i], aoprs); if (ina !== -1) { if (so === 0) { d.op = g.p.ops[ina].oper } s += "<option value='" + g.p.ops[ina].oper + "'>" + g.p.ops[ina].text + "</option>"; so++ } } $(".selectopts", trpar).empty().append(s); $(".selectopts", trpar)[0].selectedIndex = 0; if ($.jgrid.msie && $.jgrid.msiever() < 9) { var c = parseInt($("select.selectopts", trpar)[0].offsetWidth, 10) + 1; $(".selectopts", trpar).width(c); $(".selectopts", trpar).css("width", "auto") } $(".data", trpar).empty().append(b); $.jgrid.bindEv.call($t, b, cm.searchoptions); $(".input-elm", trpar).bind('change', function (e) { var a = e.target; d.data = a.nodeName.toUpperCase() === "SPAN" && cm.searchoptions && $.isFunction(cm.searchoptions.custom_value) ? cm.searchoptions.custom_value.call($t, $(a).children(".customelement:first"), 'get') : a.value; g.onchange() }); setTimeout(function () { d.data = $(b).val(); g.onchange() }, 0) }); var j = 0; for (i = 0; i < g.p.columns.length; i++) { var l = (g.p.columns[i].search === undefined) ? true : g.p.columns[i].search, hidden = (g.p.columns[i].hidden === true), ignoreHiding = (g.p.columns[i].searchoptions.searchhidden === true); if ((ignoreHiding && l) || (l && !hidden)) { selected = ""; if (d.field === g.p.columns[i].name) { selected = " selected='selected'"; j = i } str += "<option value='" + g.p.columns[i].name + "'" + selected + ">" + g.p.columns[i].label + "</option>" } } k.append(str); var m = $("<td class='operators'></td>"); tr.append(m); cm = p.columns[j]; cm.searchoptions.id = $.jgrid.randId(); if (isIE && cm.inputtype === "text") { if (!cm.searchoptions.size) { cm.searchoptions.size = 10 } } var n = $.jgrid.createEl.call($t, cm.inputtype, cm.searchoptions, d.data, true, g.p.ajaxSelectOptions || {}, true); if (d.op === 'nu' || d.op === 'nn') { $(n).attr('readonly', 'true'); $(n).attr('disabled', 'true') } var o = $("<select class='selectopts'></select>"); m.append(o); o.bind('change', function () { d.op = $(o).val(); trpar = $(this).parents("tr:first"); var a = $(".input-elm", trpar)[0]; if (d.op === "nu" || d.op === "nn") { d.data = ""; if (a.tagName.toUpperCase() !== 'SELECT') a.value = ""; a.setAttribute("readonly", "true"); a.setAttribute("disabled", "true") } else { if (a.tagName.toUpperCase() === 'SELECT') d.data = a.value; a.removeAttribute("readonly"); a.removeAttribute("disabled") } g.onchange() }); if (cm.searchoptions.sopt) { op = cm.searchoptions.sopt } else if (g.p.sopt) { op = g.p.sopt } else if ($.inArray(cm.searchtype, g.p.strarr) !== -1) { op = g.p.stropts } else { op = g.p.numopts } str = ""; $.each(g.p.ops, function () { aoprs.push(this.oper) }); for (i = 0; i < op.length; i++) { ina = $.inArray(op[i], aoprs); if (ina !== -1) { selected = d.op === g.p.ops[ina].oper ? " selected='selected'" : ""; str += "<option value='" + g.p.ops[ina].oper + "'" + selected + ">" + g.p.ops[ina].text + "</option>" } } o.append(str); var q = $("<td class='data'></td>"); tr.append(q); q.append(n); $.jgrid.bindEv.call($t, n, cm.searchoptions); $(n).addClass("input-elm").bind('change', function () { d.data = cm.inputtype === 'custom' ? cm.searchoptions.custom_value.call($t, $(this).children(".customelement:first"), 'get') : $(this).val(); g.onchange() }); var r = $("<td></td>"); tr.append(r); if (this.p.ruleButtons === true) { var t = $("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>"); r.append(t); t.bind('click', function () { for (i = 0; i < f.rules.length; i++) { if (f.rules[i] === d) { f.rules.splice(i, 1); break } } g.reDraw(); g.onchange(); return false }) } return tr }; this.getStringForGroup = function (a) { var s = "(", index; if (a.groups !== undefined) { for (index = 0; index < a.groups.length; index++) { if (s.length > 1) { s += " " + a.groupOp + " " } try { s += this.getStringForGroup(a.groups[index]) } catch (eg) { alert(eg) } } } if (a.rules !== undefined) { try { for (index = 0; index < a.rules.length; index++) { if (s.length > 1) { s += " " + a.groupOp + " " } s += this.getStringForRule(a.rules[index]) } } catch (e) { alert(e) } } s += ")"; if (s === "()") { return "" } return s }; this.getStringForRule = function (a) { var b = "", opC = "", i, cm, ret, val, numtypes = ['int', 'integer', 'float', 'number', 'currency']; for (i = 0; i < this.p.ops.length; i++) { if (this.p.ops[i].oper === a.op) { b = this.p.operands.hasOwnProperty(a.op) ? this.p.operands[a.op] : ""; opC = this.p.ops[i].oper; break } } for (i = 0; i < this.p.columns.length; i++) { if (this.p.columns[i].name === a.field) { cm = this.p.columns[i]; break } } if (cm == undefined) { return "" } val = a.data; if (opC === 'bw' || opC === 'bn') { val = val + "%" } if (opC === 'ew' || opC === 'en') { val = "%" + val } if (opC === 'cn' || opC === 'nc') { val = "%" + val + "%" } if (opC === 'in' || opC === 'ni') { val = " (" + val + ")" } if (p.errorcheck) { v(a.data, cm) } if ($.inArray(cm.searchtype, numtypes) !== -1 || opC === 'nn' || opC === 'nu') { ret = a.field + " " + b + " " + val } else { ret = a.field + " " + b + " \"" + val + "\"" } return ret }; this.resetFilter = function () { this.p.filter = $.extend(true, {}, this.p.initFilter); this.reDraw(); this.onchange() }; this.hideError = function () { $("th.ui-state-error", this).html(""); $("tr.error", this).hide() }; this.showError = function () { $("th.ui-state-error", this).html(this.p.errmsg); $("tr.error", this).show() }; this.toUserFriendlyString = function () { return this.getStringForGroup(p.filter) }; this.toString = function () { var b = this; function getStringRule(a) { if (b.p.errorcheck) { var i, cm; for (i = 0; i < b.p.columns.length; i++) { if (b.p.columns[i].name === a.field) { cm = b.p.columns[i]; break } } if (cm) { v(a.data, cm) } } return a.op + "(item." + a.field + ",'" + a.data + "')" } function getStringForGroup(a) { var s = "(", index; if (a.groups !== undefined) { for (index = 0; index < a.groups.length; index++) { if (s.length > 1) { if (a.groupOp === "OR") { s += " || " } else { s += " && " } } s += getStringForGroup(a.groups[index]) } } if (a.rules !== undefined) { for (index = 0; index < a.rules.length; index++) { if (s.length > 1) { if (a.groupOp === "OR") { s += " || " } else { s += " && " } } s += getStringRule(a.rules[index]) } } s += ")"; if (s === "()") { return "" } return s } return getStringForGroup(this.p.filter) }; this.reDraw(); if (this.p.showQuery) { this.onchange() } this.filter = true }) }; $.extend($.fn.jqFilter, { toSQLString: function () { var s = ""; this.each(function () { s = this.toUserFriendlyString() }); return s }, filterData: function () { var s; this.each(function () { s = this.p.filter }); return s }, getParameter: function (a) { if (a !== undefined) { if (this.p.hasOwnProperty(a)) { return this.p[a] } } return this.p }, resetFilter: function () { return this.each(function () { this.resetFilter() }) }, addFilter: function (a) { if (typeof a === "string") { a = $.jgrid.parse(a) } this.each(function () { this.p.filter = a; this.reDraw(); this.onchange() }) } }) })(jQuery); (function ($) { "use strict"; var D = {}; $.jgrid.extend({ searchGrid: function (p) { p = $.extend(true, { recreateFilter: false, drag: true, sField: 'searchField', sValue: 'searchString', sOper: 'searchOper', sFilter: 'filters', loadDefaults: true, beforeShowSearch: null, afterShowSearch: null, onInitializeSearch: null, afterRedraw: null, afterChange: null, closeAfterSearch: false, closeAfterReset: false, closeOnEscape: false, searchOnEnter: false, multipleSearch: false, multipleGroup: false, top: 0, left: 0, jqModal: true, modal: false, resize: true, width: 450, height: 'auto', dataheight: 'auto', showQuery: false, errorcheck: true, sopt: null, stringResult: undefined, onClose: null, onSearch: null, onReset: null, toTop: true, overlay: 30, columns: [], tmplNames: null, tmplFilters: null, tmplLabel: ' Template: ', showOnLoad: false, layer: null, operands: { "eq": "=", "ne": "<>", "lt": "<", "le": "<=", "gt": ">", "ge": ">=", "bw": "LIKE", "bn": "NOT LIKE", "in": "IN", "ni": "NOT IN", "ew": "LIKE", "en": "NOT LIKE", "cn": "LIKE", "nc": "NOT LIKE", "nu": "IS NULL", "nn": "ISNOT NULL"} }, $.jgrid.search, p || {}); return this.each(function () { var b = this; if (!b.grid) { return } var c = "fbox_" + b.p.id, showFrm = true, mustReload = true, IDs = { themodal: 'searchmod' + c, modalhead: 'searchhd' + c, modalcontent: 'searchcnt' + c, scrollelm: c }, defaultFilters = b.p.postData[p.sFilter]; if (typeof defaultFilters === "string") { defaultFilters = $.jgrid.parse(defaultFilters) } if (p.recreateFilter === true) { $("#" + $.jgrid.jqID(IDs.themodal)).remove() } function showFilter(a) { showFrm = $(b).triggerHandler("jqGridFilterBeforeShow", [a]); if (showFrm === undefined) { showFrm = true } if (showFrm && $.isFunction(p.beforeShowSearch)) { showFrm = p.beforeShowSearch.call(b, a) } if (showFrm) { $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), { gbox: "#gbox_" + $.jgrid.jqID(c), jqm: p.jqModal, modal: p.modal, overlay: p.overlay, toTop: p.toTop }); $(b).triggerHandler("jqGridFilterAfterShow", [a]); if ($.isFunction(p.afterShowSearch)) { p.afterShowSearch.call(b, a) } } } if ($("#" + $.jgrid.jqID(IDs.themodal))[0] !== undefined) { showFilter($("#fbox_" + $.jgrid.jqID(+b.p.id))) } else { var d = $("<div><div id='" + c + "' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_" + $.jgrid.jqID(b.p.id)), align = "left", butleft = ""; if (b.p.direction === "rtl") { align = "right"; butleft = " style='text-align:left'"; d.attr("dir", "rtl") } var f = $.extend([], b.p.colModel), bS = "<a id='" + c + "_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>" + p.Find + "</a>", bC = "<a id='" + c + "_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>" + p.Reset + "</a>", bQ = "", tmpl = "", colnm, found = false, bt, cmi = -1; if (p.showQuery) { bQ = "<a id='" + c + "_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>" } if (!p.columns.length) { $.each(f, function (i, n) { if (!n.label) { n.label = b.p.colNames[i] } if (!found) { var a = (n.search === undefined) ? true : n.search, hidden = (n.hidden === true), ignoreHiding = (n.searchoptions && n.searchoptions.searchhidden === true); if ((ignoreHiding && a) || (a && !hidden)) { found = true; colnm = n.index || n.name; cmi = i } } }) } else { f = p.columns; cmi = 0; colnm = f[0].index || f[0].name } if ((!defaultFilters && colnm) || p.multipleSearch === false) { var g = "eq"; if (cmi >= 0 && f[cmi].searchoptions && f[cmi].searchoptions.sopt) { g = f[cmi].searchoptions.sopt[0] } else if (p.sopt && p.sopt.length) { g = p.sopt[0] } defaultFilters = { groupOp: "AND", rules: [{ field: colnm, op: g, data: ""}]} } found = false; if (p.tmplNames && p.tmplNames.length) { found = true; tmpl = p.tmplLabel; tmpl += "<select class='ui-template'>"; tmpl += "<option value='default'>Default</option>"; $.each(p.tmplNames, function (i, n) { tmpl += "<option value='" + i + "'>" + n + "</option>" }); tmpl += "</select>" } bt = "<table class='EditTable' style='border:0px none;margin-top:5px' id='" + c + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:" + align + "'>" + bC + tmpl + "</td><td class='EditButton' " + butleft + ">" + bQ + bS + "</td></tr></tbody></table>"; c = $.jgrid.jqID(c); $("#" + c).jqFilter({ columns: f, filter: p.loadDefaults ? defaultFilters : null, showQuery: p.showQuery, errorcheck: p.errorcheck, sopt: p.sopt, groupButton: p.multipleGroup, ruleButtons: p.multipleSearch, afterRedraw: p.afterRedraw, ops: p.odata, operands: p.operands, ajaxSelectOptions: b.p.ajaxSelectOptions, groupOps: p.groupOps, onChange: function () { if (this.p.showQuery) { $('.query', this).html(this.toUserFriendlyString()) } if ($.isFunction(p.afterChange)) { p.afterChange.call(b, $("#" + c), p) } }, direction: b.p.direction, id: b.p.id }); d.append(bt); if (found && p.tmplFilters && p.tmplFilters.length) { $(".ui-template", d).bind('change', function () { var a = $(this).val(); if (a === "default") { $("#" + c).jqFilter('addFilter', defaultFilters) } else { $("#" + c).jqFilter('addFilter', p.tmplFilters[parseInt(a, 10)]) } return false }) } if (p.multipleGroup === true) { p.multipleSearch = true } $(b).triggerHandler("jqGridFilterInitialize", [$("#" + c)]); if ($.isFunction(p.onInitializeSearch)) { p.onInitializeSearch.call(b, $("#" + c)) } p.gbox = "#gbox_" + c; if (p.layer) { $.jgrid.createModal(IDs, d, p, "#gview_" + $.jgrid.jqID(b.p.id), $("#gbox_" + $.jgrid.jqID(b.p.id))[0], "#" + $.jgrid.jqID(p.layer), { position: "relative" }) } else { $.jgrid.createModal(IDs, d, p, "#gview_" + $.jgrid.jqID(b.p.id), $("#gbox_" + $.jgrid.jqID(b.p.id))[0]) } if (p.searchOnEnter || p.closeOnEscape) { $("#" + $.jgrid.jqID(IDs.themodal)).keydown(function (e) { var a = $(e.target); if (p.searchOnEnter && e.which === 13 && !a.hasClass('add-group') && !a.hasClass('add-rule') && !a.hasClass('delete-group') && !a.hasClass('delete-rule') && (!a.hasClass("fm-button") || !a.is("[id$=_query]"))) { $("#" + c + "_search").click(); return false } if (p.closeOnEscape && e.which === 27) { $("#" + $.jgrid.jqID(IDs.modalhead)).find(".ui-jqdialog-titlebar-close").click(); return false } }) } if (bQ) { $("#" + c + "_query").bind('click', function () { $(".queryresult", d).toggle(); return false }) } if (p.stringResult === undefined) { p.stringResult = p.multipleSearch } $("#" + c + "_search").bind('click', function () { var a = $("#" + c), sdata = {}, res, filters; a.find(".input-elm:focus").change(); filters = a.jqFilter('filterData'); if (p.errorcheck) { a[0].hideError(); if (!p.showQuery) { a.jqFilter('toSQLString') } if (a[0].p.error) { a[0].showError(); return false } } if (p.stringResult) { try { res = xmlJsonClass.toJson(filters, '', '', false) } catch (e) { try { res = JSON.stringify(filters) } catch (e2) { } } if (typeof res === "string") { sdata[p.sFilter] = res; $.each([p.sField, p.sValue, p.sOper], function () { sdata[this] = "" }) } } else { if (p.multipleSearch) { sdata[p.sFilter] = filters; $.each([p.sField, p.sValue, p.sOper], function () { sdata[this] = "" }) } else { sdata[p.sField] = filters.rules[0].field; sdata[p.sValue] = filters.rules[0].data; sdata[p.sOper] = filters.rules[0].op; sdata[p.sFilter] = "" } } b.p.search = true; $.extend(b.p.postData, sdata); mustReload = $(b).triggerHandler("jqGridFilterSearch"); if (mustReload === undefined) { mustReload = true } if (mustReload && $.isFunction(p.onSearch)) { mustReload = p.onSearch.call(b, b.p.filters) } if (mustReload !== false) { $(b).trigger("reloadGrid", [{ page: 1}]) } if (p.closeAfterSearch) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(b.p.id), jqm: p.jqModal, onClose: p.onClose }) } return false }); $("#" + c + "_reset").bind('click', function () { var a = {}, fl = $("#" + c); b.p.search = false; b.p.resetsearch = true; if (p.multipleSearch === false) { a[p.sField] = a[p.sValue] = a[p.sOper] = "" } else { a[p.sFilter] = "" } fl[0].resetFilter(); if (found) { $(".ui-template", d).val("default") } $.extend(b.p.postData, a); mustReload = $(b).triggerHandler("jqGridFilterReset"); if (mustReload === undefined) { mustReload = true } if (mustReload && $.isFunction(p.onReset)) { mustReload = p.onReset.call(b) } if (mustReload !== false) { $(b).trigger("reloadGrid", [{ page: 1}]) } if (p.closeAfterReset) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(b.p.id), jqm: p.jqModal, onClose: p.onClose }) } return false }); showFilter($("#" + c)); $(".fm-button:not(.ui-state-disabled)", d).hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }) } }) }, editGridRow: function (C, p) { p = $.extend(true, { top: 0, left: 0, width: 300, datawidth: 'auto', height: 'auto', dataheight: 'auto', modal: false, overlay: 30, drag: true, resize: true, url: null, mtype: "POST", clearAfterAdd: true, closeAfterEdit: false, reloadAfterSubmit: true, onInitializeForm: null, beforeInitData: null, beforeShowForm: null, afterShowForm: null, beforeSubmit: null, afterSubmit: null, onclickSubmit: null, afterComplete: null, onclickPgButtons: null, afterclickPgButtons: null, editData: {}, recreateForm: false, jqModal: true, closeOnEscape: false, addedrow: "first", topinfo: '', bottominfo: '', saveicon: [], closeicon: [], savekey: [false, 13], navkeys: [false, 38, 40], checkOnSubmit: false, checkOnUpdate: false, _savedData: {}, processing: false, onClose: null, ajaxEditOptions: {}, serializeEditData: null, viewPagerButtons: true, overlayClass: 'ui-widget-overlay' }, $.jgrid.edit, p || {}); D[$(this)[0].p.id] = p; return this.each(function () { var l = this; if (!l.grid || !C) { return } var m = l.p.id, frmgr = "FrmGrid_" + m, frmtborg = "TblGrid_" + m, frmtb = "#" + $.jgrid.jqID(frmtborg), IDs = { themodal: 'editmod' + m, modalhead: 'edithd' + m, modalcontent: 'editcnt' + m, scrollelm: frmgr }, onBeforeShow = $.isFunction(D[l.p.id].beforeShowForm) ? D[l.p.id].beforeShowForm : false, onAfterShow = $.isFunction(D[l.p.id].afterShowForm) ? D[l.p.id].afterShowForm : false, onBeforeInit = $.isFunction(D[l.p.id].beforeInitData) ? D[l.p.id].beforeInitData : false, onInitializeForm = $.isFunction(D[l.p.id].onInitializeForm) ? D[l.p.id].onInitializeForm : false, showFrm = true, maxCols = 1, maxRows = 0, postdata, diff, frmoper; frmgr = $.jgrid.jqID(frmgr); if (C === "new") { C = "_empty"; frmoper = "add"; p.caption = D[l.p.id].addCaption } else { p.caption = D[l.p.id].editCaption; frmoper = "edit" } if (!p.recreateForm) { if ($(l).data("formProp")) { $.extend(D[$(this)[0].p.id], $(l).data("formProp")) } } var o = true; if (p.checkOnUpdate && p.jqModal && !p.modal) { o = false } function getFormData() { $(frmtb + " > tbody > tr > td > .FormElement").each(function () { var b = $(".customelement", this); if (b.length) { var c = b[0], nm = $(c).attr('name'); $.each(l.p.colModel, function () { if (this.name === nm && this.editoptions && $.isFunction(this.editoptions.custom_value)) { try { postdata[nm] = this.editoptions.custom_value.call(l, $("#" + $.jgrid.jqID(nm), frmtb), 'get'); if (postdata[nm] === undefined) { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose) } } return true } }) } else { switch ($(this).get(0).type) { case "checkbox": if ($(this).is(":checked")) { postdata[this.name] = $(this).val() } else { var d = $(this).attr("offval"); postdata[this.name] = d } break; case "select-one": postdata[this.name] = $("option:selected", this).val(); break; case "select-multiple": postdata[this.name] = $(this).val(); if (postdata[this.name]) { postdata[this.name] = postdata[this.name].join(",") } else { postdata[this.name] = "" } var f = []; $("option:selected", this).each(function (i, a) { f[i] = $(a).text() }); break; case "password": case "text": case "textarea": case "button": postdata[this.name] = $(this).val(); break } if (l.p.autoencode) { postdata[this.name] = $.jgrid.htmlEncode(postdata[this.name]) } } }); return true } function createData(c, d, e, f) { var g, hc, trdata, cnt = 0, tmp, dc, elc, retpos = [], ind = false, tdtmpl = "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>", tmpl = "", i; for (i = 1; i <= f; i++) { tmpl += tdtmpl } if (c !== '_empty') { ind = $(d).jqGrid("getInd", c) } $(d.p.colModel).each(function (i) { g = this.name; if (this.editrules && this.editrules.edithidden === true) { hc = false } else { hc = this.hidden === true ? true : false } dc = hc ? "style='display:none'" : ""; if (g !== 'cb' && g !== 'subgrid' && this.editable === true && g !== 'rn') { if (ind === false) { tmp = "" } else { if (g === d.p.ExpandColumn && d.p.treeGrid === true) { tmp = $("td[role='gridcell']:eq(" + i + ")", d.rows[ind]).text() } else { try { tmp = $.unformat.call(d, $("td[role='gridcell']:eq(" + i + ")", d.rows[ind]), { rowId: c, colModel: this }, i) } catch (_) { tmp = (this.edittype && this.edittype === "textarea") ? $("td[role='gridcell']:eq(" + i + ")", d.rows[ind]).text() : $("td[role='gridcell']:eq(" + i + ")", d.rows[ind]).html() } if (!tmp || tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) { tmp = '' } } } var a = $.extend({}, this.editoptions || {}, { id: g, name: g }), frmopt = $.extend({}, { elmprefix: '', elmsuffix: '', rowabove: false, rowcontent: '' }, this.formoptions || {}), rp = parseInt(frmopt.rowpos, 10) || cnt + 1, cp = parseInt((parseInt(frmopt.colpos, 10) || 1) * 2, 10); if (c === "_empty" && a.defaultValue) { tmp = $.isFunction(a.defaultValue) ? a.defaultValue.call(l) : a.defaultValue } if (!this.edittype) { this.edittype = "text" } if (l.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp) } elc = $.jgrid.createEl.call(l, this.edittype, a, tmp, false, $.extend({}, $.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {})); if (D[l.p.id].checkOnSubmit || D[l.p.id].checkOnUpdate) { D[l.p.id]._savedData[g] = tmp } $(elc).addClass("FormElement"); if ($.inArray(this.edittype, ['text', 'textarea', 'password', 'select']) > -1) { $(elc).addClass("ui-widget-content ui-corner-all") } trdata = $(e).find("tr[rowpos=" + rp + "]"); if (frmopt.rowabove) { var b = $("<tr><td class='contentinfo' colspan='" + (f * 2) + "'>" + frmopt.rowcontent + "</td></tr>"); $(e).append(b); b[0].rp = rp } if (trdata.length === 0) { trdata = $("<tr " + dc + " rowpos='" + rp + "'></tr>").addClass("FormData").attr("id", "tr_" + g); $(trdata).append(tmpl); $(e).append(trdata); trdata[0].rp = rp } $("td:eq(" + (cp - 2) + ")", trdata[0]).html(frmopt.label === undefined ? d.p.colNames[i] : frmopt.label); $("td:eq(" + (cp - 1) + ")", trdata[0]).append(frmopt.elmprefix).append(elc).append(frmopt.elmsuffix); if (this.edittype === 'custom' && $.isFunction(a.custom_value)) { a.custom_value.call(l, $("#" + g, "#" + frmgr), 'set', tmp) } $.jgrid.bindEv.call(l, elc, a); retpos[cnt] = i; cnt++ } }); if (cnt > 0) { var h = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (f * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='" + d.p.id + "_id' value='" + c + "'/></td></tr>"); h[0].rp = cnt + 999; $(e).append(h); if (D[l.p.id].checkOnSubmit || D[l.p.id].checkOnUpdate) { D[l.p.id]._savedData[d.p.id + "_id"] = c } } return retpos } function fillData(c, d, f) { var g, cnt = 0, tmp, fld, opt, vl, vlc; if (D[l.p.id].checkOnSubmit || D[l.p.id].checkOnUpdate) { D[l.p.id]._savedData = {}; D[l.p.id]._savedData[d.p.id + "_id"] = c } var h = d.p.colModel; if (c === '_empty') { $(h).each(function () { g = this.name; opt = $.extend({}, this.editoptions || {}); fld = $("#" + $.jgrid.jqID(g), "#" + f); if (fld && fld.length && fld[0] !== null) { vl = ""; if (this.edittype === 'custom' && $.isFunction(opt.custom_value)) { opt.custom_value.call(l, $("#" + g, "#" + f), 'set', vl) } else if (opt.defaultValue) { vl = $.isFunction(opt.defaultValue) ? opt.defaultValue.call(l) : opt.defaultValue; if (fld[0].type === 'checkbox') { vlc = vl.toLowerCase(); if (vlc.search(/(false|f|0|no|n|off|undefined)/i) < 0 && vlc !== "") { fld[0].checked = true; fld[0].defaultChecked = true; fld[0].value = vl } else { fld[0].checked = false; fld[0].defaultChecked = false } } else { fld.val(vl) } } else { if (fld[0].type === 'checkbox') { fld[0].checked = false; fld[0].defaultChecked = false; vl = $(fld).attr("offval") } else if (fld[0].type && fld[0].type.substr(0, 6) === 'select') { fld[0].selectedIndex = 0 } else { fld.val(vl) } } if (D[l.p.id].checkOnSubmit === true || D[l.p.id].checkOnUpdate) { D[l.p.id]._savedData[g] = vl } } }); $("#id_g", "#" + f).val(c); return } var j = $(d).jqGrid("getInd", c, true); if (!j) { return } $('td[role="gridcell"]', j).each(function (i) { g = h[i].name; if (g !== 'cb' && g !== 'subgrid' && g !== 'rn' && h[i].editable === true) { if (g === d.p.ExpandColumn && d.p.treeGrid === true) { tmp = $(this).text() } else { try { tmp = $.unformat.call(d, $(this), { rowId: c, colModel: h[i] }, i) } catch (_) { tmp = h[i].edittype === "textarea" ? $(this).text() : $(this).html() } } if (l.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp) } if (D[l.p.id].checkOnSubmit === true || D[l.p.id].checkOnUpdate) { D[l.p.id]._savedData[g] = tmp } g = $.jgrid.jqID(g); switch (h[i].edittype) { case "password": case "text": case "button": case "image": case "textarea": if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) { tmp = '' } $("#" + g, "#" + f).val(tmp); break; case "select": var a = tmp.split(","); a = $.map(a, function (n) { return $.trim(n) }); $("#" + g + " option", "#" + f).each(function () { if (!h[i].editoptions.multiple && ($.trim(tmp) === $.trim($(this).text()) || a[0] === $.trim($(this).text()) || a[0] === $.trim($(this).val()))) { this.selected = true } else if (h[i].editoptions.multiple) { if ($.inArray($.trim($(this).text()), a) > -1 || $.inArray($.trim($(this).val()), a) > -1) { this.selected = true } else { this.selected = false } } else { this.selected = false } }); break; case "checkbox": tmp = String(tmp); if (h[i].editoptions && h[i].editoptions.value) { var b = h[i].editoptions.value.split(":"); if (b[0] === tmp) { $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']({ "checked": true, "defaultChecked": true }) } else { $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']({ "checked": false, "defaultChecked": false }) } } else { tmp = tmp.toLowerCase(); if (tmp.search(/(false|f|0|no|n|off|undefined)/i) < 0 && tmp !== "") { $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']("checked", true); $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']("defaultChecked", true) } else { $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']("checked", false); $("#" + g, "#" + f)[l.p.useProp ? 'prop' : 'attr']("defaultChecked", false) } } break; case 'custom': try { if (h[i].editoptions && $.isFunction(h[i].editoptions.custom_value)) { h[i].editoptions.custom_value.call(l, $("#" + g, "#" + f), 'set', tmp) } else { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose) } } break } cnt++ } }); if (cnt > 0) { $("#id_g", frmtb).val(c) } } function setNulls() { $.each(l.p.colModel, function (i, n) { if (n.editoptions && n.editoptions.NullIfEmpty === true) { if (postdata.hasOwnProperty(n.name) && postdata[n.name] === "") { postdata[n.name] = 'null' } } }) } function postIt() { var d, ret = [true, "", ""], onCS = {}, opers = l.p.prmNames, idname, oper, key, selr, i; var f = $(l).triggerHandler("jqGridAddEditBeforeCheckValues", [$("#" + frmgr), frmoper]); if (f && typeof f === 'object') { postdata = f } if ($.isFunction(D[l.p.id].beforeCheckValues)) { f = D[l.p.id].beforeCheckValues.call(l, postdata, $("#" + frmgr), frmoper); if (f && typeof f === 'object') { postdata = f } } for (key in postdata) { if (postdata.hasOwnProperty(key)) { ret = $.jgrid.checkValues.call(l, postdata[key], key); if (ret[0] === false) { break } } } setNulls(); if (ret[0]) { onCS = $(l).triggerHandler("jqGridAddEditClickSubmit", [D[l.p.id], postdata, frmoper]); if (onCS === undefined && $.isFunction(D[l.p.id].onclickSubmit)) { onCS = D[l.p.id].onclickSubmit.call(l, D[l.p.id], postdata, frmoper) || {} } ret = $(l).triggerHandler("jqGridAddEditBeforeSubmit", [postdata, $("#" + frmgr), frmoper]); if (ret === undefined) { ret = [true, "", ""] } if (ret[0] && $.isFunction(D[l.p.id].beforeSubmit)) { ret = D[l.p.id].beforeSubmit.call(l, postdata, $("#" + frmgr), frmoper) } } if (ret[0] && !D[l.p.id].processing) { D[l.p.id].processing = true; $("#sData", frmtb + "_2").addClass('ui-state-active'); oper = opers.oper; idname = opers.id; postdata[oper] = ($.trim(postdata[l.p.id + "_id"]) === "_empty") ? opers.addoper : opers.editoper; if (postdata[oper] !== opers.addoper) { postdata[idname] = postdata[l.p.id + "_id"] } else { if (postdata[idname] === undefined) { postdata[idname] = postdata[l.p.id + "_id"] } } delete postdata[l.p.id + "_id"]; postdata = $.extend(postdata, D[l.p.id].editData, onCS); if (l.p.treeGrid === true) { if (postdata[oper] === opers.addoper) { selr = $(l).jqGrid("getGridParam", 'selrow'); var g = l.p.treeGridModel === 'adjacency' ? l.p.treeReader.parent_id_field : 'parent_id'; postdata[g] = selr } for (i in l.p.treeReader) { if (l.p.treeReader.hasOwnProperty(i)) { var h = l.p.treeReader[i]; if (postdata.hasOwnProperty(h)) { if (postdata[oper] === opers.addoper && i === 'parent_id_field') { continue } delete postdata[h] } } } } postdata[idname] = $.jgrid.stripPref(l.p.idPrefix, postdata[idname]); var j = $.extend({ url: D[l.p.id].url || $(l).jqGrid('getGridParam', 'editurl'), type: D[l.p.id].mtype, data: $.isFunction(D[l.p.id].serializeEditData) ? D[l.p.id].serializeEditData.call(l, postdata) : postdata, complete: function (a, b) { var c; postdata[idname] = l.p.idPrefix + postdata[idname]; if (a.status >= 300 && a.status !== 304) { ret[0] = false; ret[1] = $(l).triggerHandler("jqGridAddEditErrorTextFormat", [a, frmoper]); if ($.isFunction(D[l.p.id].errorTextFormat)) { ret[1] = D[l.p.id].errorTextFormat.call(l, a, frmoper) } else { ret[1] = b + " Status: '" + a.statusText + "'. Error code: " + a.status } } else { ret = $(l).triggerHandler("jqGridAddEditAfterSubmit", [a, postdata, frmoper]); if (ret === undefined) { ret = [true, "", ""] } if (ret[0] && $.isFunction(D[l.p.id].afterSubmit)) { ret = D[l.p.id].afterSubmit.call(l, a, postdata, frmoper) } } if (ret[0] === false) { $("#FormError>td", frmtb).html(ret[1]); $("#FormError", frmtb).show() } else { if (l.p.autoencode) { $.each(postdata, function (n, v) { postdata[n] = $.jgrid.htmlDecode(v) }) } if (postdata[oper] === opers.addoper) { if (!ret[2]) { ret[2] = $.jgrid.randId() } postdata[idname] = ret[2]; if (D[l.p.id].reloadAfterSubmit) { $(l).trigger("reloadGrid") } else { if (l.p.treeGrid === true) { $(l).jqGrid("addChildNode", ret[2], selr, postdata) } else { $(l).jqGrid("addRowData", ret[2], postdata, p.addedrow) } } if (D[l.p.id].closeAfterAdd) { if (l.p.treeGrid !== true) { $(l).jqGrid("setSelection", ret[2]) } $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }) } else if (D[l.p.id].clearAfterAdd) { fillData("_empty", l, frmgr) } } else { if (D[l.p.id].reloadAfterSubmit) { $(l).trigger("reloadGrid"); if (!D[l.p.id].closeAfterEdit) { setTimeout(function () { $(l).jqGrid("setSelection", postdata[idname]) }, 1000) } } else { if (l.p.treeGrid === true) { $(l).jqGrid("setTreeRow", postdata[idname], postdata) } else { $(l).jqGrid("setRowData", postdata[idname], postdata) } } if (D[l.p.id].closeAfterEdit) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }) } } if ($.isFunction(D[l.p.id].afterComplete)) { d = a; setTimeout(function () { $(l).triggerHandler("jqGridAddEditAfterComplete", [d, postdata, $("#" + frmgr), frmoper]); D[l.p.id].afterComplete.call(l, d, postdata, $("#" + frmgr), frmoper); d = null }, 500) } if (D[l.p.id].checkOnSubmit || D[l.p.id].checkOnUpdate) { $("#" + frmgr).data("disabled", false); if (D[l.p.id]._savedData[l.p.id + "_id"] !== "_empty") { for (c in D[l.p.id]._savedData) { if (D[l.p.id]._savedData.hasOwnProperty(c) && postdata[c]) { D[l.p.id]._savedData[c] = postdata[c] } } } } } D[l.p.id].processing = false; $("#sData", frmtb + "_2").removeClass('ui-state-active'); try { $(':input:visible', "#" + frmgr)[0].focus() } catch (e) { } } }, $.jgrid.ajaxOptions, D[l.p.id].ajaxEditOptions); if (!j.url && !D[l.p.id].useDataProxy) { if ($.isFunction(l.p.dataProxy)) { D[l.p.id].useDataProxy = true } else { ret[0] = false; ret[1] += " " + $.jgrid.errors.nourl } } if (ret[0]) { if (D[l.p.id].useDataProxy) { var k = l.p.dataProxy.call(l, j, "set_" + l.p.id); if (k === undefined) { k = [true, ""] } if (k[0] === false) { ret[0] = false; ret[1] = k[1] || "Error deleting the selected row!" } else { if (j.data.oper === opers.addoper && D[l.p.id].closeAfterAdd) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }) } if (j.data.oper === opers.editoper && D[l.p.id].closeAfterEdit) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }) } } } else { $.ajax(j) } } } if (ret[0] === false) { $("#FormError>td", frmtb).html(ret[1]); $("#FormError", frmtb).show() } } function compareData(a, b) { var c = false, key; for (key in a) { if (a.hasOwnProperty(key) && a[key] != b[key]) { c = true; break } } return c } function checkUpdates() { var a = true; $("#FormError", frmtb).hide(); if (D[l.p.id].checkOnUpdate) { postdata = {}; getFormData(); diff = compareData(postdata, D[l.p.id]._savedData); if (diff) { $("#" + frmgr).data("disabled", true); $(".confirm", "#" + IDs.themodal).show(); a = false } } return a } function restoreInline() { var i; if (C !== "_empty" && l.p.savedRow !== undefined && l.p.savedRow.length > 0 && $.isFunction($.fn.jqGrid.restoreRow)) { for (i = 0; i < l.p.savedRow.length; i++) { if (l.p.savedRow[i].id == C) { $(l).jqGrid('restoreRow', C); break } } } } function updateNav(a, b) { var c = b[1].length - 1; if (a === 0) { $("#pData", frmtb + "_2").addClass('ui-state-disabled') } else if (b[1][a - 1] !== undefined && $("#" + $.jgrid.jqID(b[1][a - 1])).hasClass('ui-state-disabled')) { $("#pData", frmtb + "_2").addClass('ui-state-disabled') } else { $("#pData", frmtb + "_2").removeClass('ui-state-disabled') } if (a === c) { $("#nData", frmtb + "_2").addClass('ui-state-disabled') } else if (b[1][a + 1] !== undefined && $("#" + $.jgrid.jqID(b[1][a + 1])).hasClass('ui-state-disabled')) { $("#nData", frmtb + "_2").addClass('ui-state-disabled') } else { $("#nData", frmtb + "_2").removeClass('ui-state-disabled') } } function getCurrPos() { var a = $(l).jqGrid("getDataIDs"), selrow = $("#id_g", frmtb).val(), pos = $.inArray(selrow, a); return [pos, a] } var q = isNaN(D[$(this)[0].p.id].dataheight) ? D[$(this)[0].p.id].dataheight : D[$(this)[0].p.id].dataheight + "px", dw = isNaN(D[$(this)[0].p.id].datawidth) ? D[$(this)[0].p.id].datawidth : D[$(this)[0].p.id].datawidth + "px", frm = $("<form name='FormPost' id='" + frmgr + "' class='FormGrid' onSubmit='return false;' style='width:" + dw + ";overflow:auto;position:relative;height:" + q + ";'></form>").data("disabled", false), tbl = $("<table id='" + frmtborg + "' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"); showFrm = $(l).triggerHandler("jqGridAddEditBeforeInitData", [$("#" + frmgr), frmoper]); if (showFrm === undefined) { showFrm = true } if (showFrm && onBeforeInit) { showFrm = onBeforeInit.call(l, $("#" + frmgr), frmoper) } if (showFrm === false) { return } restoreInline(); $(l.p.colModel).each(function () { var a = this.formoptions; maxCols = Math.max(maxCols, a ? a.colpos || 0 : 0); maxRows = Math.max(maxRows, a ? a.rowpos || 0 : 0) }); $(frm).append(tbl); var s = $("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='" + (maxCols * 2) + "'></td></tr>"); s[0].rp = 0; $(tbl).append(s); s = $("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='" + (maxCols * 2) + "'>" + D[l.p.id].topinfo + "</td></tr>"); s[0].rp = 0; $(tbl).append(s); var t = l.p.direction === "rtl" ? true : false, bp = t ? "nData" : "pData", bn = t ? "pData" : "nData"; createData(C, l, tbl, maxCols); var u = "<a id='" + bp + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>", bN = "<a id='" + bn + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>", bS = "<a id='sData' class='fm-button ui-state-default ui-corner-all'>" + p.bSubmit + "</a>", bC = "<a id='cData' class='fm-button ui-state-default ui-corner-all'>" + p.bCancel + "</a>"; var w = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='" + frmtborg + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>" + (t ? bN + u : u + bN) + "</td><td class='EditButton'>" + bS + bC + "</td></tr>"; w += "<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>" + D[l.p.id].bottominfo + "</td></tr>"; w += "</tbody></table>"; if (maxRows > 0) { var x = []; $.each($(tbl)[0].rows, function (i, r) { x[i] = r }); x.sort(function (a, b) { if (a.rp > b.rp) { return 1 } if (a.rp < b.rp) { return -1 } return 0 }); $.each(x, function (a, b) { $('tbody', tbl).append(b) }) } p.gbox = "#gbox_" + $.jgrid.jqID(m); var y = false; if (p.closeOnEscape === true) { p.closeOnEscape = false; y = true } var z = $("<div></div>").append(frm).append(w); $.jgrid.createModal(IDs, z, D[$(this)[0].p.id], "#gview_" + $.jgrid.jqID(l.p.id), $("#gbox_" + $.jgrid.jqID(l.p.id))[0]); if (t) { $("#pData, #nData", frmtb + "_2").css("float", "right"); $(".EditButton", frmtb + "_2").css("text-align", "left") } if (D[l.p.id].topinfo) { $(".tinfo", frmtb).show() } if (D[l.p.id].bottominfo) { $(".binfo", frmtb + "_2").show() } z = null; w = null; $("#" + $.jgrid.jqID(IDs.themodal)).keydown(function (e) { var a = e.target; if ($("#" + frmgr).data("disabled") === true) { return false } if (D[l.p.id].savekey[0] === true && e.which === D[l.p.id].savekey[1]) { if (a.tagName !== "TEXTAREA") { $("#sData", frmtb + "_2").trigger("click"); return false } } if (e.which === 27) { if (!checkUpdates()) { return false } if (y) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: p.gbox, jqm: p.jqModal, onClose: D[l.p.id].onClose }) } return false } if (D[l.p.id].navkeys[0] === true) { if ($("#id_g", frmtb).val() === "_empty") { return true } if (e.which === D[l.p.id].navkeys[1]) { $("#pData", frmtb + "_2").trigger("click"); return false } if (e.which === D[l.p.id].navkeys[2]) { $("#nData", frmtb + "_2").trigger("click"); return false } } }); if (p.checkOnUpdate) { $("a.ui-jqdialog-titlebar-close span", "#" + $.jgrid.jqID(IDs.themodal)).removeClass("jqmClose"); $("a.ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.themodal)).unbind("click").click(function () { if (!checkUpdates()) { return false } $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }); return false }) } p.saveicon = $.extend([true, "left", "ui-icon-disk"], p.saveicon); p.closeicon = $.extend([true, "left", "ui-icon-close"], p.closeicon); if (p.saveicon[0] === true) { $("#sData", frmtb + "_2").addClass(p.saveicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.saveicon[2] + "'></span>") } if (p.closeicon[0] === true) { $("#cData", frmtb + "_2").addClass(p.closeicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.closeicon[2] + "'></span>") } if (D[l.p.id].checkOnSubmit || D[l.p.id].checkOnUpdate) { bS = "<a id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bYes + "</a>"; bN = "<a id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bNo + "</a>"; bC = "<a id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bExit + "</a>"; var A = p.zIndex || 999; A++; $("<div class='" + p.overlayClass + " jqgrid-overlay confirm' style='z-index:" + A + ";display:none;'>&#160;" + "</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:" + (A + 1) + "'>" + p.saveData + "<br/><br/>" + bS + bN + bC + "</div>").insertAfter("#" + frmgr); $("#sNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () { postIt(); $("#" + frmgr).data("disabled", false); $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide(); return false }); $("#nNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () { $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide(); $("#" + frmgr).data("disabled", false); setTimeout(function () { $(":input:visible", "#" + frmgr)[0].focus() }, 0); return false }); $("#cNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () { $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide(); $("#" + frmgr).data("disabled", false); $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }); return false }) } $(l).triggerHandler("jqGridAddEditInitializeForm", [$("#" + frmgr), frmoper]); if (onInitializeForm) { onInitializeForm.call(l, $("#" + frmgr), frmoper) } if (C === "_empty" || !D[l.p.id].viewPagerButtons) { $("#pData,#nData", frmtb + "_2").hide() } else { $("#pData,#nData", frmtb + "_2").show() } $(l).triggerHandler("jqGridAddEditBeforeShowForm", [$("#" + frmgr), frmoper]); if (onBeforeShow) { onBeforeShow.call(l, $("#" + frmgr), frmoper) } $("#" + $.jgrid.jqID(IDs.themodal)).data("onClose", D[l.p.id].onClose); $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), { gbox: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, overlay: p.overlay, modal: p.modal, overlayClass: p.overlayClass, onHide: function (h) { $(l).data("formProp", { top: parseFloat($(h.w).css("top")), left: parseFloat($(h.w).css("left")), width: $(h.w).width(), height: $(h.w).height(), dataheight: $("#" + frmgr).height(), datawidth: $("#" + frmgr).width() }); h.w.remove(); if (h.o) { h.o.remove() } } }); if (!o) { $("." + $.jgrid.jqID(p.overlayClass)).click(function () { if (!checkUpdates()) { return false } $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }); return false }) } $(".fm-button", "#" + $.jgrid.jqID(IDs.themodal)).hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }); $("#sData", frmtb + "_2").click(function () { postdata = {}; $("#FormError", frmtb).hide(); getFormData(); if (postdata[l.p.id + "_id"] === "_empty") { postIt() } else if (p.checkOnSubmit === true) { diff = compareData(postdata, D[l.p.id]._savedData); if (diff) { $("#" + frmgr).data("disabled", true); $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).show() } else { postIt() } } else { postIt() } return false }); $("#cData", frmtb + "_2").click(function () { if (!checkUpdates()) { return false } $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(m), jqm: p.jqModal, onClose: D[l.p.id].onClose }); return false }); $("#nData", frmtb + "_2").click(function () { if (!checkUpdates()) { return false } $("#FormError", frmtb).hide(); var a = getCurrPos(); a[0] = parseInt(a[0], 10); if (a[0] !== -1 && a[1][a[0] + 1]) { $(l).triggerHandler("jqGridAddEditClickPgButtons", ['next', $("#" + frmgr), a[1][a[0]]]); var b; if ($.isFunction(p.onclickPgButtons)) { b = p.onclickPgButtons.call(l, 'next', $("#" + frmgr), a[1][a[0]]); if (b !== undefined && b === false) { return false } } if ($("#" + $.jgrid.jqID(a[1][a[0] + 1])).hasClass('ui-state-disabled')) { return false } fillData(a[1][a[0] + 1], l, frmgr); $(l).jqGrid("setSelection", a[1][a[0] + 1]); $(l).triggerHandler("jqGridAddEditAfterClickPgButtons", ['next', $("#" + frmgr), a[1][a[0]]]); if ($.isFunction(p.afterclickPgButtons)) { p.afterclickPgButtons.call(l, 'next', $("#" + frmgr), a[1][a[0] + 1]) } updateNav(a[0] + 1, a) } return false }); $("#pData", frmtb + "_2").click(function () { if (!checkUpdates()) { return false } $("#FormError", frmtb).hide(); var a = getCurrPos(); if (a[0] !== -1 && a[1][a[0] - 1]) { $(l).triggerHandler("jqGridAddEditClickPgButtons", ['prev', $("#" + frmgr), a[1][a[0]]]); var b; if ($.isFunction(p.onclickPgButtons)) { b = p.onclickPgButtons.call(l, 'prev', $("#" + frmgr), a[1][a[0]]); if (b !== undefined && b === false) { return false } } if ($("#" + $.jgrid.jqID(a[1][a[0] - 1])).hasClass('ui-state-disabled')) { return false } fillData(a[1][a[0] - 1], l, frmgr); $(l).jqGrid("setSelection", a[1][a[0] - 1]); $(l).triggerHandler("jqGridAddEditAfterClickPgButtons", ['prev', $("#" + frmgr), a[1][a[0]]]); if ($.isFunction(p.afterclickPgButtons)) { p.afterclickPgButtons.call(l, 'prev', $("#" + frmgr), a[1][a[0] - 1]) } updateNav(a[0] - 1, a) } return false }); $(l).triggerHandler("jqGridAddEditAfterShowForm", [$("#" + frmgr), frmoper]); if (onAfterShow) { onAfterShow.call(l, $("#" + frmgr), frmoper) } var B = getCurrPos(); updateNav(B[0], B) }) }, viewGridRow: function (s, p) { p = $.extend(true, { top: 0, left: 0, width: 0, datawidth: 'auto', height: 'auto', dataheight: 'auto', modal: false, overlay: 30, drag: true, resize: true, jqModal: true, closeOnEscape: false, labelswidth: '30%', closeicon: [], navkeys: [false, 38, 40], onClose: null, beforeShowForm: null, beforeInitData: null, viewPagerButtons: true, recreateForm: false }, $.jgrid.view, p || {}); D[$(this)[0].p.id] = p; return this.each(function () { var j = this; if (!j.grid || !s) { return } var k = j.p.id, frmgr = "ViewGrid_" + $.jgrid.jqID(k), frmtb = "ViewTbl_" + $.jgrid.jqID(k), frmgr_id = "ViewGrid_" + k, frmtb_id = "ViewTbl_" + k, IDs = { themodal: 'viewmod' + k, modalhead: 'viewhd' + k, modalcontent: 'viewcnt' + k, scrollelm: frmgr }, onBeforeInit = $.isFunction(D[j.p.id].beforeInitData) ? D[j.p.id].beforeInitData : false, showFrm = true, maxCols = 1, maxRows = 0; if (!p.recreateForm) { if ($(j).data("viewProp")) { $.extend(D[$(this)[0].p.id], $(j).data("viewProp")) } } function focusaref() { if (D[j.p.id].closeOnEscape === true || D[j.p.id].navkeys[0] === true) { setTimeout(function () { $(".ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.modalhead)).focus() }, 0) } } function createData(c, d, e, f) { var g, hc, trdata, cnt = 0, tmp, dc, retpos = [], ind = false, i, tdtmpl = "<td class='CaptionTD form-view-label ui-widget-content' width='" + p.labelswidth + "'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>", tmpl = "", tdtmpl2 = "<td class='CaptionTD form-view-label ui-widget-content'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>", fmtnum = ['integer', 'number', 'currency'], max1 = 0, max2 = 0, maxw, setme, viewfld; for (i = 1; i <= f; i++) { tmpl += i === 1 ? tdtmpl : tdtmpl2 } $(d.p.colModel).each(function () { if (this.editrules && this.editrules.edithidden === true) { hc = false } else { hc = this.hidden === true ? true : false } if (!hc && this.align === 'right') { if (this.formatter && $.inArray(this.formatter, fmtnum) !== -1) { max1 = Math.max(max1, parseInt(this.width, 10)) } else { max2 = Math.max(max2, parseInt(this.width, 10)) } } }); maxw = max1 !== 0 ? max1 : max2 !== 0 ? max2 : 0; ind = $(d).jqGrid("getInd", c); $(d.p.colModel).each(function (i) { g = this.name; setme = false; if (this.editrules && this.editrules.edithidden === true) { hc = false } else { hc = this.hidden === true ? true : false } dc = hc ? "style='display:none'" : ""; viewfld = (typeof this.viewable !== 'boolean') ? true : this.viewable; if (g !== 'cb' && g !== 'subgrid' && g !== 'rn' && viewfld) { if (ind === false) { tmp = "" } else { if (g === d.p.ExpandColumn && d.p.treeGrid === true) { tmp = $("td:eq(" + i + ")", d.rows[ind]).text() } else { tmp = $("td:eq(" + i + ")", d.rows[ind]).html() } } setme = this.align === 'right' && maxw !== 0 ? true : false; var a = $.extend({}, { rowabove: false, rowcontent: '' }, this.formoptions || {}), rp = parseInt(a.rowpos, 10) || cnt + 1, cp = parseInt((parseInt(a.colpos, 10) || 1) * 2, 10); if (a.rowabove) { var b = $("<tr><td class='contentinfo' colspan='" + (f * 2) + "'>" + a.rowcontent + "</td></tr>"); $(e).append(b); b[0].rp = rp } trdata = $(e).find("tr[rowpos=" + rp + "]"); if (trdata.length === 0) { trdata = $("<tr " + dc + " rowpos='" + rp + "'></tr>").addClass("FormData").attr("id", "trv_" + g); $(trdata).append(tmpl); $(e).append(trdata); trdata[0].rp = rp } $("td:eq(" + (cp - 2) + ")", trdata[0]).html('<b>' + (a.label === undefined ? d.p.colNames[i] : a.label) + '</b>'); $("td:eq(" + (cp - 1) + ")", trdata[0]).append("<span>" + tmp + "</span>").attr("id", "v_" + g); if (setme) { $("td:eq(" + (cp - 1) + ") span", trdata[0]).css({ 'text-align': 'right', width: maxw + "px" }) } retpos[cnt] = i; cnt++ } }); if (cnt > 0) { var h = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (f * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='" + c + "'/></td></tr>"); h[0].rp = cnt + 99; $(e).append(h) } return retpos } function fillData(a, b) { var c, hc, cnt = 0, tmp, trv; trv = $(b).jqGrid("getInd", a, true); if (!trv) { return } $('td', trv).each(function (i) { c = b.p.colModel[i].name; if (b.p.colModel[i].editrules && b.p.colModel[i].editrules.edithidden === true) { hc = false } else { hc = b.p.colModel[i].hidden === true ? true : false } if (c !== 'cb' && c !== 'subgrid' && c !== 'rn') { if (c === b.p.ExpandColumn && b.p.treeGrid === true) { tmp = $(this).text() } else { tmp = $(this).html() } c = $.jgrid.jqID("v_" + c); $("#" + c + " span", "#" + frmtb).html(tmp); if (hc) { $("#" + c, "#" + frmtb).parents("tr:first").hide() } cnt++ } }); if (cnt > 0) { $("#id_g", "#" + frmtb).val(a) } } function updateNav(a, b) { var c = b[1].length - 1; if (a === 0) { $("#pData", "#" + frmtb + "_2").addClass('ui-state-disabled') } else if (b[1][a - 1] !== undefined && $("#" + $.jgrid.jqID(b[1][a - 1])).hasClass('ui-state-disabled')) { $("#pData", frmtb + "_2").addClass('ui-state-disabled') } else { $("#pData", "#" + frmtb + "_2").removeClass('ui-state-disabled') } if (a === c) { $("#nData", "#" + frmtb + "_2").addClass('ui-state-disabled') } else if (b[1][a + 1] !== undefined && $("#" + $.jgrid.jqID(b[1][a + 1])).hasClass('ui-state-disabled')) { $("#nData", frmtb + "_2").addClass('ui-state-disabled') } else { $("#nData", "#" + frmtb + "_2").removeClass('ui-state-disabled') } } function getCurrPos() { var a = $(j).jqGrid("getDataIDs"), selrow = $("#id_g", "#" + frmtb).val(), pos = $.inArray(selrow, a); return [pos, a] } var l = isNaN(D[$(this)[0].p.id].dataheight) ? D[$(this)[0].p.id].dataheight : D[$(this)[0].p.id].dataheight + "px", dw = isNaN(D[$(this)[0].p.id].datawidth) ? D[$(this)[0].p.id].datawidth : D[$(this)[0].p.id].datawidth + "px", frm = $("<form name='FormPost' id='" + frmgr_id + "' class='FormGrid' style='width:" + dw + ";overflow:auto;position:relative;height:" + l + ";'></form>"), tbl = $("<table id='" + frmtb_id + "' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>"); if (onBeforeInit) { showFrm = onBeforeInit.call(j, $("#" + frmgr)); if (showFrm === undefined) { showFrm = true } } if (showFrm === false) { return } $(j.p.colModel).each(function () { var a = this.formoptions; maxCols = Math.max(maxCols, a ? a.colpos || 0 : 0); maxRows = Math.max(maxRows, a ? a.rowpos || 0 : 0) }); $(frm).append(tbl); createData(s, j, tbl, maxCols); var m = j.p.direction === "rtl" ? true : false, bp = m ? "nData" : "pData", bn = m ? "pData" : "nData", bP = "<a id='" + bp + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>", bN = "<a id='" + bn + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>", bC = "<a id='cData' class='fm-button ui-state-default ui-corner-all'>" + p.bClose + "</a>"; if (maxRows > 0) { var n = []; $.each($(tbl)[0].rows, function (i, r) { n[i] = r }); n.sort(function (a, b) { if (a.rp > b.rp) { return 1 } if (a.rp < b.rp) { return -1 } return 0 }); $.each(n, function (a, b) { $('tbody', tbl).append(b) }) } p.gbox = "#gbox_" + $.jgrid.jqID(k); var o = $("<div></div>").append(frm).append("<table border='0' class='EditTable' id='" + frmtb + "_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='" + p.labelswidth + "'>" + (m ? bN + bP : bP + bN) + "</td><td class='EditButton'>" + bC + "</td></tr></tbody></table>"); $.jgrid.createModal(IDs, o, p, "#gview_" + $.jgrid.jqID(j.p.id), $("#gview_" + $.jgrid.jqID(j.p.id))[0]); if (m) { $("#pData, #nData", "#" + frmtb + "_2").css("float", "right"); $(".EditButton", "#" + frmtb + "_2").css("text-align", "left") } if (!p.viewPagerButtons) { $("#pData, #nData", "#" + frmtb + "_2").hide() } o = null; $("#" + IDs.themodal).keydown(function (e) { if (e.which === 27) { if (D[j.p.id].closeOnEscape) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: p.gbox, jqm: p.jqModal, onClose: p.onClose }) } return false } if (p.navkeys[0] === true) { if (e.which === p.navkeys[1]) { $("#pData", "#" + frmtb + "_2").trigger("click"); return false } if (e.which === p.navkeys[2]) { $("#nData", "#" + frmtb + "_2").trigger("click"); return false } } }); p.closeicon = $.extend([true, "left", "ui-icon-close"], p.closeicon); if (p.closeicon[0] === true) { $("#cData", "#" + frmtb + "_2").addClass(p.closeicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.closeicon[2] + "'></span>") } if ($.isFunction(p.beforeShowForm)) { p.beforeShowForm.call(j, $("#" + frmgr)) } $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), { gbox: "#gbox_" + $.jgrid.jqID(k), jqm: p.jqModal, overlay: p.overlay, modal: p.modal, onHide: function (h) { $(j).data("viewProp", { top: parseFloat($(h.w).css("top")), left: parseFloat($(h.w).css("left")), width: $(h.w).width(), height: $(h.w).height(), dataheight: $("#" + frmgr).height(), datawidth: $("#" + frmgr).width() }); h.w.remove(); if (h.o) { h.o.remove() } } }); $(".fm-button:not(.ui-state-disabled)", "#" + frmtb + "_2").hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }); focusaref(); $("#cData", "#" + frmtb + "_2").click(function () { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(k), jqm: p.jqModal, onClose: p.onClose }); return false }); $("#nData", "#" + frmtb + "_2").click(function () { $("#FormError", "#" + frmtb).hide(); var a = getCurrPos(); a[0] = parseInt(a[0], 10); if (a[0] !== -1 && a[1][a[0] + 1]) { if ($.isFunction(p.onclickPgButtons)) { p.onclickPgButtons.call(j, 'next', $("#" + frmgr), a[1][a[0]]) } fillData(a[1][a[0] + 1], j); $(j).jqGrid("setSelection", a[1][a[0] + 1]); if ($.isFunction(p.afterclickPgButtons)) { p.afterclickPgButtons.call(j, 'next', $("#" + frmgr), a[1][a[0] + 1]) } updateNav(a[0] + 1, a) } focusaref(); return false }); $("#pData", "#" + frmtb + "_2").click(function () { $("#FormError", "#" + frmtb).hide(); var a = getCurrPos(); if (a[0] !== -1 && a[1][a[0] - 1]) { if ($.isFunction(p.onclickPgButtons)) { p.onclickPgButtons.call(j, 'prev', $("#" + frmgr), a[1][a[0]]) } fillData(a[1][a[0] - 1], j); $(j).jqGrid("setSelection", a[1][a[0] - 1]); if ($.isFunction(p.afterclickPgButtons)) { p.afterclickPgButtons.call(j, 'prev', $("#" + frmgr), a[1][a[0] - 1]) } updateNav(a[0] - 1, a) } focusaref(); return false }); var q = getCurrPos(); updateNav(q[0], q) }) }, delGridRow: function (l, p) { p = $.extend(true, { top: 0, left: 0, width: 240, height: 'auto', dataheight: 'auto', modal: false, overlay: 30, drag: true, resize: true, url: '', mtype: "POST", reloadAfterSubmit: true, beforeShowForm: null, beforeInitData: null, afterShowForm: null, beforeSubmit: null, onclickSubmit: null, afterSubmit: null, jqModal: true, closeOnEscape: false, delData: {}, delicon: [], cancelicon: [], onClose: null, ajaxDelOptions: {}, processing: false, serializeDelData: null, useDataProxy: false }, $.jgrid.del, p || {}); D[$(this)[0].p.id] = p; return this.each(function () { var g = this; if (!g.grid) { return } if (!l) { return } var h = $.isFunction(D[g.p.id].beforeShowForm), onAfterShow = $.isFunction(D[g.p.id].afterShowForm), onBeforeInit = $.isFunction(D[g.p.id].beforeInitData) ? D[g.p.id].beforeInitData : false, gID = g.p.id, onCS = {}, showFrm = true, dtbl = "DelTbl_" + $.jgrid.jqID(gID), postd, idname, opers, oper, dtbl_id = "DelTbl_" + gID, IDs = { themodal: 'delmod' + gID, modalhead: 'delhd' + gID, modalcontent: 'delcnt' + gID, scrollelm: dtbl }; if ($.isArray(l)) { l = l.join() } if ($("#" + $.jgrid.jqID(IDs.themodal))[0] !== undefined) { if (onBeforeInit) { showFrm = onBeforeInit.call(g, $("#" + dtbl)); if (showFrm === undefined) { showFrm = true } } if (showFrm === false) { return } $("#DelData>td", "#" + dtbl).text(l); $("#DelError", "#" + dtbl).hide(); if (D[g.p.id].processing === true) { D[g.p.id].processing = false; $("#dData", "#" + dtbl).removeClass('ui-state-active') } if (h) { D[g.p.id].beforeShowForm.call(g, $("#" + dtbl)) } $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), { gbox: "#gbox_" + $.jgrid.jqID(gID), jqm: D[g.p.id].jqModal, jqM: false, overlay: D[g.p.id].overlay, modal: D[g.p.id].modal }); if (onAfterShow) { D[g.p.id].afterShowForm.call(g, $("#" + dtbl)) } } else { var j = isNaN(D[g.p.id].dataheight) ? D[g.p.id].dataheight : D[g.p.id].dataheight + "px", dw = isNaN(p.datawidth) ? p.datawidth : p.datawidth + "px", tbl = "<div id='" + dtbl_id + "' class='formdata' style='width:" + dw + ";overflow:auto;position:relative;height:" + j + ";'>"; tbl += "<table class='DelTable'><tbody>"; tbl += "<tr id='DelError' style='display:none'><td class='ui-state-error'></td></tr>"; tbl += "<tr id='DelData' style='display:none'><td >" + l + "</td></tr>"; tbl += "<tr><td class=\"delmsg\" style=\"white-space:pre;\">" + D[g.p.id].msg + "</td></tr><tr><td >&#160;</td></tr>"; tbl += "</tbody></table></div>"; var k = "<a id='dData' class='fm-button ui-state-default ui-corner-all'>" + p.bSubmit + "</a>", bC = "<a id='eData' class='fm-button ui-state-default ui-corner-all'>" + p.bCancel + "</a>"; tbl += "<table cellspacing='0' cellpadding='0' border='0' class='EditTable' id='" + dtbl + "_2'><tbody><tr><td><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>" + k + "&#160;" + bC + "</td></tr></tbody></table>"; p.gbox = "#gbox_" + $.jgrid.jqID(gID); $.jgrid.createModal(IDs, tbl, p, "#gview_" + $.jgrid.jqID(g.p.id), $("#gview_" + $.jgrid.jqID(g.p.id))[0]); if (onBeforeInit) { showFrm = onBeforeInit.call(g, $("#" + dtbl)); if (showFrm === undefined) { showFrm = true } } if (showFrm === false) { return } $(".fm-button", "#" + dtbl + "_2").hover(function () { $(this).addClass('ui-state-hover') }, function () { $(this).removeClass('ui-state-hover') }); p.delicon = $.extend([true, "left", "ui-icon-scissors"], D[g.p.id].delicon); p.cancelicon = $.extend([true, "left", "ui-icon-cancel"], D[g.p.id].cancelicon); if (p.delicon[0] === true) { $("#dData", "#" + dtbl + "_2").addClass(p.delicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.delicon[2] + "'></span>") } if (p.cancelicon[0] === true) { $("#eData", "#" + dtbl + "_2").addClass(p.cancelicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.cancelicon[2] + "'></span>") } $("#dData", "#" + dtbl + "_2").click(function () { var c = [true, ""], pk, postdata = $("#DelData>td", "#" + dtbl).text(); onCS = {}; if ($.isFunction(D[g.p.id].onclickSubmit)) { onCS = D[g.p.id].onclickSubmit.call(g, D[g.p.id], postdata) || {} } if ($.isFunction(D[g.p.id].beforeSubmit)) { c = D[g.p.id].beforeSubmit.call(g, postdata) } if (c[0] && !D[g.p.id].processing) { D[g.p.id].processing = true; opers = g.p.prmNames; postd = $.extend({}, D[g.p.id].delData, onCS); oper = opers.oper; postd[oper] = opers.deloper; idname = opers.id; postdata = String(postdata).split(","); if (!postdata.length) { return false } for (pk in postdata) { if (postdata.hasOwnProperty(pk)) { postdata[pk] = $.jgrid.stripPref(g.p.idPrefix, postdata[pk]) } } postd[idname] = postdata.join(); $(this).addClass('ui-state-active'); var d = $.extend({ url: D[g.p.id].url || $(g).jqGrid('getGridParam', 'editurl'), type: D[g.p.id].mtype, data: $.isFunction(D[g.p.id].serializeDelData) ? D[g.p.id].serializeDelData.call(g, postd) : postd, complete: function (a, b) { var i; if (a.status >= 300 && a.status !== 304) { c[0] = false; if ($.isFunction(D[g.p.id].errorTextFormat)) { c[1] = D[g.p.id].errorTextFormat.call(g, a) } else { c[1] = b + " Status: '" + a.statusText + "'. Error code: " + a.status } } else { if ($.isFunction(D[g.p.id].afterSubmit)) { c = D[g.p.id].afterSubmit.call(g, a, postd) } } if (c[0] === false) { $("#DelError>td", "#" + dtbl).html(c[1]); $("#DelError", "#" + dtbl).show() } else { if (D[g.p.id].reloadAfterSubmit && g.p.datatype !== "local") { $(g).trigger("reloadGrid") } else { if (g.p.treeGrid === true) { try { $(g).jqGrid("delTreeNode", g.p.idPrefix + postdata[0]) } catch (e) { } } else { for (i = 0; i < postdata.length; i++) { $(g).jqGrid("delRowData", g.p.idPrefix + postdata[i]) } } g.p.selrow = null; g.p.selarrrow = [] } if ($.isFunction(D[g.p.id].afterComplete)) { setTimeout(function () { D[g.p.id].afterComplete.call(g, a, postdata) }, 500) } } D[g.p.id].processing = false; $("#dData", "#" + dtbl + "_2").removeClass('ui-state-active'); if (c[0]) { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(gID), jqm: p.jqModal, onClose: D[g.p.id].onClose }) } } }, $.jgrid.ajaxOptions, D[g.p.id].ajaxDelOptions); if (!d.url && !D[g.p.id].useDataProxy) { if ($.isFunction(g.p.dataProxy)) { D[g.p.id].useDataProxy = true } else { c[0] = false; c[1] += " " + $.jgrid.errors.nourl } } if (c[0]) { if (D[g.p.id].useDataProxy) { var f = g.p.dataProxy.call(g, d, "del_" + g.p.id); if (f === undefined) { f = [true, ""] } if (f[0] === false) { c[0] = false; c[1] = f[1] || "Error deleting the selected row!" } else { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(gID), jqm: p.jqModal, onClose: D[g.p.id].onClose }) } } else { $.ajax(d) } } } if (c[0] === false) { $("#DelError>td", "#" + dtbl).html(c[1]); $("#DelError", "#" + dtbl).show() } return false }); $("#eData", "#" + dtbl + "_2").click(function () { $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), { gb: "#gbox_" + $.jgrid.jqID(gID), jqm: D[g.p.id].jqModal, onClose: D[g.p.id].onClose }); return false }); if (h) { D[g.p.id].beforeShowForm.call(g, $("#" + dtbl)) } $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), { gbox: "#gbox_" + $.jgrid.jqID(gID), jqm: D[g.p.id].jqModal, overlay: D[g.p.id].overlay, modal: D[g.p.id].modal }); if (onAfterShow) { D[g.p.id].afterShowForm.call(g, $("#" + dtbl)) } } if (D[g.p.id].closeOnEscape === true) { setTimeout(function () { $(".ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.modalhead)).focus() }, 0) } }) }, navGrid: function (f, o, g, h, j, k, l) { o = $.extend({ edit: true, editicon: "ui-icon-pencil", add: true, addicon: "ui-icon-plus", del: true, delicon: "ui-icon-trash", search: true, searchicon: "ui-icon-search", refresh: true, refreshicon: "ui-icon-refresh", refreshstate: 'firstpage', view: false, viewicon: "ui-icon-document", position: "left", closeOnEscape: true, beforeRefresh: null, afterRefresh: null, cloneToTop: false, alertwidth: 200, alertheight: 'auto', alerttop: null, alertleft: null, alertzIndex: null }, $.jgrid.nav, o || {}); return this.each(function () { if (this.nav) { return } var b = { themodal: 'alertmod_' + this.p.id, modalhead: 'alerthd_' + this.p.id, modalcontent: 'alertcnt_' + this.p.id }, $t = this, twd, tdw; if (!$t.grid || typeof f !== 'string') { return } if ($("#" + b.themodal)[0] === undefined) { if (!o.alerttop && !o.alertleft) { if (window.innerWidth !== undefined) { o.alertleft = window.innerWidth; o.alerttop = window.innerHeight } else if (document.documentElement !== undefined && document.documentElement.clientWidth !== undefined && document.documentElement.clientWidth !== 0) { o.alertleft = document.documentElement.clientWidth; o.alerttop = document.documentElement.clientHeight } else { o.alertleft = 1024; o.alerttop = 768 } o.alertleft = o.alertleft / 2 - parseInt(o.alertwidth, 10) / 2; o.alerttop = o.alerttop / 2 - 25 } $.jgrid.createModal(b, "<div>" + o.alerttext + "</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>", { gbox: "#gbox_" + $.jgrid.jqID($t.p.id), jqModal: true, drag: true, resize: true, caption: o.alertcap, top: o.alerttop, left: o.alertleft, width: o.alertwidth, height: o.alertheight, closeOnEscape: o.closeOnEscape, zIndex: o.alertzIndex }, "#gview_" + $.jgrid.jqID($t.p.id), $("#gbox_" + $.jgrid.jqID($t.p.id))[0], true) } var c = 1, i, onHoverIn = function () { if (!$(this).hasClass('ui-state-disabled')) { $(this).addClass("ui-state-hover") } }, onHoverOut = function () { $(this).removeClass("ui-state-hover") }; if (o.cloneToTop && $t.p.toppager) { c = 2 } for (i = 0; i < c; i++) { var d, navtbl = $("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr></tr></tbody></table>"), sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>", pgid, elemids; if (i === 0) { pgid = f; elemids = $t.p.id; if (pgid === $t.p.toppager) { elemids += "_top"; c = 1 } } else { pgid = $t.p.toppager; elemids = $t.p.id + "_top" } if ($t.p.direction === "rtl") { $(navtbl).attr("dir", "rtl").css("float", "right") } if (o.add) { h = h || {}; d = $("<td class='ui-pg-button ui-corner-all'></td>"); $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.addicon + "'></span>" + o.addtext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.addtitle || "", id: h.id || "add_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { if ($.isFunction(o.addfunc)) { o.addfunc.call($t) } else { $($t).jqGrid("editGridRow", "new", h) } } return false }).hover(onHoverIn, onHoverOut); d = null } if (o.edit) { d = $("<td class='ui-pg-button ui-corner-all'></td>"); g = g || {}; $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.editicon + "'></span>" + o.edittext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.edittitle || "", id: g.id || "edit_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { var a = $t.p.selrow; if (a) { if ($.isFunction(o.editfunc)) { o.editfunc.call($t, a) } else { $($t).jqGrid("editGridRow", a, g) } } else { $.jgrid.viewModal("#" + b.themodal, { gbox: "#gbox_" + $.jgrid.jqID($t.p.id), jqm: true }); $("#jqg_alrt").focus() } } return false }).hover(onHoverIn, onHoverOut); d = null } if (o.view) { d = $("<td class='ui-pg-button ui-corner-all'></td>"); l = l || {}; $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.viewicon + "'></span>" + o.viewtext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.viewtitle || "", id: l.id || "view_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { var a = $t.p.selrow; if (a) { if ($.isFunction(o.viewfunc)) { o.viewfunc.call($t, a) } else { $($t).jqGrid("viewGridRow", a, l) } } else { $.jgrid.viewModal("#" + b.themodal, { gbox: "#gbox_" + $.jgrid.jqID($t.p.id), jqm: true }); $("#jqg_alrt").focus() } } return false }).hover(onHoverIn, onHoverOut); d = null } if (o.del) { d = $("<td class='ui-pg-button ui-corner-all'></td>"); j = j || {}; $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.delicon + "'></span>" + o.deltext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.deltitle || "", id: j.id || "del_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { var a; if ($t.p.multiselect) { a = $t.p.selarrrow; if (a.length === 0) { a = null } } else { a = $t.p.selrow } if (a) { if ($.isFunction(o.delfunc)) { o.delfunc.call($t, a) } else { $($t).jqGrid("delGridRow", a, j) } } else { $.jgrid.viewModal("#" + b.themodal, { gbox: "#gbox_" + $.jgrid.jqID($t.p.id), jqm: true }); $("#jqg_alrt").focus() } } return false }).hover(onHoverIn, onHoverOut); d = null } if (o.add || o.edit || o.del || o.view) { $("tr", navtbl).append(sep) } if (o.search) { d = $("<td class='ui-pg-button ui-corner-all'></td>"); k = k || {}; $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.searchicon + "'></span>" + o.searchtext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.searchtitle || "", id: k.id || "search_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { if ($.isFunction(o.searchfunc)) { o.searchfunc.call($t, k) } else { $($t).jqGrid("searchGrid", k) } } return false }).hover(onHoverIn, onHoverOut); if (k.showOnLoad && k.showOnLoad === true) { $(d, navtbl).click() } d = null } if (o.refresh) { d = $("<td class='ui-pg-button ui-corner-all'></td>"); $(d).append("<div class='ui-pg-div'><span class='ui-icon " + o.refreshicon + "'></span>" + o.refreshtext + "</div>"); $("tr", navtbl).append(d); $(d, navtbl).attr({ "title": o.refreshtitle || "", id: "refresh_" + elemids }).click(function () { if (!$(this).hasClass('ui-state-disabled')) { if ($.isFunction(o.beforeRefresh)) { o.beforeRefresh.call($t) } $t.p.search = false; $t.p.resetsearch = true; try { var a = $t.p.id; $t.p.postData.filters = ""; try { $("#fbox_" + $.jgrid.jqID(a)).jqFilter('resetFilter') } catch (ef) { } if ($.isFunction($t.clearToolbar)) { $t.clearToolbar.call($t, false) } } catch (e) { } switch (o.refreshstate) { case 'firstpage': $($t).trigger("reloadGrid", [{ page: 1}]); break; case 'current': $($t).trigger("reloadGrid", [{ current: true}]); break } if ($.isFunction(o.afterRefresh)) { o.afterRefresh.call($t) } } return false }).hover(onHoverIn, onHoverOut); d = null } tdw = $(".ui-jqgrid").css("font-size") || "11px"; $('body').append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + tdw + ";visibility:hidden;' ></div>"); twd = $(navtbl).clone().appendTo("#testpg2").width(); $("#testpg2").remove(); $(pgid + "_" + o.position, pgid).append(navtbl); if ($t.p._nvtd) { if (twd > $t.p._nvtd[0]) { $(pgid + "_" + o.position, pgid).width(twd); $t.p._nvtd[0] = twd } $t.p._nvtd[1] = twd } tdw = null; twd = null; navtbl = null; this.nav = true } }) }, navButtonAdd: function (c, p) { p = $.extend({ caption: "newButton", title: '', buttonicon: 'ui-icon-newwin', onClickButton: null, position: "last", cursor: 'pointer' }, p || {}); return this.each(function () { if (!this.grid) { return } if (typeof c === "string" && c.indexOf("#") !== 0) { c = "#" + $.jgrid.jqID(c) } var a = $(".navtable", c)[0], $t = this; if (a) { if (p.id && $("#" + $.jgrid.jqID(p.id), a)[0] !== undefined) { return } var b = $("<td></td>"); if (p.buttonicon.toString().toUpperCase() === "NONE") { $(b).addClass('ui-pg-button ui-corner-all').append("<div class='ui-pg-div'>" + p.caption + "</div>") } else { $(b).addClass('ui-pg-button ui-corner-all').append("<div class='ui-pg-div'><span class='ui-icon " + p.buttonicon + "'></span>" + p.caption + "</div>") } if (p.id) { $(b).attr("id", p.id) } if (p.position === 'first') { if (a.rows[0].cells.length === 0) { $("tr", a).append(b) } else { $("tr td:eq(0)", a).before(b) } } else { $("tr", a).append(b) } $(b, a).attr("title", p.title || "").click(function (e) { if (!$(this).hasClass('ui-state-disabled')) { if ($.isFunction(p.onClickButton)) { p.onClickButton.call($t, e) } } return false }).hover(function () { if (!$(this).hasClass('ui-state-disabled')) { $(this).addClass('ui-state-hover') } }, function () { $(this).removeClass("ui-state-hover") }) } }) }, navSeparatorAdd: function (c, p) { p = $.extend({ sepclass: "ui-separator", sepcontent: '', position: "last" }, p || {}); return this.each(function () { if (!this.grid) { return } if (typeof c === "string" && c.indexOf("#") !== 0) { c = "#" + $.jgrid.jqID(c) } var a = $(".navtable", c)[0]; if (a) { var b = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='" + p.sepclass + "'></span>" + p.sepcontent + "</td>"; if (p.position === 'first') { if (a.rows[0].cells.length === 0) { $("tr", a).append(b) } else { $("tr td:eq(0)", a).before(b) } } else { $("tr", a).append(b) } } }) }, GridToForm: function (c, d) { return this.each(function () { var a = this, i; if (!a.grid) { return } var b = $(a).jqGrid("getRowData", c); if (b) { for (i in b) { if (b.hasOwnProperty(i)) { if ($("[name=" + $.jgrid.jqID(i) + "]", d).is("input:radio") || $("[name=" + $.jgrid.jqID(i) + "]", d).is("input:checkbox")) { $("[name=" + $.jgrid.jqID(i) + "]", d).each(function () { if ($(this).val() == b[i]) { $(this)[a.p.useProp ? 'prop' : 'attr']("checked", true) } else { $(this)[a.p.useProp ? 'prop' : 'attr']("checked", false) } }) } else { $("[name=" + $.jgrid.jqID(i) + "]", d).val(b[i]) } } } } }) }, FormToGrid: function (e, f, g, h) { return this.each(function () { var b = this; if (!b.grid) { return } if (!g) { g = 'set' } if (!h) { h = 'first' } var c = $(f).serializeArray(); var d = {}; $.each(c, function (i, a) { d[a.name] = a.value }); if (g === 'add') { $(b).jqGrid("addRowData", e, d, h) } else if (g === 'set') { $(b).jqGrid("setRowData", e, d) } }) } }) })(jQuery); (function ($) { "use strict"; $.jgrid.inlineEdit = $.jgrid.inlineEdit || {}; $.jgrid.extend({ editRow: function (f, g, h, j, k, l, m, n, p) { var o = {}, args = $.makeArray(arguments).slice(1); if ($.type(args[0]) === "object") { o = args[0] } else { if (g !== undefined) { o.keys = g } if ($.isFunction(h)) { o.oneditfunc = h } if ($.isFunction(j)) { o.successfunc = j } if (k !== undefined) { o.url = k } if (l !== undefined) { o.extraparam = l } if ($.isFunction(m)) { o.aftersavefunc = m } if ($.isFunction(n)) { o.errorfunc = n } if ($.isFunction(p)) { o.afterrestorefunc = p } } o = $.extend(true, { keys: false, oneditfunc: null, successfunc: null, url: null, extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: true, mtype: "POST" }, $.jgrid.inlineEdit, o); return this.each(function () { var d = this, nm, tmp, editable, cnt = 0, focus = null, svr = {}, ind, cm, bfer; if (!d.grid) { return } ind = $(d).jqGrid("getInd", f, true); if (ind === false) { return } bfer = $.isFunction(o.beforeEditRow) ? o.beforeEditRow.call(d, o, f) : undefined; if (bfer === undefined) { bfer = true } if (!bfer) { return } editable = $(ind).attr("editable") || "0"; if (editable === "0" && !$(ind).hasClass("not-editable-row")) { cm = d.p.colModel; $('td[role="gridcell"]', ind).each(function (i) { nm = cm[i].name; var a = d.p.treeGrid === true && nm === d.p.ExpandColumn; if (a) { tmp = $("span:first", this).html() } else { try { tmp = $.unformat.call(d, this, { rowId: f, colModel: cm[i] }, i) } catch (_) { tmp = (cm[i].edittype && cm[i].edittype === 'textarea') ? $(this).text() : $(this).html() } } if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') { if (d.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp) } svr[nm] = tmp; if (cm[i].editable === true) { if (focus === null) { focus = i } if (a) { $("span:first", this).html("") } else { $(this).html("") } var b = $.extend({}, cm[i].editoptions || {}, { id: f + "_" + nm, name: nm }); if (!cm[i].edittype) { cm[i].edittype = "text" } if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) { tmp = '' } var c = $.jgrid.createEl.call(d, cm[i].edittype, b, tmp, true, $.extend({}, $.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {})); $(c).addClass("editable"); if (a) { $("span:first", this).append(c) } else { $(this).append(c) } $.jgrid.bindEv.call(d, c, b); if (cm[i].edittype === "select" && cm[i].editoptions !== undefined && cm[i].editoptions.multiple === true && cm[i].editoptions.dataUrl === undefined && $.jgrid.msie) { $(c).width($(c).width()) } cnt++ } } }); if (cnt > 0) { svr.id = f; d.p.savedRow.push(svr); $(ind).attr("editable", "1"); setTimeout(function () { $("td:eq(" + focus + ") input", ind).focus() }, 0); if (o.keys === true) { $(ind).bind("keydown", function (e) { if (e.keyCode === 27) { $(d).jqGrid("restoreRow", f, o.afterrestorefunc); if (d.p._inlinenav) { try { $(d).jqGrid('showAddEditButtons') } catch (eer1) { } } return false } if (e.keyCode === 13) { var a = e.target; if (a.tagName === 'TEXTAREA') { return true } if ($(d).jqGrid("saveRow", f, o)) { if (d.p._inlinenav) { try { $(d).jqGrid('showAddEditButtons') } catch (eer2) { } } } return false } }) } $(d).triggerHandler("jqGridInlineEditRow", [f, o]); if ($.isFunction(o.oneditfunc)) { o.oneditfunc.call(d, f) } } } }) }, saveRow: function (f, g, h, j, l, m, p) { var q = $.makeArray(arguments).slice(1), o = {}; if ($.type(q[0]) === "object") { o = q[0] } else { if ($.isFunction(g)) { o.successfunc = g } if (h !== undefined) { o.url = h } if (j !== undefined) { o.extraparam = j } if ($.isFunction(l)) { o.aftersavefunc = l } if ($.isFunction(m)) { o.errorfunc = m } if ($.isFunction(p)) { o.afterrestorefunc = p } } o = $.extend(true, { successfunc: null, url: null, extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: true, mtype: "POST" }, $.jgrid.inlineEdit, o); var r = false; var s = this[0], nm, tmp = {}, tmp2 = {}, tmp3 = {}, editable, fr, cv, ind; if (!s.grid) { return r } ind = $(s).jqGrid("getInd", f, true); if (ind === false) { return r } var t = $.isFunction(o.beforeSaveRow) ? o.beforeSaveRow.call(s, o, f) : undefined; if (t === undefined) { t = true } if (!t) { return } editable = $(ind).attr("editable"); o.url = o.url || s.p.editurl; if (editable === "1") { var u; $('td[role="gridcell"]', ind).each(function (i) { u = s.p.colModel[i]; nm = u.name; if (nm !== 'cb' && nm !== 'subgrid' && u.editable === true && nm !== 'rn' && !$(this).hasClass('not-editable-cell')) { switch (u.edittype) { case "checkbox": var b = ["Yes", "No"]; if (u.editoptions) { b = u.editoptions.value.split(":") } tmp[nm] = $("input", this).is(":checked") ? b[0] : b[1]; break; case 'text': case 'password': case 'textarea': case "button": tmp[nm] = $("input, textarea", this).val(); break; case 'select': if (!u.editoptions.multiple) { tmp[nm] = $("select option:selected", this).val(); tmp2[nm] = $("select option:selected", this).text() } else { var c = $("select", this), selectedText = []; tmp[nm] = $(c).val(); if (tmp[nm]) { tmp[nm] = tmp[nm].join(",") } else { tmp[nm] = "" } $("select option:selected", this).each(function (i, a) { selectedText[i] = $(a).text() }); tmp2[nm] = selectedText.join(",") } if (u.formatter && u.formatter === 'select') { tmp2 = {} } break; case 'custom': try { if (u.editoptions && $.isFunction(u.editoptions.custom_value)) { tmp[nm] = u.editoptions.custom_value.call(s, $(".customelement", this), 'get'); if (tmp[nm] === undefined) { throw "e2"; } } else { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose) } if (e === "e2") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose) } } break } cv = $.jgrid.checkValues.call(s, tmp[nm], i); if (cv[0] === false) { return false } if (s.p.autoencode) { tmp[nm] = $.jgrid.htmlEncode(tmp[nm]) } if (o.url !== 'clientArray' && u.editoptions && u.editoptions.NullIfEmpty === true) { if (tmp[nm] === "") { tmp3[nm] = 'null' } } } }); if (cv[0] === false) { try { var w = $(s).jqGrid('getGridRowById', f), positions = $.jgrid.findPos(w); $.jgrid.info_dialog($.jgrid.errors.errcap, cv[1], $.jgrid.edit.bClose, { left: positions[0], top: positions[1] + $(w).outerHeight() }) } catch (e) { alert(cv[1]) } return r } var x, opers = s.p.prmNames, oldRowId = f; if (s.p.keyIndex === false) { x = opers.id } else { x = s.p.colModel[s.p.keyIndex + (s.p.rownumbers === true ? 1 : 0) + (s.p.multiselect === true ? 1 : 0) + (s.p.subGrid === true ? 1 : 0)].name } if (tmp) { tmp[opers.oper] = opers.editoper; if (tmp[x] === undefined || tmp[x] === "") { tmp[x] = f } else if (ind.id !== s.p.idPrefix + tmp[x]) { var y = $.jgrid.stripPref(s.p.idPrefix, f); if (s.p._index[y] !== undefined) { s.p._index[tmp[x]] = s.p._index[y]; delete s.p._index[y] } f = s.p.idPrefix + tmp[x]; $(ind).attr("id", f); if (s.p.selrow === oldRowId) { s.p.selrow = f } if ($.isArray(s.p.selarrrow)) { var i = $.inArray(oldRowId, s.p.selarrrow); if (i >= 0) { s.p.selarrrow[i] = f } } if (s.p.multiselect) { var z = "jqg_" + s.p.id + "_" + f; $("input.cbox", ind).attr("id", z).attr("name", z) } } if (s.p.inlineData === undefined) { s.p.inlineData = {} } tmp = $.extend({}, tmp, s.p.inlineData, o.extraparam) } if (o.url === 'clientArray') { tmp = $.extend({}, tmp, tmp2); if (s.p.autoencode) { $.each(tmp, function (n, v) { tmp[n] = $.jgrid.htmlDecode(v) }) } var k, resp = $(s).jqGrid("setRowData", f, tmp); $(ind).attr("editable", "0"); for (k = 0; k < s.p.savedRow.length; k++) { if (String(s.p.savedRow[k].id) === String(oldRowId)) { fr = k; break } } if (fr >= 0) { s.p.savedRow.splice(fr, 1) } $(s).triggerHandler("jqGridInlineAfterSaveRow", [f, resp, tmp, o]); if ($.isFunction(o.aftersavefunc)) { o.aftersavefunc.call(s, f, resp, o) } r = true; $(ind).removeClass("jqgrid-new-row").unbind("keydown") } else { $("#lui_" + $.jgrid.jqID(s.p.id)).show(); tmp3 = $.extend({}, tmp, tmp3); tmp3[x] = $.jgrid.stripPref(s.p.idPrefix, tmp3[x]); $.ajax($.extend({ url: o.url, data: $.isFunction(s.p.serializeRowData) ? s.p.serializeRowData.call(s, tmp3) : tmp3, type: o.mtype, async: false, complete: function (a, b) { $("#lui_" + $.jgrid.jqID(s.p.id)).hide(); if (b === "success") { var c = true, sucret, k; sucret = $(s).triggerHandler("jqGridInlineSuccessSaveRow", [a, f, o]); if (!$.isArray(sucret)) { sucret = [true, tmp] } if (sucret[0] && $.isFunction(o.successfunc)) { sucret = o.successfunc.call(s, a) } if ($.isArray(sucret)) { c = sucret[0]; tmp = sucret[1] || tmp } else { c = sucret } if (c === true) { if (s.p.autoencode) { $.each(tmp, function (n, v) { tmp[n] = $.jgrid.htmlDecode(v) }) } tmp = $.extend({}, tmp, tmp2); $(s).jqGrid("setRowData", f, tmp); $(ind).attr("editable", "0"); for (k = 0; k < s.p.savedRow.length; k++) { if (String(s.p.savedRow[k].id) === String(f)) { fr = k; break } } if (fr >= 0) { s.p.savedRow.splice(fr, 1) } $(s).triggerHandler("jqGridInlineAfterSaveRow", [f, a, tmp, o]); if ($.isFunction(o.aftersavefunc)) { o.aftersavefunc.call(s, f, a) } r = true; $(ind).removeClass("jqgrid-new-row").unbind("keydown") } else { $(s).triggerHandler("jqGridInlineErrorSaveRow", [f, a, b, null, o]); if ($.isFunction(o.errorfunc)) { o.errorfunc.call(s, f, a, b, null) } if (o.restoreAfterError === true) { $(s).jqGrid("restoreRow", f, o.afterrestorefunc) } } } }, error: function (a, b, c) { $("#lui_" + $.jgrid.jqID(s.p.id)).hide(); $(s).triggerHandler("jqGridInlineErrorSaveRow", [f, a, b, c, o]); if ($.isFunction(o.errorfunc)) { o.errorfunc.call(s, f, a, b, c) } else { var d = a.responseText || a.statusText; try { $.jgrid.info_dialog($.jgrid.errors.errcap, '<div class="ui-state-error">' + d + '</div>', $.jgrid.edit.bClose, { buttonalign: 'right' }) } catch (e) { alert(d) } } if (o.restoreAfterError === true) { $(s).jqGrid("restoreRow", f, o.afterrestorefunc) } } }, $.jgrid.ajaxOptions, s.p.ajaxRowOptions || {})) } } return r }, restoreRow: function (c, d) { var f = $.makeArray(arguments).slice(1), o = {}; if ($.type(f[0]) === "object") { o = f[0] } else { if ($.isFunction(d)) { o.afterrestorefunc = d } } o = $.extend(true, {}, $.jgrid.inlineEdit, o); return this.each(function () { var a = this, fr = -1, ind, ares = {}, k; if (!a.grid) { return } ind = $(a).jqGrid("getInd", c, true); if (ind === false) { return } var b = $.isFunction(o.beforeCancelRow) ? o.beforeCancelRow.call(a, o, sr) : undefined; if (b === undefined) { b = true } if (!b) { return } for (k = 0; k < a.p.savedRow.length; k++) { if (String(a.p.savedRow[k].id) === String(c)) { fr = k; break } } if (fr >= 0) { if ($.isFunction($.fn.datepicker)) { try { $("input.hasDatepicker", "#" + $.jgrid.jqID(ind.id)).datepicker('hide') } catch (e) { } } $.each(a.p.colModel, function () { if (this.editable === true && a.p.savedRow[fr].hasOwnProperty(this.name)) { ares[this.name] = a.p.savedRow[fr][this.name] } }); $(a).jqGrid("setRowData", c, ares); $(ind).attr("editable", "0").unbind("keydown"); a.p.savedRow.splice(fr, 1); if ($("#" + $.jgrid.jqID(c), "#" + $.jgrid.jqID(a.p.id)).hasClass("jqgrid-new-row")) { setTimeout(function () { $(a).jqGrid("delRowData", c); $(a).jqGrid('showAddEditButtons') }, 0) } } $(a).triggerHandler("jqGridInlineAfterRestoreRow", [c]); if ($.isFunction(o.afterrestorefunc)) { o.afterrestorefunc.call(a, c) } }) }, addRow: function (p) { p = $.extend(true, { rowID: null, initdata: {}, position: "first", useDefValues: true, useFormatter: false, addRowParams: { extraparam: {}} }, p || {}); return this.each(function () { if (!this.grid) { return } var b = this; var c = $.isFunction(p.beforeAddRow) ? p.beforeAddRow.call(b, p.addRowParams) : undefined; if (c === undefined) { c = true } if (!c) { return } p.rowID = $.isFunction(p.rowID) ? p.rowID.call(b, p) : ((p.rowID != null) ? p.rowID : $.jgrid.randId()); if (p.useDefValues === true) { $(b.p.colModel).each(function () { if (this.editoptions && this.editoptions.defaultValue) { var a = this.editoptions.defaultValue, tmp = $.isFunction(a) ? a.call(b) : a; p.initdata[this.name] = tmp } }) } $(b).jqGrid('addRowData', p.rowID, p.initdata, p.position); p.rowID = b.p.idPrefix + p.rowID; $("#" + $.jgrid.jqID(p.rowID), "#" + $.jgrid.jqID(b.p.id)).addClass("jqgrid-new-row"); if (p.useFormatter) { $("#" + $.jgrid.jqID(p.rowID) + " .ui-inline-edit", "#" + $.jgrid.jqID(b.p.id)).click() } else { var d = b.p.prmNames, oper = d.oper; p.addRowParams.extraparam[oper] = d.addoper; $(b).jqGrid('editRow', p.rowID, p.addRowParams); $(b).jqGrid('setSelection', p.rowID) } }) }, inlineNav: function (g, o) { o = $.extend(true, { edit: true, editicon: "ui-icon-pencil", add: true, addicon: "ui-icon-plus", save: true, saveicon: "ui-icon-disk", cancel: true, cancelicon: "ui-icon-cancel", addParams: { addRowParams: { extraparam: {}} }, editParams: {}, restoreAfterSelect: true }, $.jgrid.nav, o || {}); return this.each(function () { if (!this.grid) { return } var d = this, onSelect, gID = $.jgrid.jqID(d.p.id); d.p._inlinenav = true; if (o.addParams.useFormatter === true) { var e = d.p.colModel, i; for (i = 0; i < e.length; i++) { if (e[i].formatter && e[i].formatter === "actions") { if (e[i].formatoptions) { var f = { keys: false, onEdit: null, onSuccess: null, afterSave: null, onError: null, afterRestore: null, extraparam: {}, url: null }, ap = $.extend(f, e[i].formatoptions); o.addParams.addRowParams = { "keys": ap.keys, "oneditfunc": ap.onEdit, "successfunc": ap.onSuccess, "url": ap.url, "extraparam": ap.extraparam, "aftersavefunc": ap.afterSave, "errorfunc": ap.onError, "afterrestorefunc": ap.afterRestore} } break } } } if (o.add) { $(d).jqGrid('navButtonAdd', g, { caption: o.addtext, title: o.addtitle, buttonicon: o.addicon, id: d.p.id + "_iladd", onClickButton: function () { $(d).jqGrid('addRow', o.addParams); if (!o.addParams.useFormatter) { $("#" + gID + "_ilsave").removeClass('ui-state-disabled'); $("#" + gID + "_ilcancel").removeClass('ui-state-disabled'); $("#" + gID + "_iladd").addClass('ui-state-disabled'); $("#" + gID + "_iledit").addClass('ui-state-disabled') } } }) } if (o.edit) { $(d).jqGrid('navButtonAdd', g, { caption: o.edittext, title: o.edittitle, buttonicon: o.editicon, id: d.p.id + "_iledit", onClickButton: function () { var a = $(d).jqGrid('getGridParam', 'selrow'); if (a) { $(d).jqGrid('editRow', a, o.editParams); $("#" + gID + "_ilsave").removeClass('ui-state-disabled'); $("#" + gID + "_ilcancel").removeClass('ui-state-disabled'); $("#" + gID + "_iladd").addClass('ui-state-disabled'); $("#" + gID + "_iledit").addClass('ui-state-disabled') } else { $.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + gID, jqm: true }); $("#jqg_alrt").focus() } } }) } if (o.save) { $(d).jqGrid('navButtonAdd', g, { caption: o.savetext || '', title: o.savetitle || 'Save row', buttonicon: o.saveicon, id: d.p.id + "_ilsave", onClickButton: function () { var a = d.p.savedRow[0].id; if (a) { var b = d.p.prmNames, oper = b.oper, tmpParams = o.editParams; if ($("#" + $.jgrid.jqID(a), "#" + gID).hasClass("jqgrid-new-row")) { o.addParams.addRowParams.extraparam[oper] = b.addoper; tmpParams = o.addParams.addRowParams } else { if (!o.editParams.extraparam) { o.editParams.extraparam = {} } o.editParams.extraparam[oper] = b.editoper } if ($(d).jqGrid('saveRow', a, tmpParams)) { $(d).jqGrid('showAddEditButtons') } } else { $.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + gID, jqm: true }); $("#jqg_alrt").focus() } } }); $("#" + gID + "_ilsave").addClass('ui-state-disabled') } if (o.cancel) { $(d).jqGrid('navButtonAdd', g, { caption: o.canceltext || '', title: o.canceltitle || 'Cancel row editing', buttonicon: o.cancelicon, id: d.p.id + "_ilcancel", onClickButton: function () { var a = d.p.savedRow[0].id, cancelPrm = o.editParams; if (a) { if ($("#" + $.jgrid.jqID(a), "#" + gID).hasClass("jqgrid-new-row")) { cancelPrm = o.addParams.addRowParams } $(d).jqGrid('restoreRow', a, cancelPrm); $(d).jqGrid('showAddEditButtons') } else { $.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + gID, jqm: true }); $("#jqg_alrt").focus() } } }); $("#" + gID + "_ilcancel").addClass('ui-state-disabled') } if (o.restoreAfterSelect === true) { if ($.isFunction(d.p.beforeSelectRow)) { onSelect = d.p.beforeSelectRow } else { onSelect = false } d.p.beforeSelectRow = function (a, b) { var c = true; if (d.p.savedRow.length > 0 && d.p._inlinenav === true && (a !== d.p.selrow && d.p.selrow !== null)) { if (d.p.selrow === o.addParams.rowID) { $(d).jqGrid('delRowData', d.p.selrow) } else { $(d).jqGrid('restoreRow', d.p.selrow, o.editParams) } $(d).jqGrid('showAddEditButtons') } if (onSelect) { c = onSelect.call(d, a, b) } return c } } }) }, showAddEditButtons: function () { return this.each(function () { if (!this.grid) { return } var a = $.jgrid.jqID(this.p.id); $("#" + a + "_ilsave").addClass('ui-state-disabled'); $("#" + a + "_ilcancel").addClass('ui-state-disabled'); $("#" + a + "_iladd").removeClass('ui-state-disabled'); $("#" + a + "_iledit").removeClass('ui-state-disabled') }) } }) })(jQuery); (function ($) { "use strict"; $.jgrid.extend({ editCell: function (f, g, h) { return this.each(function () { var a = this, nm, tmp, cc, cm; if (!a.grid || a.p.cellEdit !== true) { return } g = parseInt(g, 10); a.p.selrow = a.rows[f].id; if (!a.p.knv) { $(a).jqGrid("GridNav") } if (a.p.savedRow.length > 0) { if (h === true) { if (f == a.p.iRow && g == a.p.iCol) { return } } $(a).jqGrid("saveCell", a.p.savedRow[0].id, a.p.savedRow[0].ic) } else { window.setTimeout(function () { $("#" + $.jgrid.jqID(a.p.knv)).attr("tabindex", "-1").focus() }, 0) } cm = a.p.colModel[g]; nm = cm.name; if (nm === 'subgrid' || nm === 'cb' || nm === 'rn') { return } cc = $("td:eq(" + g + ")", a.rows[f]); if (cm.editable === true && h === true && !cc.hasClass("not-editable-cell")) { if (parseInt(a.p.iCol, 10) >= 0 && parseInt(a.p.iRow, 10) >= 0) { $("td:eq(" + a.p.iCol + ")", a.rows[a.p.iRow]).removeClass("edit-cell ui-state-highlight"); $(a.rows[a.p.iRow]).removeClass("selected-row ui-state-hover") } $(cc).addClass("edit-cell ui-state-highlight"); $(a.rows[f]).addClass("selected-row ui-state-hover"); try { tmp = $.unformat.call(a, cc, { rowId: a.rows[f].id, colModel: cm }, g) } catch (_) { tmp = (cm.edittype && cm.edittype === 'textarea') ? $(cc).text() : $(cc).html() } if (a.p.autoencode) { tmp = $.jgrid.htmlDecode(tmp) } if (!cm.edittype) { cm.edittype = "text" } a.p.savedRow.push({ id: f, ic: g, name: nm, v: tmp }); if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) { tmp = '' } if ($.isFunction(a.p.formatCell)) { var b = a.p.formatCell.call(a, a.rows[f].id, nm, tmp, f, g); if (b !== undefined) { tmp = b } } $(a).triggerHandler("jqGridBeforeEditCell", [a.rows[f].id, nm, tmp, f, g]); if ($.isFunction(a.p.beforeEditCell)) { a.p.beforeEditCell.call(a, a.rows[f].id, nm, tmp, f, g) } var c = $.extend({}, cm.editoptions || {}, { id: f + "_" + nm, name: nm }); var d = $.jgrid.createEl.call(a, cm.edittype, c, tmp, true, $.extend({}, $.jgrid.ajaxOptions, a.p.ajaxSelectOptions || {})); $(cc).html("").append(d).attr("tabindex", "0"); $.jgrid.bindEv.call(a, d, c); window.setTimeout(function () { $(d).focus() }, 0); $("input, select, textarea", cc).bind("keydown", function (e) { if (e.keyCode === 27) { if ($("input.hasDatepicker", cc).length > 0) { if ($(".ui-datepicker").is(":hidden")) { $(a).jqGrid("restoreCell", f, g) } else { $("input.hasDatepicker", cc).datepicker('hide') } } else { $(a).jqGrid("restoreCell", f, g) } } if (e.keyCode === 13) { $(a).jqGrid("saveCell", f, g); return false } if (e.keyCode === 9) { if (!a.grid.hDiv.loading) { if (e.shiftKey) { $(a).jqGrid("prevCell", f, g) } else { $(a).jqGrid("nextCell", f, g) } } else { return false } } e.stopPropagation() }); $(a).triggerHandler("jqGridAfterEditCell", [a.rows[f].id, nm, tmp, f, g]); if ($.isFunction(a.p.afterEditCell)) { a.p.afterEditCell.call(a, a.rows[f].id, nm, tmp, f, g) } } else { if (parseInt(a.p.iCol, 10) >= 0 && parseInt(a.p.iRow, 10) >= 0) { $("td:eq(" + a.p.iCol + ")", a.rows[a.p.iRow]).removeClass("edit-cell ui-state-highlight"); $(a.rows[a.p.iRow]).removeClass("selected-row ui-state-hover") } cc.addClass("edit-cell ui-state-highlight"); $(a.rows[f]).addClass("selected-row ui-state-hover"); tmp = cc.html().replace(/\&#160\;/ig, ''); $(a).triggerHandler("jqGridSelectCell", [a.rows[f].id, nm, tmp, f, g]); if ($.isFunction(a.p.onSelectCell)) { a.p.onSelectCell.call(a, a.rows[f].id, nm, tmp, f, g) } } a.p.iCol = g; a.p.iRow = f }) }, saveCell: function (p, q) { return this.each(function () { var d = this, fr; if (!d.grid || d.p.cellEdit !== true) { return } if (d.p.savedRow.length >= 1) { fr = 0 } else { fr = null } if (fr !== null) { var f = $("td:eq(" + q + ")", d.rows[p]), v, v2, cm = d.p.colModel[q], nm = cm.name, nmjq = $.jgrid.jqID(nm); switch (cm.edittype) { case "select": if (!cm.editoptions.multiple) { v = $("#" + p + "_" + nmjq + " option:selected", d.rows[p]).val(); v2 = $("#" + p + "_" + nmjq + " option:selected", d.rows[p]).text() } else { var g = $("#" + p + "_" + nmjq, d.rows[p]), selectedText = []; v = $(g).val(); if (v) { v.join(",") } else { v = "" } $("option:selected", g).each(function (i, a) { selectedText[i] = $(a).text() }); v2 = selectedText.join(",") } if (cm.formatter) { v2 = v } break; case "checkbox": var h = ["Yes", "No"]; if (cm.editoptions) { h = cm.editoptions.value.split(":") } v = $("#" + p + "_" + nmjq, d.rows[p]).is(":checked") ? h[0] : h[1]; v2 = v; break; case "password": case "text": case "textarea": case "button": v = $("#" + p + "_" + nmjq, d.rows[p]).val(); v2 = v; break; case 'custom': try { if (cm.editoptions && $.isFunction(cm.editoptions.custom_value)) { v = cm.editoptions.custom_value.call(d, $(".customelement", f), 'get'); if (v === undefined) { throw "e2"; } else { v2 = v } } else { throw "e1"; } } catch (e) { if (e === "e1") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose) } if (e === "e2") { $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose) } } break } if (v2 !== d.p.savedRow[fr].v) { var j = $(d).triggerHandler("jqGridBeforeSaveCell", [d.rows[p].id, nm, v, p, q]); if (j) { v = j; v2 = j } if ($.isFunction(d.p.beforeSaveCell)) { var k = d.p.beforeSaveCell.call(d, d.rows[p].id, nm, v, p, q); if (k) { v = k; v2 = k } } var l = $.jgrid.checkValues.call(d, v, q); if (l[0] === true) { var m = $(d).triggerHandler("jqGridBeforeSubmitCell", [d.rows[p].id, nm, v, p, q]) || {}; if ($.isFunction(d.p.beforeSubmitCell)) { m = d.p.beforeSubmitCell.call(d, d.rows[p].id, nm, v, p, q); if (!m) { m = {} } } if ($("input.hasDatepicker", f).length > 0) { $("input.hasDatepicker", f).datepicker('hide') } if (d.p.cellsubmit === 'remote') { if (d.p.cellurl) { var n = {}; if (d.p.autoencode) { v = $.jgrid.htmlEncode(v) } n[nm] = v; var o, oper, opers; opers = d.p.prmNames; o = opers.id; oper = opers.oper; n[o] = $.jgrid.stripPref(d.p.idPrefix, d.rows[p].id); n[oper] = opers.editoper; n = $.extend(m, n); $("#lui_" + $.jgrid.jqID(d.p.id)).show(); d.grid.hDiv.loading = true; $.ajax($.extend({ url: d.p.cellurl, data: $.isFunction(d.p.serializeCellData) ? d.p.serializeCellData.call(d, n) : n, type: "POST", complete: function (a, b) { $("#lui_" + d.p.id).hide(); d.grid.hDiv.loading = false; if (b === 'success') { var c = $(d).triggerHandler("jqGridAfterSubmitCell", [d, a, n.id, nm, v, p, q]) || [true, '']; if (c[0] === true && $.isFunction(d.p.afterSubmitCell)) { c = d.p.afterSubmitCell.call(d, a, n.id, nm, v, p, q) } if (c[0] === true) { $(f).empty(); $(d).jqGrid("setCell", d.rows[p].id, q, v2, false, false, true); $(f).addClass("dirty-cell"); $(d.rows[p]).addClass("edited"); $(d).triggerHandler("jqGridAfterSaveCell", [d.rows[p].id, nm, v, p, q]); if ($.isFunction(d.p.afterSaveCell)) { d.p.afterSaveCell.call(d, d.rows[p].id, nm, v, p, q) } d.p.savedRow.splice(0, 1) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, c[1], $.jgrid.edit.bClose); $(d).jqGrid("restoreCell", p, q) } } }, error: function (a, b, c) { $("#lui_" + $.jgrid.jqID(d.p.id)).hide(); d.grid.hDiv.loading = false; $(d).triggerHandler("jqGridErrorCell", [a, b, c]); if ($.isFunction(d.p.errorCell)) { d.p.errorCell.call(d, a, b, c); $(d).jqGrid("restoreCell", p, q) } else { $.jgrid.info_dialog($.jgrid.errors.errcap, a.status + " : " + a.statusText + "<br/>" + b, $.jgrid.edit.bClose); $(d).jqGrid("restoreCell", p, q) } } }, $.jgrid.ajaxOptions, d.p.ajaxCellOptions || {})) } else { try { $.jgrid.info_dialog($.jgrid.errors.errcap, $.jgrid.errors.nourl, $.jgrid.edit.bClose); $(d).jqGrid("restoreCell", p, q) } catch (e) { } } } if (d.p.cellsubmit === 'clientArray') { $(f).empty(); $(d).jqGrid("setCell", d.rows[p].id, q, v2, false, false, true); $(f).addClass("dirty-cell"); $(d.rows[p]).addClass("edited"); $(d).triggerHandler("jqGridAfterSaveCell", [d.rows[p].id, nm, v, p, q]); if ($.isFunction(d.p.afterSaveCell)) { d.p.afterSaveCell.call(d, d.rows[p].id, nm, v, p, q) } d.p.savedRow.splice(0, 1) } } else { try { window.setTimeout(function () { $.jgrid.info_dialog($.jgrid.errors.errcap, v + " " + l[1], $.jgrid.edit.bClose) }, 100); $(d).jqGrid("restoreCell", p, q) } catch (e) { } } } else { $(d).jqGrid("restoreCell", p, q) } } window.setTimeout(function () { $("#" + $.jgrid.jqID(d.p.knv)).attr("tabindex", "-1").focus() }, 0) }) }, restoreCell: function (c, d) { return this.each(function () { var a = this, fr; if (!a.grid || a.p.cellEdit !== true) { return } if (a.p.savedRow.length >= 1) { fr = 0 } else { fr = null } if (fr !== null) { var b = $("td:eq(" + d + ")", a.rows[c]); if ($.isFunction($.fn.datepicker)) { try { $("input.hasDatepicker", b).datepicker('hide') } catch (e) { } } $(b).empty().attr("tabindex", "-1"); $(a).jqGrid("setCell", a.rows[c].id, d, a.p.savedRow[fr].v, false, false, true); $(a).triggerHandler("jqGridAfterRestoreCell", [a.rows[c].id, a.p.savedRow[fr].v, c, d]); if ($.isFunction(a.p.afterRestoreCell)) { a.p.afterRestoreCell.call(a, a.rows[c].id, a.p.savedRow[fr].v, c, d) } a.p.savedRow.splice(0, 1) } window.setTimeout(function () { $("#" + a.p.knv).attr("tabindex", "-1").focus() }, 0) }) }, nextCell: function (b, c) { return this.each(function () { var a = this, nCol = false, i; if (!a.grid || a.p.cellEdit !== true) { return } for (i = c + 1; i < a.p.colModel.length; i++) { if (a.p.colModel[i].editable === true) { nCol = i; break } } if (nCol !== false) { $(a).jqGrid("editCell", b, nCol, true) } else { if (a.p.savedRow.length > 0) { $(a).jqGrid("saveCell", b, c) } } }) }, prevCell: function (b, c) { return this.each(function () { var a = this, nCol = false, i; if (!a.grid || a.p.cellEdit !== true) { return } for (i = c - 1; i >= 0; i--) { if (a.p.colModel[i].editable === true) { nCol = i; break } } if (nCol !== false) { $(a).jqGrid("editCell", b, nCol, true) } else { if (a.p.savedRow.length > 0) { $(a).jqGrid("saveCell", b, c) } } }) }, GridNav: function () { return this.each(function () { var f = this; if (!f.grid || f.p.cellEdit !== true) { return } f.p.knv = f.p.id + "_kn"; var g = $("<div style='position:fixed;top:0px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='" + f.p.knv + "'></div></div>"), i, kdir; function scrollGrid(a, b, c) { if (c.substr(0, 1) === 'v') { var d = $(f.grid.bDiv)[0].clientHeight, st = $(f.grid.bDiv)[0].scrollTop, nROT = f.rows[a].offsetTop + f.rows[a].clientHeight, pROT = f.rows[a].offsetTop; if (c === 'vd') { if (nROT >= d) { $(f.grid.bDiv)[0].scrollTop = $(f.grid.bDiv)[0].scrollTop + f.rows[a].clientHeight } } if (c === 'vu') { if (pROT < st) { $(f.grid.bDiv)[0].scrollTop = $(f.grid.bDiv)[0].scrollTop - f.rows[a].clientHeight } } } if (c === 'h') { var e = $(f.grid.bDiv)[0].clientWidth, sl = $(f.grid.bDiv)[0].scrollLeft, nCOL = f.rows[a].cells[b].offsetLeft + f.rows[a].cells[b].clientWidth, pCOL = f.rows[a].cells[b].offsetLeft; if (nCOL >= e + parseInt(sl, 10)) { $(f.grid.bDiv)[0].scrollLeft = $(f.grid.bDiv)[0].scrollLeft + f.rows[a].cells[b].clientWidth } else if (pCOL < sl) { $(f.grid.bDiv)[0].scrollLeft = $(f.grid.bDiv)[0].scrollLeft - f.rows[a].cells[b].clientWidth } } } function findNextVisible(a, b) { var c, i; if (b === 'lft') { c = a + 1; for (i = a; i >= 0; i--) { if (f.p.colModel[i].hidden !== true) { c = i; break } } } if (b === 'rgt') { c = a - 1; for (i = a; i < f.p.colModel.length; i++) { if (f.p.colModel[i].hidden !== true) { c = i; break } } } return c } $(g).insertBefore(f.grid.cDiv); $("#" + f.p.knv).focus().keydown(function (e) { kdir = e.keyCode; if (f.p.direction === "rtl") { if (kdir === 37) { kdir = 39 } else if (kdir === 39) { kdir = 37 } } switch (kdir) { case 38: if (f.p.iRow - 1 > 0) { scrollGrid(f.p.iRow - 1, f.p.iCol, 'vu'); $(f).jqGrid("editCell", f.p.iRow - 1, f.p.iCol, false) } break; case 40: if (f.p.iRow + 1 <= f.rows.length - 1) { scrollGrid(f.p.iRow + 1, f.p.iCol, 'vd'); $(f).jqGrid("editCell", f.p.iRow + 1, f.p.iCol, false) } break; case 37: if (f.p.iCol - 1 >= 0) { i = findNextVisible(f.p.iCol - 1, 'lft'); scrollGrid(f.p.iRow, i, 'h'); $(f).jqGrid("editCell", f.p.iRow, i, false) } break; case 39: if (f.p.iCol + 1 <= f.p.colModel.length - 1) { i = findNextVisible(f.p.iCol + 1, 'rgt'); scrollGrid(f.p.iRow, i, 'h'); $(f).jqGrid("editCell", f.p.iRow, i, false) } break; case 13: if (parseInt(f.p.iCol, 10) >= 0 && parseInt(f.p.iRow, 10) >= 0) { $(f).jqGrid("editCell", f.p.iRow, f.p.iCol, true) } break; default: return true } return false }) }) }, getChangedCells: function (c) { var d = []; if (!c) { c = 'all' } this.each(function () { var b = this, nm; if (!b.grid || b.p.cellEdit !== true) { return } $(b.rows).each(function (j) { var a = {}; if ($(this).hasClass("edited")) { $('td', this).each(function (i) { nm = b.p.colModel[i].name; if (nm !== 'cb' && nm !== 'subgrid') { if (c === 'dirty') { if ($(this).hasClass('dirty-cell')) { try { a[nm] = $.unformat.call(b, this, { rowId: b.rows[j].id, colModel: b.p.colModel[i] }, i) } catch (e) { a[nm] = $.jgrid.htmlDecode($(this).html()) } } } else { try { a[nm] = $.unformat.call(b, this, { rowId: b.rows[j].id, colModel: b.p.colModel[i] }, i) } catch (e) { a[nm] = $.jgrid.htmlDecode($(this).html()) } } } }); a.id = this.id; d.push(a) } }) }); return d } }) })(jQuery); (function ($) { "use strict"; $.jgrid.extend({ setSubGrid: function () { return this.each(function () { var a = this, cm, i, suboptions = { plusicon: "ui-icon-plus", minusicon: "ui-icon-minus", openicon: "ui-icon-carat-1-sw", expandOnLoad: false, delayOnLoad: 50, selectOnExpand: false, selectOnCollapse: false, reloadOnExpand: true }; a.p.subGridOptions = $.extend(suboptions, a.p.subGridOptions || {}); a.p.colNames.unshift(""); a.p.colModel.unshift({ name: 'subgrid', width: $.jgrid.cell_width ? a.p.subGridWidth + a.p.cellLayout : a.p.subGridWidth, sortable: false, resizable: false, hidedlg: true, search: false, fixed: true }); cm = a.p.subGridModel; if (cm[0]) { cm[0].align = $.extend([], cm[0].align || []); for (i = 0; i < cm[0].name.length; i++) { cm[0].align[i] = cm[0].align[i] || 'left' } } }) }, addSubGridCell: function (a, b) { var c = '', ic, sid; this.each(function () { c = this.formatCol(a, b); sid = this.p.id; ic = this.p.subGridOptions.plusicon }); return "<td role=\"gridcell\" aria-describedby=\"" + sid + "_subgrid\" class=\"ui-sgcollapsed sgcollapsed\" " + c + "><a style='cursor:pointer;'><span class='ui-icon " + ic + "'></span></a></td>" }, addSubGrid: function (o, p) { return this.each(function () { var e = this; if (!e.grid) { return } var g = function (a, b, c) { var d = $("<td align='" + e.p.subGridModel[0].align[c] + "'></td>").html(b); $(a).append(d) }; var h = function (a, b) { var c, i, sgmap, dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), trdiv = $("<tr></tr>"); for (i = 0; i < e.p.subGridModel[0].name.length; i++) { c = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + e.p.direction + "'></th>"); $(c).html(e.p.subGridModel[0].name[i]); $(c).width(e.p.subGridModel[0].width[i]); $(trdiv).append(c) } $(dummy).append(trdiv); if (a) { sgmap = e.p.xmlReader.subgrid; $(sgmap.root + " " + sgmap.row, a).each(function () { trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>"); if (sgmap.repeatitems === true) { $(sgmap.cell, this).each(function (i) { g(trdiv, $(this).text() || '&#160;', i) }) } else { var f = e.p.subGridModel[0].mapping || e.p.subGridModel[0].name; if (f) { for (i = 0; i < f.length; i++) { g(trdiv, $(f[i], this).text() || '&#160;', i) } } } $(dummy).append(trdiv) }) } var d = $("table:first", e.grid.bDiv).attr("id") + "_"; $("#" + $.jgrid.jqID(d + b)).append(dummy); e.grid.hDiv.loading = false; $("#load_" + $.jgrid.jqID(e.p.id)).hide(); return false }; var k = function (a, b) { var c, result, i, cur, sgmap, j, dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), trdiv = $("<tr></tr>"); for (i = 0; i < e.p.subGridModel[0].name.length; i++) { c = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + e.p.direction + "'></th>"); $(c).html(e.p.subGridModel[0].name[i]); $(c).width(e.p.subGridModel[0].width[i]); $(trdiv).append(c) } $(dummy).append(trdiv); if (a) { sgmap = e.p.jsonReader.subgrid; result = $.jgrid.getAccessor(a, sgmap.root); if (result !== undefined) { for (i = 0; i < result.length; i++) { cur = result[i]; trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>"); if (sgmap.repeatitems === true) { if (sgmap.cell) { cur = cur[sgmap.cell] } for (j = 0; j < cur.length; j++) { g(trdiv, cur[j] || '&#160;', j) } } else { var f = e.p.subGridModel[0].mapping || e.p.subGridModel[0].name; if (f.length) { for (j = 0; j < f.length; j++) { g(trdiv, cur[f[j]] || '&#160;', j) } } } $(dummy).append(trdiv) } } } var d = $("table:first", e.grid.bDiv).attr("id") + "_"; $("#" + $.jgrid.jqID(d + b)).append(dummy); e.grid.hDiv.loading = false; $("#load_" + $.jgrid.jqID(e.p.id)).hide(); return false }; var l = function (b) { var c, dp, i, j; c = $(b).attr("id"); dp = { nd_: (new Date().getTime()) }; dp[e.p.prmNames.subgridid] = c; if (!e.p.subGridModel[0]) { return false } if (e.p.subGridModel[0].params) { for (j = 0; j < e.p.subGridModel[0].params.length; j++) { for (i = 0; i < e.p.colModel.length; i++) { if (e.p.colModel[i].name === e.p.subGridModel[0].params[j]) { dp[e.p.colModel[i].name] = $("td:eq(" + i + ")", b).text().replace(/\&#160\;/ig, '') } } } } if (!e.grid.hDiv.loading) { e.grid.hDiv.loading = true; $("#load_" + $.jgrid.jqID(e.p.id)).show(); if (!e.p.subgridtype) { e.p.subgridtype = e.p.datatype } if ($.isFunction(e.p.subgridtype)) { e.p.subgridtype.call(e, dp) } else { e.p.subgridtype = e.p.subgridtype.toLowerCase() } switch (e.p.subgridtype) { case "xml": case "json": $.ajax($.extend({ type: e.p.mtype, url: e.p.subGridUrl, dataType: e.p.subgridtype, data: $.isFunction(e.p.serializeSubGridData) ? e.p.serializeSubGridData.call(e, dp) : dp, complete: function (a) { if (e.p.subgridtype === "xml") { h(a.responseXML, c) } else { k($.jgrid.parse(a.responseText), c) } a = null } }, $.jgrid.ajaxOptions, e.p.ajaxSubgridOptions || {})); break } } return false }; var m, pID, atd, nhc = 0, bfsc, r; $.each(e.p.colModel, function () { if (this.hidden === true || this.name === 'rn' || this.name === 'cb') { nhc++ } }); var n = e.rows.length, i = 1; if (p !== undefined && p > 0) { i = p; n = p + 1 } while (i < n) { if ($(e.rows[i]).hasClass('jqgrow')) { $(e.rows[i].cells[o]).bind('click', function () { var a = $(this).parent("tr")[0]; r = a.nextSibling; if ($(this).hasClass("sgcollapsed")) { pID = e.p.id; m = a.id; if (e.p.subGridOptions.reloadOnExpand === true || (e.p.subGridOptions.reloadOnExpand === false && !$(r).hasClass('ui-subgrid'))) { atd = o >= 1 ? "<td colspan='" + o + "'>&#160;</td>" : ""; bfsc = $(e).triggerHandler("jqGridSubGridBeforeExpand", [pID + "_" + m, m]); bfsc = (bfsc === false || bfsc === 'stop') ? false : true; if (bfsc && $.isFunction(e.p.subGridBeforeExpand)) { bfsc = e.p.subGridBeforeExpand.call(e, pID + "_" + m, m) } if (bfsc === false) { return false } $(a).after("<tr role='row' class='ui-subgrid'>" + atd + "<td class='ui-widget-content subgrid-cell'><span class='ui-icon " + e.p.subGridOptions.openicon + "'></span></td><td colspan='" + parseInt(e.p.colNames.length - 1 - nhc, 10) + "' class='ui-widget-content subgrid-data'><div id=" + pID + "_" + m + " class='tablediv'></div></td></tr>"); $(e).triggerHandler("jqGridSubGridRowExpanded", [pID + "_" + m, m]); if ($.isFunction(e.p.subGridRowExpanded)) { e.p.subGridRowExpanded.call(e, pID + "_" + m, m) } else { l(a) } } else { $(r).show() } $(this).html("<a style='cursor:pointer;'><span class='ui-icon " + e.p.subGridOptions.minusicon + "'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded"); if (e.p.subGridOptions.selectOnExpand) { $(e).jqGrid('setSelection', m) } } else if ($(this).hasClass("sgexpanded")) { bfsc = $(e).triggerHandler("jqGridSubGridRowColapsed", [pID + "_" + m, m]); bfsc = (bfsc === false || bfsc === 'stop') ? false : true; m = a.id; if (bfsc && $.isFunction(e.p.subGridRowColapsed)) { bfsc = e.p.subGridRowColapsed.call(e, pID + "_" + m, m) } if (bfsc === false) { return false } if (e.p.subGridOptions.reloadOnExpand === true) { $(r).remove(".ui-subgrid") } else if ($(r).hasClass('ui-subgrid')) { $(r).hide() } $(this).html("<a style='cursor:pointer;'><span class='ui-icon " + e.p.subGridOptions.plusicon + "'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed"); if (e.p.subGridOptions.selectOnCollapse) { $(e).jqGrid('setSelection', m) } } return false }) } i++ } if (e.p.subGridOptions.expandOnLoad === true) { $(e.rows).filter('.jqgrow').each(function (a, b) { $(b.cells[0]).click() }) } e.subGridXml = function (a, b) { h(a, b) }; e.subGridJson = function (a, b) { k(a, b) } }) }, expandSubGridRow: function (d) { return this.each(function () { var a = this; if (!a.grid && !d) { return } if (a.p.subGrid === true) { var b = $(this).jqGrid("getInd", d, true); if (b) { var c = $("td.sgcollapsed", b)[0]; if (c) { $(c).trigger("click") } } } }) }, collapseSubGridRow: function (d) { return this.each(function () { var a = this; if (!a.grid && !d) { return } if (a.p.subGrid === true) { var b = $(this).jqGrid("getInd", d, true); if (b) { var c = $("td.sgexpanded", b)[0]; if (c) { $(c).trigger("click") } } } }) }, toggleSubGridRow: function (d) { return this.each(function () { var a = this; if (!a.grid && !d) { return } if (a.p.subGrid === true) { var b = $(this).jqGrid("getInd", d, true); if (b) { var c = $("td.sgcollapsed", b)[0]; if (c) { $(c).trigger("click") } else { c = $("td.sgexpanded", b)[0]; if (c) { $(c).trigger("click") } } } } }) } }) })(jQuery); (function ($) { "use strict"; $.jgrid.extend({ setTreeNode: function (i, g) { return this.each(function () { var b = this; if (!b.grid || !b.p.treeGrid) { return } var c = b.p.expColInd, expanded = b.p.treeReader.expanded_field, isLeaf = b.p.treeReader.leaf_field, level = b.p.treeReader.level_field, icon = b.p.treeReader.icon_field, loaded = b.p.treeReader.loaded, lft, rgt, curLevel, ident, lftpos, twrap, ldat, lf; while (i < g) { var d = $.jgrid.stripPref(b.p.idPrefix, b.rows[i].id), dind = b.p._index[d], expan; ldat = b.p.data[dind]; if (b.p.treeGridModel === 'nested') { if (!ldat[isLeaf]) { lft = parseInt(ldat[b.p.treeReader.left_field], 10); rgt = parseInt(ldat[b.p.treeReader.right_field], 10); ldat[isLeaf] = (rgt === lft + 1) ? 'true' : 'false'; b.rows[i].cells[b.p._treeleafpos].innerHTML = ldat[isLeaf] } } curLevel = parseInt(ldat[level], 10); if (b.p.tree_root_level === 0) { ident = curLevel + 1; lftpos = curLevel } else { ident = curLevel; lftpos = curLevel - 1 } twrap = "<div class='tree-wrap tree-wrap-" + b.p.direction + "' style='width:" + (ident * 18) + "px;'>"; twrap += "<div style='" + (b.p.direction === "rtl" ? "right:" : "left:") + (lftpos * 18) + "px;' class='ui-icon "; if (ldat[loaded] !== undefined) { if (ldat[loaded] === "true" || ldat[loaded] === true) { ldat[loaded] = true } else { ldat[loaded] = false } } if (ldat[isLeaf] === "true" || ldat[isLeaf] === true) { twrap += ((ldat[icon] !== undefined && ldat[icon] !== "") ? ldat[icon] : b.p.treeIcons.leaf) + " tree-leaf treeclick"; ldat[isLeaf] = true; lf = "leaf" } else { ldat[isLeaf] = false; lf = "" } ldat[expanded] = ((ldat[expanded] === "true" || ldat[expanded] === true) ? true : false) && (ldat[loaded] || ldat[loaded] === undefined); if (ldat[expanded] === false) { twrap += ((ldat[isLeaf] === true) ? "'" : b.p.treeIcons.plus + " tree-plus treeclick'") } else { twrap += ((ldat[isLeaf] === true) ? "'" : b.p.treeIcons.minus + " tree-minus treeclick'") } twrap += "></div></div>"; $(b.rows[i].cells[c]).wrapInner("<span class='cell-wrapper" + lf + "'></span>").prepend(twrap); if (curLevel !== parseInt(b.p.tree_root_level, 10)) { var f = $(b).jqGrid('getNodeParent', ldat); expan = f && f.hasOwnProperty(expanded) ? f[expanded] : true; if (!expan) { $(b.rows[i]).css("display", "none") } } $(b.rows[i].cells[c]).find("div.treeclick").bind("click", function (e) { var a = e.target || e.srcElement, ind2 = $.jgrid.stripPref(b.p.idPrefix, $(a, b.rows).closest("tr.jqgrow")[0].id), pos = b.p._index[ind2]; if (!b.p.data[pos][isLeaf]) { if (b.p.data[pos][expanded]) { $(b).jqGrid("collapseRow", b.p.data[pos]); $(b).jqGrid("collapseNode", b.p.data[pos]) } else { $(b).jqGrid("expandRow", b.p.data[pos]); $(b).jqGrid("expandNode", b.p.data[pos]) } } return false }); if (b.p.ExpandColClick === true) { $(b.rows[i].cells[c]).find("span.cell-wrapper").css("cursor", "pointer").bind("click", function (e) { var a = e.target || e.srcElement, ind2 = $.jgrid.stripPref(b.p.idPrefix, $(a, b.rows).closest("tr.jqgrow")[0].id), pos = b.p._index[ind2]; if (!b.p.data[pos][isLeaf]) { if (b.p.data[pos][expanded]) { $(b).jqGrid("collapseRow", b.p.data[pos]); $(b).jqGrid("collapseNode", b.p.data[pos]) } else { $(b).jqGrid("expandRow", b.p.data[pos]); $(b).jqGrid("expandNode", b.p.data[pos]) } } $(b).jqGrid("setSelection", ind2); return false }) } i++ } }) }, setTreeGrid: function () { return this.each(function () { var a = this, i = 0, pico, ecol = false, nm, key, tkey, dupcols = []; if (!a.p.treeGrid) { return } if (!a.p.treedatatype) { $.extend(a.p, { treedatatype: a.p.datatype }) } a.p.subGrid = false; a.p.altRows = false; a.p.pgbuttons = false; a.p.pginput = false; a.p.gridview = true; if (a.p.rowTotal === null) { a.p.rowNum = 10000 } a.p.multiselect = false; a.p.rowList = []; a.p.expColInd = 0; pico = 'ui-icon-triangle-1-' + (a.p.direction === "rtl" ? 'w' : 'e'); a.p.treeIcons = $.extend({ plus: pico, minus: 'ui-icon-triangle-1-s', leaf: 'ui-icon-radio-off' }, a.p.treeIcons || {}); if (a.p.treeGridModel === 'nested') { a.p.treeReader = $.extend({ level_field: "level", left_field: "lft", right_field: "rgt", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon" }, a.p.treeReader) } else if (a.p.treeGridModel === 'adjacency') { a.p.treeReader = $.extend({ level_field: "level", parent_id_field: "parent", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon" }, a.p.treeReader) } for (key in a.p.colModel) { if (a.p.colModel.hasOwnProperty(key)) { nm = a.p.colModel[key].name; if (nm === a.p.ExpandColumn && !ecol) { ecol = true; a.p.expColInd = i } i++; for (tkey in a.p.treeReader) { if (a.p.treeReader.hasOwnProperty(tkey) && a.p.treeReader[tkey] === nm) { dupcols.push(nm) } } } } $.each(a.p.treeReader, function (j, n) { if (n && $.inArray(n, dupcols) === -1) { if (j === 'leaf_field') { a.p._treeleafpos = i } i++; a.p.colNames.push(n); a.p.colModel.push({ name: n, width: 1, hidden: true, sortable: false, resizable: false, hidedlg: true, editable: true, search: false }) } }) }) }, expandRow: function (d) { this.each(function () { var b = this; if (!b.grid || !b.p.treeGrid) { return } var c = $(b).jqGrid("getNodeChildren", d), expanded = b.p.treeReader.expanded_field; $(c).each(function () { var a = b.p.idPrefix + $.jgrid.getAccessor(this, b.p.localReader.id); $($(b).jqGrid('getGridRowById', a)).css("display", ""); if (this[expanded]) { $(b).jqGrid("expandRow", this) } }) }) }, collapseRow: function (d) { this.each(function () { var b = this; if (!b.grid || !b.p.treeGrid) { return } var c = $(b).jqGrid("getNodeChildren", d), expanded = b.p.treeReader.expanded_field; $(c).each(function () { var a = b.p.idPrefix + $.jgrid.getAccessor(this, b.p.localReader.id); $($(b).jqGrid('getGridRowById', a)).css("display", "none"); if (this[expanded]) { $(b).jqGrid("collapseRow", this) } }) }) }, getRootNodes: function () { var d = []; this.each(function () { var a = this; if (!a.grid || !a.p.treeGrid) { return } switch (a.p.treeGridModel) { case 'nested': var b = a.p.treeReader.level_field; $(a.p.data).each(function () { if (parseInt(this[b], 10) === parseInt(a.p.tree_root_level, 10)) { d.push(this) } }); break; case 'adjacency': var c = a.p.treeReader.parent_id_field; $(a.p.data).each(function () { if (this[c] === null || String(this[c]).toLowerCase() === "null") { d.push(this) } }); break } }); return d }, getNodeDepth: function (c) { var d = null; this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var a = this; switch (a.p.treeGridModel) { case 'nested': var b = a.p.treeReader.level_field; d = parseInt(c[b], 10) - parseInt(a.p.tree_root_level, 10); break; case 'adjacency': d = $(a).jqGrid("getNodeAncestors", c).length; break } }); return d }, getNodeParent: function (d) { var e = null; this.each(function () { var a = this; if (!a.grid || !a.p.treeGrid) { return } switch (a.p.treeGridModel) { case 'nested': var b = a.p.treeReader.left_field, rgtc = a.p.treeReader.right_field, levelc = a.p.treeReader.level_field, lft = parseInt(d[b], 10), rgt = parseInt(d[rgtc], 10), level = parseInt(d[levelc], 10); $(this.p.data).each(function () { if (parseInt(this[levelc], 10) === level - 1 && parseInt(this[b], 10) < lft && parseInt(this[rgtc], 10) > rgt) { e = this; return false } }); break; case 'adjacency': var c = a.p.treeReader.parent_id_field, dtid = a.p.localReader.id; $(this.p.data).each(function () { if (this[dtid] === $.jgrid.stripPref(a.p.idPrefix, d[c])) { e = this; return false } }); break } }); return e }, getNodeChildren: function (d) { var e = []; this.each(function () { var a = this; if (!a.grid || !a.p.treeGrid) { return } switch (a.p.treeGridModel) { case 'nested': var b = a.p.treeReader.left_field, rgtc = a.p.treeReader.right_field, levelc = a.p.treeReader.level_field, lft = parseInt(d[b], 10), rgt = parseInt(d[rgtc], 10), level = parseInt(d[levelc], 10); $(this.p.data).each(function () { if (parseInt(this[levelc], 10) === level + 1 && parseInt(this[b], 10) > lft && parseInt(this[rgtc], 10) < rgt) { e.push(this) } }); break; case 'adjacency': var c = a.p.treeReader.parent_id_field, dtid = a.p.localReader.id; $(this.p.data).each(function () { if (this[c] == $.jgrid.stripPref(a.p.idPrefix, d[dtid])) { e.push(this) } }); break } }); return e }, getFullTreeNode: function (d) { var e = []; this.each(function () { var a = this, len; if (!a.grid || !a.p.treeGrid) { return } switch (a.p.treeGridModel) { case 'nested': var b = a.p.treeReader.left_field, rgtc = a.p.treeReader.right_field, levelc = a.p.treeReader.level_field, lft = parseInt(d[b], 10), rgt = parseInt(d[rgtc], 10), level = parseInt(d[levelc], 10); $(this.p.data).each(function () { if (parseInt(this[levelc], 10) >= level && parseInt(this[b], 10) >= lft && parseInt(this[b], 10) <= rgt) { e.push(this) } }); break; case 'adjacency': if (d) { e.push(d); var c = a.p.treeReader.parent_id_field, dtid = a.p.localReader.id; $(this.p.data).each(function (i) { len = e.length; for (i = 0; i < len; i++) { if ($.jgrid.stripPref(a.p.idPrefix, e[i][dtid]) === this[c]) { e.push(this); break } } }) } break } }); return e }, getNodeAncestors: function (b) { var c = []; this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var a = $(this).jqGrid("getNodeParent", b); while (a) { c.push(a); a = $(this).jqGrid("getNodeParent", a) } }); return c }, isVisibleNode: function (c) { var d = true; this.each(function () { var a = this; if (!a.grid || !a.p.treeGrid) { return } var b = $(a).jqGrid("getNodeAncestors", c), expanded = a.p.treeReader.expanded_field; $(b).each(function () { d = d && this[expanded]; if (!d) { return false } }) }); return d }, isNodeLoaded: function (c) { var d; this.each(function () { var a = this; if (!a.grid || !a.p.treeGrid) { return } var b = a.p.treeReader.leaf_field, loaded = a.p.treeReader.loaded; if (c !== undefined) { if (c[loaded] !== undefined) { d = c[loaded] } else if (c[b] || $(a).jqGrid("getNodeChildren", c).length > 0) { d = true } else { d = false } } else { d = false } }); return d }, expandNode: function (e) { return this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var a = this.p.treeReader.expanded_field, parent = this.p.treeReader.parent_id_field, loaded = this.p.treeReader.loaded, level = this.p.treeReader.level_field, lft = this.p.treeReader.left_field, rgt = this.p.treeReader.right_field; if (!e[a]) { var b = $.jgrid.getAccessor(e, this.p.localReader.id); var c = $("#" + this.p.idPrefix + $.jgrid.jqID(b), this.grid.bDiv)[0]; var d = this.p._index[b]; if ($(this).jqGrid("isNodeLoaded", this.p.data[d])) { e[a] = true; $("div.treeclick", c).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus") } else if (!this.grid.hDiv.loading) { e[a] = true; $("div.treeclick", c).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus"); this.p.treeANode = c.rowIndex; this.p.datatype = this.p.treedatatype; if (this.p.treeGridModel === 'nested') { $(this).jqGrid("setGridParam", { postData: { nodeid: b, n_left: e[lft], n_right: e[rgt], n_level: e[level]} }) } else { $(this).jqGrid("setGridParam", { postData: { nodeid: b, parentid: e[parent], n_level: e[level]} }) } $(this).trigger("reloadGrid"); e[loaded] = true; if (this.p.treeGridModel === 'nested') { $(this).jqGrid("setGridParam", { postData: { nodeid: '', n_left: '', n_right: '', n_level: ''} }) } else { $(this).jqGrid("setGridParam", { postData: { nodeid: '', parentid: '', n_level: ''} }) } } } }) }, collapseNode: function (d) { return this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var a = this.p.treeReader.expanded_field; if (d[a]) { d[a] = false; var b = $.jgrid.getAccessor(d, this.p.localReader.id); var c = $("#" + this.p.idPrefix + $.jgrid.jqID(b), this.grid.bDiv)[0]; $("div.treeclick", c).removeClass(this.p.treeIcons.minus + " tree-minus").addClass(this.p.treeIcons.plus + " tree-plus") } }) }, SortTree: function (c, d, e, f) { return this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var i, len, rec, records = [], $t = this, query, roots, rt = $(this).jqGrid("getRootNodes"); query = $.jgrid.from(rt); query.orderBy(c, d, e, f); roots = query.select(); for (i = 0, len = roots.length; i < len; i++) { rec = roots[i]; records.push(rec); $(this).jqGrid("collectChildrenSortTree", records, rec, c, d, e, f) } $.each(records, function (a) { var b = $.jgrid.getAccessor(this, $t.p.localReader.id); $('#' + $.jgrid.jqID($t.p.id) + ' tbody tr:eq(' + a + ')').after($('tr#' + $.jgrid.jqID(b), $t.grid.bDiv)) }); query = null; roots = null; records = null }) }, collectChildrenSortTree: function (a, b, c, d, e, f) { return this.each(function () { if (!this.grid || !this.p.treeGrid) { return } var i, len, child, ch, query, children; ch = $(this).jqGrid("getNodeChildren", b); query = $.jgrid.from(ch); query.orderBy(c, d, e, f); children = query.select(); for (i = 0, len = children.length; i < len; i++) { child = children[i]; a.push(child); $(this).jqGrid("collectChildrenSortTree", a, child, c, d, e, f) } }) }, setTreeRow: function (a, b) { var c = false; this.each(function () { var t = this; if (!t.grid || !t.p.treeGrid) { return } c = $(t).jqGrid("setRowData", a, b) }); return c }, delTreeNode: function (d) { return this.each(function () { var a = this, rid = a.p.localReader.id, i, left = a.p.treeReader.left_field, right = a.p.treeReader.right_field, myright, width, res, key; if (!a.grid || !a.p.treeGrid) { return } var b = a.p._index[d]; if (b !== undefined) { myright = parseInt(a.p.data[b][right], 10); width = myright - parseInt(a.p.data[b][left], 10) + 1; var c = $(a).jqGrid("getFullTreeNode", a.p.data[b]); if (c.length > 0) { for (i = 0; i < c.length; i++) { $(a).jqGrid("delRowData", c[i][rid]) } } if (a.p.treeGridModel === "nested") { res = $.jgrid.from(a.p.data).greater(left, myright, { stype: 'integer' }).select(); if (res.length) { for (key in res) { if (res.hasOwnProperty(key)) { res[key][left] = parseInt(res[key][left], 10) - width } } } res = $.jgrid.from(a.p.data).greater(right, myright, { stype: 'integer' }).select(); if (res.length) { for (key in res) { if (res.hasOwnProperty(key)) { res[key][right] = parseInt(res[key][right], 10) - width } } } } } }) }, addChildNode: function (a, b, c, d) { var e = this[0]; if (c) { var f = e.p.treeReader.expanded_field, isLeaf = e.p.treeReader.leaf_field, level = e.p.treeReader.level_field, parent = e.p.treeReader.parent_id_field, left = e.p.treeReader.left_field, right = e.p.treeReader.right_field, loaded = e.p.treeReader.loaded, method, parentindex, parentdata, parentlevel, i, len, max = 0, rowind = b, leaf, maxright; if (d === undefined) { d = false } if (a === undefined || a === null) { i = e.p.data.length - 1; if (i >= 0) { while (i >= 0) { max = Math.max(max, parseInt(e.p.data[i][e.p.localReader.id], 10)); i-- } } a = max + 1 } var g = $(e).jqGrid('getInd', b); leaf = false; if (b === undefined || b === null || b === "") { b = null; rowind = null; method = 'last'; parentlevel = e.p.tree_root_level; i = e.p.data.length + 1 } else { method = 'after'; parentindex = e.p._index[b]; parentdata = e.p.data[parentindex]; b = parentdata[e.p.localReader.id]; parentlevel = parseInt(parentdata[level], 10) + 1; var h = $(e).jqGrid('getFullTreeNode', parentdata); if (h.length) { i = h[h.length - 1][e.p.localReader.id]; rowind = i; i = $(e).jqGrid('getInd', rowind) + 1 } else { i = $(e).jqGrid('getInd', b) + 1 } if (parentdata[isLeaf]) { leaf = true; parentdata[f] = true; $(e.rows[g]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass(e.p.treeIcons.leaf + " tree-leaf").addClass(e.p.treeIcons.minus + " tree-minus"); e.p.data[parentindex][isLeaf] = false; parentdata[loaded] = true } } len = i + 1; if (c[f] === undefined) { c[f] = false } if (c[loaded] === undefined) { c[loaded] = false } c[level] = parentlevel; if (c[isLeaf] === undefined) { c[isLeaf] = true } if (e.p.treeGridModel === "adjacency") { c[parent] = b } if (e.p.treeGridModel === "nested") { var j, res, key; if (b !== null) { maxright = parseInt(parentdata[right], 10); j = $.jgrid.from(e.p.data); j = j.greaterOrEquals(right, maxright, { stype: 'integer' }); res = j.select(); if (res.length) { for (key in res) { if (res.hasOwnProperty(key)) { res[key][left] = res[key][left] > maxright ? parseInt(res[key][left], 10) + 2 : res[key][left]; res[key][right] = res[key][right] >= maxright ? parseInt(res[key][right], 10) + 2 : res[key][right] } } } c[left] = maxright; c[right] = maxright + 1 } else { maxright = parseInt($(e).jqGrid('getCol', right, false, 'max'), 10); res = $.jgrid.from(e.p.data).greater(left, maxright, { stype: 'integer' }).select(); if (res.length) { for (key in res) { if (res.hasOwnProperty(key)) { res[key][left] = parseInt(res[key][left], 10) + 2 } } } res = $.jgrid.from(e.p.data).greater(right, maxright, { stype: 'integer' }).select(); if (res.length) { for (key in res) { if (res.hasOwnProperty(key)) { res[key][right] = parseInt(res[key][right], 10) + 2 } } } c[left] = maxright + 1; c[right] = maxright + 2 } } if (b === null || $(e).jqGrid("isNodeLoaded", parentdata) || leaf) { $(e).jqGrid('addRowData', a, c, method, rowind); $(e).jqGrid('setTreeNode', i, len) } if (parentdata && !parentdata[f] && d) { $(e.rows[g]).find("div.treeclick").click() } } } }) })(jQuery); (function ($) { "use strict"; $.extend($.jgrid, { template: function (b) { var c = $.makeArray(arguments).slice(1), j, al = c.length; if (b == null) { b = "" } return b.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function (m, i) { if (!isNaN(parseInt(i, 10))) { return c[parseInt(i, 10)] } for (j = 0; j < al; j++) { if ($.isArray(c[j])) { var a = c[j], k = a.length; while (k--) { if (i === a[k].nm) { return a[k].v } } } } }) } }); $.jgrid.extend({ groupingSetup: function () { return this.each(function () { var a = this, i, j, cml, cm = a.p.colModel, grp = a.p.groupingView; if (grp !== null && ((typeof grp === 'object') || $.isFunction(grp))) { if (!grp.groupField.length) { a.p.grouping = false } else { if (grp.visibiltyOnNextGrouping === undefined) { grp.visibiltyOnNextGrouping = [] } grp.lastvalues = []; if (!grp._locgr) { grp.groups = [] } grp.counters = []; for (i = 0; i < grp.groupField.length; i++) { if (!grp.groupOrder[i]) { grp.groupOrder[i] = 'asc' } if (!grp.groupText[i]) { grp.groupText[i] = '{0}' } if (typeof grp.groupColumnShow[i] !== 'boolean') { grp.groupColumnShow[i] = true } if (typeof grp.groupSummary[i] !== 'boolean') { grp.groupSummary[i] = false } if (!grp.groupSummaryPos[i]) { grp.groupSummaryPos[i] = 'footer' } if (grp.groupColumnShow[i] === true) { grp.visibiltyOnNextGrouping[i] = true; $(a).jqGrid('showCol', grp.groupField[i]) } else { grp.visibiltyOnNextGrouping[i] = $("#" + $.jgrid.jqID(a.p.id + "_" + grp.groupField[i])).is(":visible"); $(a).jqGrid('hideCol', grp.groupField[i]) } } grp.summary = []; if (grp.hideFirstGroupCol) { grp.formatDisplayField[0] = function (v) { return v } } for (j = 0, cml = cm.length; j < cml; j++) { if (grp.hideFirstGroupCol) { if (!cm[j].hidden && grp.groupField[0] === cm[j].name) { cm[j].formatter = function () { return '' } } } if (cm[j].summaryType) { if (cm[j].summaryDivider) { grp.summary.push({ nm: cm[j].name, st: cm[j].summaryType, v: '', sd: cm[j].summaryDivider, vd: '', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round' }) } else { grp.summary.push({ nm: cm[j].name, st: cm[j].summaryType, v: '', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round' }) } } } } } else { a.p.grouping = false } }) }, groupingPrepare: function (b, c) { this.each(function () { var a = this.p.groupingView, $t = this, i, grlen = a.groupField.length, fieldName, v, displayName, displayValue, changed = 0; for (i = 0; i < grlen; i++) { fieldName = a.groupField[i]; displayName = a.displayField[i]; v = b[fieldName]; displayValue = displayName == null ? null : b[displayName]; if (displayValue == null) { displayValue = v } if (v !== undefined) { if (c === 0) { a.groups.push({ idx: i, dataIndex: fieldName, value: v, displayValue: displayValue, startRow: c, cnt: 1, summary: [] }); a.lastvalues[i] = v; a.counters[i] = { cnt: 1, pos: a.groups.length - 1, summary: $.extend(true, [], a.summary) }; $.each(a.counters[i].summary, function () { if ($.isFunction(this.st)) { this.v = this.st.call($t, this.v, this.nm, b) } else { this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, b); if (this.st.toLowerCase() === 'avg' && this.sd) { this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, b) } } }); a.groups[a.counters[i].pos].summary = a.counters[i].summary } else { if (typeof v !== "object" && ($.isArray(a.isInTheSameGroup) && $.isFunction(a.isInTheSameGroup[i]) ? !a.isInTheSameGroup[i].call($t, a.lastvalues[i], v, i, a) : a.lastvalues[i] !== v)) { a.groups.push({ idx: i, dataIndex: fieldName, value: v, displayValue: displayValue, startRow: c, cnt: 1, summary: [] }); a.lastvalues[i] = v; changed = 1; a.counters[i] = { cnt: 1, pos: a.groups.length - 1, summary: $.extend(true, [], a.summary) }; $.each(a.counters[i].summary, function () { if ($.isFunction(this.st)) { this.v = this.st.call($t, this.v, this.nm, b) } else { this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, b); if (this.st.toLowerCase() === 'avg' && this.sd) { this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, b) } } }); a.groups[a.counters[i].pos].summary = a.counters[i].summary } else { if (changed === 1) { a.groups.push({ idx: i, dataIndex: fieldName, value: v, displayValue: displayValue, startRow: c, cnt: 1, summary: [] }); a.lastvalues[i] = v; a.counters[i] = { cnt: 1, pos: a.groups.length - 1, summary: $.extend(true, [], a.summary) }; $.each(a.counters[i].summary, function () { if ($.isFunction(this.st)) { this.v = this.st.call($t, this.v, this.nm, b) } else { this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, b); if (this.st.toLowerCase() === 'avg' && this.sd) { this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, b) } } }); a.groups[a.counters[i].pos].summary = a.counters[i].summary } else { a.counters[i].cnt += 1; a.groups[a.counters[i].pos].cnt = a.counters[i].cnt; $.each(a.counters[i].summary, function () { if ($.isFunction(this.st)) { this.v = this.st.call($t, this.v, this.nm, b) } else { this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, b); if (this.st.toLowerCase() === 'avg' && this.sd) { this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, b) } } }); a.groups[a.counters[i].pos].summary = a.counters[i].summary } } } } } }); return this }, groupingToggle: function (g) { this.each(function () { var d = this, grp = d.p.groupingView, strpos = g.split('_'), num = parseInt(strpos[strpos.length - 2], 10); strpos.splice(strpos.length - 2, 2); var e = strpos.join("_"), minus = grp.minusicon, plus = grp.plusicon, tar = $("#" + $.jgrid.jqID(g)), r = tar.length ? tar[0].nextSibling : null, tarspan = $("#" + $.jgrid.jqID(g) + " span." + "tree-wrap-" + d.p.direction), getGroupingLevelFromClass = function (b) { var c = $.map(b.split(" "), function (a) { if (a.substring(0, e.length + 1) === e + "_") { return parseInt(a.substring(e.length + 1), 10) } }); return c.length > 0 ? c[0] : undefined }, itemGroupingLevel, showData, collapsed = false, frz = d.p.frozenColumns ? d.p.id + "_frozen" : false, tar2 = frz ? $("#" + $.jgrid.jqID(g), "#" + $.jgrid.jqID(frz)) : false, r2 = (tar2 && tar2.length) ? tar2[0].nextSibling : null; if (tarspan.hasClass(minus)) { if (grp.showSummaryOnHide) { if (r) { while (r) { if ($(r).hasClass('jqfoot')) { var f = parseInt($(r).attr("jqfootlevel"), 10); if (f <= num) { break } } $(r).hide(); r = r.nextSibling; if (frz) { $(r2).hide(); r2 = r2.nextSibling } } } } else { if (r) { while (r) { itemGroupingLevel = getGroupingLevelFromClass(r.className); if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) { break } $(r).hide(); r = r.nextSibling; if (frz) { $(r2).hide(); r2 = r2.nextSibling } } } } tarspan.removeClass(minus).addClass(plus); collapsed = true } else { if (r) { showData = undefined; while (r) { itemGroupingLevel = getGroupingLevelFromClass(r.className); if (showData === undefined) { showData = itemGroupingLevel === undefined } if (itemGroupingLevel !== undefined) { if (itemGroupingLevel <= num) { break } if (itemGroupingLevel === num + 1) { $(r).show().find(">td>span." + "tree-wrap-" + d.p.direction).removeClass(minus).addClass(plus); if (frz) { $(r2).show().find(">td>span." + "tree-wrap-" + d.p.direction).removeClass(minus).addClass(plus) } } } else if (showData) { $(r).show(); if (frz) { $(r2).show() } } r = r.nextSibling; if (frz) { r2 = r2.nextSibling } } } tarspan.removeClass(plus).addClass(minus) } $(d).triggerHandler("jqGridGroupingClickGroup", [g, collapsed]); if ($.isFunction(d.p.onClickGroup)) { d.p.onClickGroup.call(d, g, collapsed) } }); return false }, groupingRender: function (j, l, m, o) { return this.each(function () { var f = this, grp = f.p.groupingView, str = "", icon = "", hid, clid, pmrtl = grp.groupCollapse ? grp.plusicon : grp.minusicon, gv, cp = [], len = grp.groupField.length; pmrtl += " tree-wrap-" + f.p.direction; $.each(f.p.colModel, function (i, n) { var a; for (a = 0; a < len; a++) { if (grp.groupField[a] === n.name) { cp[a] = i; break } } }); var g = 0; function findGroupIdx(a, b, c) { var d = false, i; if (b === 0) { d = c[a] } else { var e = c[a].idx; if (e === 0) { d = c[a] } else { for (i = a; i >= 0; i--) { if (c[i].idx === e - b) { d = c[i]; break } } } } return d } function buildSummaryTd(i, a, b, c) { var d = findGroupIdx(i, a, b), cm = f.p.colModel, vv, grlen = d.cnt, str = "", k; for (k = c; k < l; k++) { var e = "<td " + f.formatCol(k, 1, '') + ">&#160;</td>", tplfld = "{0}"; $.each(d.summary, function () { if (this.nm === cm[k].name) { if (cm[k].summaryTpl) { tplfld = cm[k].summaryTpl } if (typeof this.st === 'string' && this.st.toLowerCase() === 'avg') { if (this.sd && this.vd) { this.v = (this.v / this.vd) } else if (this.v && grlen > 0) { this.v = (this.v / grlen) } } try { this.groupCount = d.cnt; this.groupIndex = d.dataIndex; this.groupValue = d.value; vv = f.formatter('', this.v, k, this) } catch (ef) { vv = this.v } e = "<td " + f.formatCol(k, 1, '') + ">" + $.jgrid.format(tplfld, vv) + "</td>"; return false } }); str += e } return str } var h = $.makeArray(grp.groupSummary); h.reverse(); $.each(grp.groups, function (i, n) { if (grp._locgr) { if (!(n.startRow + n.cnt > (m - 1) * o && n.startRow < m * o)) { return true } } g++; clid = f.p.id + "ghead_" + n.idx; hid = clid + "_" + i; icon = "<span style='cursor:pointer;' class='ui-icon " + pmrtl + "' onclick=\"jQuery('#" + $.jgrid.jqID(f.p.id) + "').jqGrid('groupingToggle','" + hid + "');return false;\"></span>"; try { if ($.isArray(grp.formatDisplayField) && $.isFunction(grp.formatDisplayField[n.idx])) { n.displayValue = grp.formatDisplayField[n.idx].call(f, n.displayValue, n.value, f.p.colModel[cp[n.idx]], n.idx, grp); gv = n.displayValue } else { gv = f.formatter(hid, n.displayValue, cp[n.idx], n.value) } } catch (egv) { gv = n.displayValue } if (grp.groupSummaryPos[n.idx] === 'header') { str += "<tr id=\"" + hid + "\"" + (grp.groupCollapse && n.idx > 0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"ui-widget-content jqgroup ui-row-" + f.p.direction + " " + clid + "\"><td style=\"padding-left:" + (n.idx * 12) + "px;" + "\">" + icon + $.jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary) + "</td>"; str += buildSummaryTd(i, n.idx - 1, grp.groups, 1); str += "</tr>" } else { str += "<tr id=\"" + hid + "\"" + (grp.groupCollapse && n.idx > 0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"ui-widget-content jqgroup ui-row-" + f.p.direction + " " + clid + "\"><td style=\"padding-left:" + (n.idx * 12) + "px;" + "\" colspan=\"" + l + "\">" + icon + $.jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary) + "</td></tr>" } var a = len - 1 === n.idx; if (a) { var b = grp.groups[i + 1], kk, ik, offset = 0, sgr = n.startRow, end = b !== undefined ? grp.groups[i + 1].startRow : j.length; if (grp._locgr) { offset = (m - 1) * o; if (offset > n.startRow) { sgr = offset } } for (kk = sgr; kk < end; kk++) { if (!j[kk - offset]) { break } str += j[kk - offset].join('') } if (grp.groupSummaryPos[n.idx] !== 'header') { var c; if (b !== undefined) { for (c = 0; c < grp.groupField.length; c++) { if (b.dataIndex === grp.groupField[c]) { break } } g = grp.groupField.length - c } for (ik = 0; ik < g; ik++) { if (!h[ik]) { continue } var d = ""; if (grp.groupCollapse && !grp.showSummaryOnHide) { d = " style=\"display:none;\"" } str += "<tr" + d + " jqfootlevel=\"" + (n.idx - ik) + "\" role=\"row\" class=\"ui-widget-content jqfoot ui-row-" + f.p.direction + "\">"; str += buildSummaryTd(i, ik, grp.groups, 0); str += "</tr>" } g = c } } }); $("#" + $.jgrid.jqID(f.p.id) + " tbody:first").append(str); str = null }) }, groupingGroupBy: function (c, d) { return this.each(function () { var a = this; if (typeof c === "string") { c = [c] } var b = a.p.groupingView; a.p.grouping = true; if (b.visibiltyOnNextGrouping === undefined) { b.visibiltyOnNextGrouping = [] } var i; for (i = 0; i < b.groupField.length; i++) { if (!b.groupColumnShow[i] && b.visibiltyOnNextGrouping[i]) { $(a).jqGrid('showCol', b.groupField[i]) } } for (i = 0; i < c.length; i++) { b.visibiltyOnNextGrouping[i] = $("#" + $.jgrid.jqID(a.p.id) + "_" + $.jgrid.jqID(c[i])).is(":visible") } a.p.groupingView = $.extend(a.p.groupingView, d || {}); b.groupField = c; $(a).trigger("reloadGrid") }) }, groupingRemove: function (c) { return this.each(function () { var a = this; if (c === undefined) { c = true } a.p.grouping = false; if (c === true) { var b = a.p.groupingView, i; for (i = 0; i < b.groupField.length; i++) { if (!b.groupColumnShow[i] && b.visibiltyOnNextGrouping[i]) { $(a).jqGrid('showCol', b.groupField) } } $("tr.jqgroup, tr.jqfoot", "#" + $.jgrid.jqID(a.p.id) + " tbody:first").remove(); $("tr.jqgrow:hidden", "#" + $.jgrid.jqID(a.p.id) + " tbody:first").show() } else { $(a).trigger("reloadGrid") } }) }, groupingCalculations: { handler: function (a, v, b, c, d, e) { var f = { sum: function () { return parseFloat(v || 0) + parseFloat((e[b] || 0)) }, min: function () { if (v === "") { return parseFloat(e[b] || 0) } return Math.min(parseFloat(v), parseFloat(e[b] || 0)) }, max: function () { if (v === "") { return parseFloat(e[b] || 0) } return Math.max(parseFloat(v), parseFloat(e[b] || 0)) }, count: function () { if (v === "") { v = 0 } if (e.hasOwnProperty(b)) { return v + 1 } return 0 }, avg: function () { return f.sum() } }; if (!f[a]) { throw ("jqGrid Grouping No such method: " + a); } var g = f[a](); if (c != null) { if (d === 'fixed') { g = g.toFixed(c) } else { var h = Math.pow(10, c); g = Math.round(g * h) / h } } return g } } }) })(jQuery); (function ($) { "use strict"; $.jgrid.extend({ jqGridImport: function (o) { o = $.extend({ imptype: "xml", impstring: "", impurl: "", mtype: "GET", impData: {}, xmlGrid: { config: "roots>grid", data: "roots>rows" }, jsonGrid: { config: "grid", data: "data" }, ajaxOptions: {} }, o || {}); return this.each(function () { var g = this; var h = function (a, o) { var b = $(o.xmlGrid.config, a)[0]; var c = $(o.xmlGrid.data, a)[0], jstr, jstr1, key; if (xmlJsonClass.xml2json && $.jgrid.parse) { jstr = xmlJsonClass.xml2json(b, " "); jstr = $.jgrid.parse(jstr); for (key in jstr) { if (jstr.hasOwnProperty(key)) { jstr1 = jstr[key] } } if (c) { var d = jstr.grid.datatype; jstr.grid.datatype = 'xmlstring'; jstr.grid.datastr = a; $(g).jqGrid(jstr1).jqGrid("setGridParam", { datatype: d }) } else { $(g).jqGrid(jstr1) } jstr = null; jstr1 = null } else { alert("xml2json or parse are not present") } }; var i = function (a, o) { if (a && typeof a === 'string') { var b = false; if ($.jgrid.useJSON) { $.jgrid.useJSON = false; b = true } var c = $.jgrid.parse(a); if (b) { $.jgrid.useJSON = true } var d = c[o.jsonGrid.config]; var e = c[o.jsonGrid.data]; if (e) { var f = d.datatype; d.datatype = 'jsonstring'; d.datastr = e; $(g).jqGrid(d).jqGrid("setGridParam", { datatype: f }) } else { $(g).jqGrid(d) } } }; switch (o.imptype) { case 'xml': $.ajax($.extend({ url: o.impurl, type: o.mtype, data: o.impData, dataType: "xml", complete: function (a, b) { if (b === 'success') { h(a.responseXML, o); $(g).triggerHandler("jqGridImportComplete", [a, o]); if ($.isFunction(o.importComplete)) { o.importComplete(a) } } a = null } }, o.ajaxOptions)); break; case 'xmlstring': if (o.impstring && typeof o.impstring === 'string') { var j = $.parseXML(o.impstring); if (j) { h(j, o); $(g).triggerHandler("jqGridImportComplete", [j, o]); if ($.isFunction(o.importComplete)) { o.importComplete(j) } o.impstring = null } j = null } break; case 'json': $.ajax($.extend({ url: o.impurl, type: o.mtype, data: o.impData, dataType: "json", complete: function (a) { try { i(a.responseText, o); $(g).triggerHandler("jqGridImportComplete", [a, o]); if ($.isFunction(o.importComplete)) { o.importComplete(a) } } catch (ee) { } a = null } }, o.ajaxOptions)); break; case 'jsonstring': if (o.impstring && typeof o.impstring === 'string') { i(o.impstring, o); $(g).triggerHandler("jqGridImportComplete", [o.impstring, o]); if ($.isFunction(o.importComplete)) { o.importComplete(o.impstring) } o.impstring = null } break } }) }, jqGridExport: function (o) { o = $.extend({ exptype: "xmlstring", root: "grid", ident: "\t" }, o || {}); var b = null; this.each(function () { if (!this.grid) { return } var a, gprm = $.extend(true, {}, $(this).jqGrid("getGridParam")); if (gprm.rownumbers) { gprm.colNames.splice(0, 1); gprm.colModel.splice(0, 1) } if (gprm.multiselect) { gprm.colNames.splice(0, 1); gprm.colModel.splice(0, 1) } if (gprm.subGrid) { gprm.colNames.splice(0, 1); gprm.colModel.splice(0, 1) } gprm.knv = null; if (gprm.treeGrid) { for (a in gprm.treeReader) { if (gprm.treeReader.hasOwnProperty(a)) { gprm.colNames.splice(gprm.colNames.length - 1); gprm.colModel.splice(gprm.colModel.length - 1) } } } switch (o.exptype) { case 'xmlstring': b = "<" + o.root + ">" + xmlJsonClass.json2xml(gprm, o.ident) + "</" + o.root + ">"; break; case 'jsonstring': b = "{" + xmlJsonClass.toJson(gprm, o.root, o.ident, false) + "}"; if (gprm.postData.filters !== undefined) { b = b.replace(/filters":"/, 'filters":'); b = b.replace(/}]}"/, '}]}') } break } }); return b }, excelExport: function (o) { o = $.extend({ exptype: "remote", url: null, oper: "oper", tag: "excel", exportOptions: {} }, o || {}); return this.each(function () { if (!this.grid) { return } var a; if (o.exptype === "remote") { var b = $.extend({}, this.p.postData); b[o.oper] = o.tag; var c = jQuery.param(b); if (o.url.indexOf("?") !== -1) { a = o.url + "&" + c } else { a = o.url + "?" + c } window.location = a } }) } }) })(jQuery); (function ($) { "use strict"; if ($.jgrid.msie && $.jgrid.msiever() === 8) { $.expr[":"].hidden = function (a) { return a.offsetWidth === 0 || a.offsetHeight === 0 || a.style.display === "none" } } $.jgrid._multiselect = false; if ($.ui) { if ($.ui.multiselect) { if ($.ui.multiselect.prototype._setSelected) { var o = $.ui.multiselect.prototype._setSelected; $.ui.multiselect.prototype._setSelected = function (a, b) { var c = o.call(this, a, b); if (b && this.selectedList) { var d = this.element; this.selectedList.find('li').each(function () { if ($(this).data('optionLink')) { $(this).data('optionLink').remove().appendTo(d) } }) } return c } } if ($.ui.multiselect.prototype.destroy) { $.ui.multiselect.prototype.destroy = function () { this.element.show(); this.container.remove(); if ($.Widget === undefined) { $.widget.prototype.destroy.apply(this, arguments) } else { $.Widget.prototype.destroy.apply(this, arguments) } } } $.jgrid._multiselect = true } } $.jgrid.extend({ sortableColumns: function (h) { return this.each(function () { var f = this, tid = $.jgrid.jqID(f.p.id); function start() { f.p.disableClick = true } var g = { "tolerance": "pointer", "axis": "x", "scrollSensitivity": "1", "items": '>th:not(:has(#jqgh_' + tid + '_cb' + ',#jqgh_' + tid + '_rn' + ',#jqgh_' + tid + '_subgrid),:hidden)', "placeholder": { element: function (a) { var b = $(document.createElement(a[0].nodeName)).addClass(a[0].className + " ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0]; return b }, update: function (a, p) { p.height(a.currentItem.innerHeight() - parseInt(a.currentItem.css('paddingTop') || 0, 10) - parseInt(a.currentItem.css('paddingBottom') || 0, 10)); p.width(a.currentItem.innerWidth() - parseInt(a.currentItem.css('paddingLeft') || 0, 10) - parseInt(a.currentItem.css('paddingRight') || 0, 10)) } }, "update": function (b, c) { var p = $(c.item).parent(), th = $(">th", p), colModel = f.p.colModel, cmMap = {}, tid = f.p.id + "_"; $.each(colModel, function (i) { cmMap[this.name] = i }); var d = []; th.each(function () { var a = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid, ""); if (cmMap.hasOwnProperty(a)) { d.push(cmMap[a]) } }); $(f).jqGrid("remapColumns", d, true, true); if ($.isFunction(f.p.sortable.update)) { f.p.sortable.update(d) } setTimeout(function () { f.p.disableClick = false }, 50) } }; if (f.p.sortable.options) { $.extend(g, f.p.sortable.options) } else if ($.isFunction(f.p.sortable)) { f.p.sortable = { "update": f.p.sortable} } if (g.start) { var s = g.start; g.start = function (e, a) { start(); s.call(this, e, a) } } else { g.start = start } if (f.p.sortable.exclude) { g.items += ":not(" + f.p.sortable.exclude + ")" } h.sortable(g).data("sortable").floating = true }) }, columnChooser: function (d) { var e = this; if ($("#colchooser_" + $.jgrid.jqID(e[0].p.id)).length) { return } var f = $('<div id="colchooser_' + e[0].p.id + '" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>'); var g = $('select', f); function insert(c, i, v) { if (i >= 0) { var a = c.slice(); var b = a.splice(i, Math.max(c.length - i, i)); if (i > c.length) { i = c.length } a[i] = v; return a.concat(b) } } d = $.extend({ "width": 420, "height": 240, "classname": null, "done": function (a) { if (a) { e.jqGrid("remapColumns", a, true) } }, "msel": "multiselect", "dlog": "dialog", "dialog_opts": { "minWidth": 470 }, "dlog_opts": function (a) { var b = {}; b[a.bSubmit] = function () { a.apply_perm(); a.cleanup(false) }; b[a.bCancel] = function () { a.cleanup(true) }; return $.extend(true, { "buttons": b, "close": function () { a.cleanup(true) }, "modal": a.modal || false, "resizable": a.resizable || true, "width": a.width + 20 }, a.dialog_opts || {}) }, "apply_perm": function () { $('option', g).each(function () { if (this.selected) { e.jqGrid("showCol", h[this.value].name) } else { e.jqGrid("hideCol", h[this.value].name) } }); var b = []; $('option:selected', g).each(function () { b.push(parseInt(this.value, 10)) }); $.each(b, function () { delete k[h[parseInt(this, 10)].name] }); $.each(k, function () { var a = parseInt(this, 10); b = insert(b, a, a) }); if (d.done) { d.done.call(e, b) } }, "cleanup": function (a) { call(d.dlog, f, 'destroy'); call(d.msel, g, 'destroy'); f.remove(); if (a && d.done) { d.done.call(e) } }, "msel_opts": {} }, $.jgrid.col, d || {}); if ($.ui) { if ($.ui.multiselect) { if (d.msel === "multiselect") { if (!$.jgrid._multiselect) { alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!"); return } d.msel_opts = $.extend($.ui.multiselect.defaults, d.msel_opts) } } } if (d.caption) { f.attr("title", d.caption) } if (d.classname) { f.addClass(d.classname); g.addClass(d.classname) } if (d.width) { $(">div", f).css({ "width": d.width, "margin": "0 auto" }); g.css("width", d.width) } if (d.height) { $(">div", f).css("height", d.height); g.css("height", d.height - 10) } var h = e.jqGrid("getGridParam", "colModel"); var j = e.jqGrid("getGridParam", "colNames"); var k = {}, fixedCols = []; g.empty(); $.each(h, function (i) { k[this.name] = i; if (this.hidedlg) { if (!this.hidden) { fixedCols.push(i) } return } g.append("<option value='" + i + "' " + (this.hidden ? "" : "selected='selected'") + ">" + $.jgrid.stripHtml(j[i]) + "</option>") }); function call(a, b) { if (!a) { return } if (typeof a === 'string') { if ($.fn[a]) { $.fn[a].apply(b, $.makeArray(arguments).slice(2)) } } else if ($.isFunction(a)) { a.apply(b, $.makeArray(arguments).slice(2)) } } var l = $.isFunction(d.dlog_opts) ? d.dlog_opts.call(e, d) : d.dlog_opts; call(d.dlog, f, l); var m = $.isFunction(d.msel_opts) ? d.msel_opts.call(e, d) : d.msel_opts; call(d.msel, g, m) }, sortableRows: function (f) { return this.each(function () { var d = this; if (!d.grid) { return } if (d.p.treeGrid) { return } if ($.fn.sortable) { f = $.extend({ "cursor": "move", "axis": "y", "items": ".jqgrow" }, f || {}); if (f.start && $.isFunction(f.start)) { f._start_ = f.start; delete f.start } else { f._start_ = false } if (f.update && $.isFunction(f.update)) { f._update_ = f.update; delete f.update } else { f._update_ = false } f.start = function (a, b) { $(b.item).css("border-width", "0"); $("td", b.item).each(function (i) { this.style.width = d.grid.cols[i].style.width }); if (d.p.subGrid) { var c = $(b.item).attr("id"); try { $(d).jqGrid('collapseSubGridRow', c) } catch (e) { } } if (f._start_) { f._start_.apply(this, [a, b]) } }; f.update = function (a, b) { $(b.item).css("border-width", ""); if (d.p.rownumbers === true) { $("td.jqgrid-rownum", d.rows).each(function (i) { $(this).html(i + 1 + (parseInt(d.p.page, 10) - 1) * parseInt(d.p.rowNum, 10)) }) } if (f._update_) { f._update_.apply(this, [a, b]) } }; $("tbody:first", d).sortable(f); $("tbody:first", d).disableSelection() } }) }, gridDnD: function (m) { return this.each(function () { var k = this, i, cn; if (!k.grid) { return } if (k.p.treeGrid) { return } if (!$.fn.draggable || !$.fn.droppable) { return } function updateDnD() { var a = $.data(k, "dnd"); $("tr.jqgrow:not(.ui-draggable)", k).draggable($.isFunction(a.drag) ? a.drag.call($(k), a) : a.drag) } var l = "<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>"; if ($("#jqgrid_dnd")[0] === undefined) { $('body').append(l) } if (typeof m === 'string' && m === 'updateDnD' && k.p.jqgdnd === true) { updateDnD(); return } m = $.extend({ "drag": function (c) { return $.extend({ start: function (a, b) { var i, subgid; if (k.p.subGrid) { subgid = $(b.helper).attr("id"); try { $(k).jqGrid('collapseSubGridRow', subgid) } catch (e) { } } for (i = 0; i < $.data(k, "dnd").connectWith.length; i++) { if ($($.data(k, "dnd").connectWith[i]).jqGrid('getGridParam', 'reccount') === 0) { $($.data(k, "dnd").connectWith[i]).jqGrid('addRowData', 'jqg_empty_row', {}) } } b.helper.addClass("ui-state-highlight"); $("td", b.helper).each(function (i) { this.style.width = k.grid.headers[i].width + "px" }); if (c.onstart && $.isFunction(c.onstart)) { c.onstart.call($(k), a, b) } }, stop: function (a, b) { var i, ids; if (b.helper.dropped && !c.dragcopy) { ids = $(b.helper).attr("id"); if (ids === undefined) { ids = $(this).attr("id") } $(k).jqGrid('delRowData', ids) } for (i = 0; i < $.data(k, "dnd").connectWith.length; i++) { $($.data(k, "dnd").connectWith[i]).jqGrid('delRowData', 'jqg_empty_row') } if (c.onstop && $.isFunction(c.onstop)) { c.onstop.call($(k), a, b) } } }, c.drag_opts || {}) }, "drop": function (i) { return $.extend({ accept: function (d) { if (!$(d).hasClass('jqgrow')) { return d } var a = $(d).closest("table.ui-jqgrid-btable"); if (a.length > 0 && $.data(a[0], "dnd") !== undefined) { var b = $.data(a[0], "dnd").connectWith; return $.inArray('#' + $.jgrid.jqID(this.id), b) !== -1 ? true : false } return false }, drop: function (a, b) { if (!$(b.draggable).hasClass('jqgrow')) { return } var c = $(b.draggable).attr("id"); var d = b.draggable.parent().parent().jqGrid('getRowData', c); if (!i.dropbyname) { var j = 0, tmpdata = {}, nm, key; var f = $("#" + $.jgrid.jqID(this.id)).jqGrid('getGridParam', 'colModel'); try { for (key in d) { if (d.hasOwnProperty(key)) { nm = f[j].name; if (!(nm === 'cb' || nm === 'rn' || nm === 'subgrid')) { if (d.hasOwnProperty(key) && f[j]) { tmpdata[nm] = d[key] } } j++ } } d = tmpdata } catch (e) { } } b.helper.dropped = true; if (i.beforedrop && $.isFunction(i.beforedrop)) { var g = i.beforedrop.call(this, a, b, d, $('#' + $.jgrid.jqID(k.p.id)), $(this)); if (g !== undefined && g !== null && typeof g === "object") { d = g } } if (b.helper.dropped) { var h; if (i.autoid) { if ($.isFunction(i.autoid)) { h = i.autoid.call(this, d) } else { h = Math.ceil(Math.random() * 1000); h = i.autoidprefix + h } } $("#" + $.jgrid.jqID(this.id)).jqGrid('addRowData', h, d, i.droppos) } if (i.ondrop && $.isFunction(i.ondrop)) { i.ondrop.call(this, a, b, d) } } }, i.drop_opts || {}) }, "onstart": null, "onstop": null, "beforedrop": null, "ondrop": null, "drop_opts": { "activeClass": "ui-state-active", "hoverClass": "ui-state-hover" }, "drag_opts": { "revert": "invalid", "helper": "clone", "cursor": "move", "appendTo": "#jqgrid_dnd", "zIndex": 5000 }, "dragcopy": false, "dropbyname": false, "droppos": "first", "autoid": true, "autoidprefix": "dnd_" }, m || {}); if (!m.connectWith) { return } m.connectWith = m.connectWith.split(","); m.connectWith = $.map(m.connectWith, function (n) { return $.trim(n) }); $.data(k, "dnd", m); if (k.p.reccount !== 0 && !k.p.jqgdnd) { updateDnD() } k.p.jqgdnd = true; for (i = 0; i < m.connectWith.length; i++) { cn = m.connectWith[i]; $(cn).droppable($.isFunction(m.drop) ? m.drop.call($(k), m) : m.drop) } }) }, gridResize: function (e) { return this.each(function () { var c = this, gID = $.jgrid.jqID(c.p.id); if (!c.grid || !$.fn.resizable) { return } e = $.extend({}, e || {}); if (e.alsoResize) { e._alsoResize_ = e.alsoResize; delete e.alsoResize } else { e._alsoResize_ = false } if (e.stop && $.isFunction(e.stop)) { e._stop_ = e.stop; delete e.stop } else { e._stop_ = false } e.stop = function (a, b) { $(c).jqGrid('setGridParam', { height: $("#gview_" + gID + " .ui-jqgrid-bdiv").height() }); $(c).jqGrid('setGridWidth', b.size.width, e.shrinkToFit); if (e._stop_) { e._stop_.call(c, a, b) } }; if (e._alsoResize_) { var d = "{\'#gview_" + gID + " .ui-jqgrid-bdiv\':true,'" + e._alsoResize_ + "':true}"; e.alsoResize = eval('(' + d + ')') } else { e.alsoResize = $(".ui-jqgrid-bdiv", "#gview_" + gID) } delete e._alsoResize_; $("#gbox_" + gID).resizable(e) }) } }) })(jQuery); function tableToGrid(p, q) { jQuery(p).each(function () { if (this.grid) { return } jQuery(this).width("99%"); var w = jQuery(this).width(); var e = jQuery('tr td:first-child input[type=checkbox]:first', jQuery(this)); var f = jQuery('tr td:first-child input[type=radio]:first', jQuery(this)); var g = e.length > 0; var h = !g && f.length > 0; var i = g || h; var j = []; var k = []; jQuery('th', jQuery(this)).each(function () { if (j.length === 0 && i) { j.push({ name: '__selection__', index: '__selection__', width: 0, hidden: true }); k.push('__selection__') } else { j.push({ name: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'), index: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'), width: jQuery(this).width() || 150 }); k.push(jQuery(this).html()) } }); var l = []; var m = []; var n = []; jQuery('tbody > tr', jQuery(this)).each(function () { var c = {}; var d = 0; jQuery('td', jQuery(this)).each(function () { if (d === 0 && i) { var a = jQuery('input', jQuery(this)); var b = a.attr("value"); m.push(b || l.length); if (a.is(":checked")) { n.push(b) } c[j[d].name] = a.attr("value") } else { c[j[d].name] = jQuery(this).html() } d++ }); if (d > 0) { l.push(c) } }); jQuery(this).empty(); jQuery(this).addClass("scroll"); jQuery(this).jqGrid(jQuery.extend({ datatype: "local", width: w, colNames: k, colModel: j, multiselect: g }, q || {})); var a; for (a = 0; a < l.length; a++) { var o = null; if (m.length > 0) { o = m[a]; if (o && o.replace) { o = encodeURIComponent(o).replace(/[.\-%]/g, "_") } } if (o === null) { o = a + 1 } jQuery(this).jqGrid("addRowData", o, l[a]) } for (a = 0; a < n.length; a++) { jQuery(this).jqGrid("setSelection", n[a]) } }) }; (function ($) { "use strict"; function _pivotfilter(a, b) { var i, value, result = [], length; if (!this || typeof a !== 'function' || (a instanceof RegExp)) { throw new TypeError(); } length = this.length; for (i = 0; i < length; i++) { if (this.hasOwnProperty(i)) { value = this[i]; if (a.call(b, value, i, this)) { result.push(value); break } } } return result } $.assocArraySize = function (a) { var b = 0, key; for (key in a) { if (a.hasOwnProperty(key)) { b++ } } return b }; $.jgrid.extend({ pivotSetup: function (y, z) { var A = [], pivotrows = [], summaries = [], member = [], groupOptions = { grouping: true, groupingView: { groupField: [], groupSummary: [], groupSummaryPos: []} }, headers = [], o = $.extend({ rowTotals: false, rowTotalsText: 'Total', colTotals: false, groupSummary: true, groupSummaryPos: 'header', frozenStaticCols: false }, z || {}); this.each(function () { var h, rowindex, i, rowlen = y.length, xlen, ylen, aggrlen, tmp, newObj, r = 0; function find(a, b, c) { var d; d = _pivotfilter.call(a, b, c); return d.length > 0 ? d[0] : null } function findGroup(a, b) { var j = 0, ret = true, i; for (i in a) { if (a[i] != this[j]) { ret = false; break } j++; if (j >= this.length) { break } } if (ret) { rowindex = b } return ret } function calculation(a, v, b, c) { var d; switch (a) { case "sum": d = parseFloat(v || 0) + parseFloat((c[b] || 0)); break; case "count": if (v === "" || v == null) { v = 0 } if (c.hasOwnProperty(b)) { d = v + 1 } else { d = 0 } break; case "min": if (v === "" || v == null) { d = parseFloat(c[b] || 0) } else { d = Math.min(parseFloat(v), parseFloat(c[b] || 0)) } break; case "max": if (v === "" || v == null) { d = parseFloat(c[b] || 0) } else { d = Math.max(parseFloat(v), parseFloat(c[b] || 0)) } break } return d } function agregateFunc(a, b, c, d) { var f = b.length, i, label, j, jv; if ($.isArray(c)) { jv = c.length } else { jv = 1 } member = []; member.root = 0; for (j = 0; j < jv; j++) { var g = [], vl; for (i = 0; i < f; i++) { if (c == null) { label = $.trim(b[i].member) + "_" + b[i].aggregator; vl = label } else { vl = c[j].replace(/\s+/g, ''); try { label = (f === 1 ? vl : vl + "_" + b[i].aggregator + "_" + i) } catch (e) { } } d[label] = g[label] = calculation(b[i].aggregator, d[label], b[i].member, a) } member[vl] = g } return d } if (o.rowTotals && o.yDimension.length > 0) { var m = o.yDimension[0].dataName; o.yDimension.splice(0, 0, { dataName: m }); o.yDimension[0].converter = function () { return '_r_Totals' } } xlen = $.isArray(o.xDimension) ? o.xDimension.length : 0; ylen = o.yDimension.length; aggrlen = $.isArray(o.aggregates) ? o.aggregates.length : 0; if (xlen === 0 || aggrlen === 0) { throw ("xDimension or aggregates optiona are not set!"); } var n; for (i = 0; i < xlen; i++) { n = { name: o.xDimension[i].dataName, frozen: o.frozenStaticCols }; n = $.extend(true, n, o.xDimension[i]); A.push(n) } var p = xlen - 1, tree = {}; while (r < rowlen) { h = y[r]; var q = []; var s = []; tmp = {}; i = 0; do { q[i] = $.trim(h[o.xDimension[i].dataName]); tmp[o.xDimension[i].dataName] = q[i]; i++ } while (i < xlen); var k = 0; rowindex = -1; newObj = find(pivotrows, findGroup, q); if (!newObj) { k = 0; if (ylen >= 1) { for (k = 0; k < ylen; k++) { s[k] = $.trim(h[o.yDimension[k].dataName]); if (o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) { s[k] = o.yDimension[k].converter.call(this, s[k], q, s) } } tmp = agregateFunc(h, o.aggregates, s, tmp) } else if (ylen === 0) { tmp = agregateFunc(h, o.aggregates, null, tmp) } pivotrows.push(tmp) } else { if (rowindex >= 0) { k = 0; if (ylen >= 1) { for (k = 0; k < ylen; k++) { s[k] = $.trim(h[o.yDimension[k].dataName]); if (o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) { s[k] = o.yDimension[k].converter.call(this, s[k], q, s) } } newObj = agregateFunc(h, o.aggregates, s, newObj) } else if (ylen === 0) { newObj = agregateFunc(h, o.aggregates, null, newObj) } pivotrows[rowindex] = newObj } } var t = 0, current = null, existing = null, kk; for (kk in member) { if (t === 0) { if (!tree.children || tree.children === undefined) { tree = { text: kk, level: 0, children: []} } current = tree.children } else { existing = null; for (i = 0; i < current.length; i++) { if (current[i].text === kk) { existing = current[i]; break } } if (existing) { current = existing.children } else { current.push({ children: [], text: kk, level: t, fields: member[kk] }); current = current[current.length - 1].children } } t++ } r++ } var u = [], initColLen = A.length, swaplen = initColLen; if (ylen > 0) { headers[ylen - 1] = { useColSpanStyle: false, groupHeaders: []} } function list(a) { var l, j, key, k, col; for (key in a) { if (a.hasOwnProperty(key)) { if (typeof a[key] !== "object") { if (key === 'level') { if (u[a.level] === undefined) { u[a.level] = ''; if (a.level > 0 && a.text !== '_r_Totals') { headers[a.level - 1] = { useColSpanStyle: false, groupHeaders: []} } } if (u[a.level] !== a.text && a.children.length && a.text !== '_r_Totals') { if (a.level > 0) { headers[a.level - 1].groupHeaders.push({ titleText: a.text }); var b = headers[a.level - 1].groupHeaders.length, colpos = b === 1 ? swaplen : initColLen + (b - 1) * aggrlen; headers[a.level - 1].groupHeaders[b - 1].startColumnName = A[colpos].name; headers[a.level - 1].groupHeaders[b - 1].numberOfColumns = A.length - colpos; initColLen = A.length } } u[a.level] = a.text } if (a.level === ylen && key === 'level' && ylen > 0) { if (aggrlen > 1) { var c = 1; for (l in a.fields) { if (c === 1) { headers[ylen - 1].groupHeaders.push({ startColumnName: l, numberOfColumns: 1, titleText: a.text }) } c++ } headers[ylen - 1].groupHeaders[headers[ylen - 1].groupHeaders.length - 1].numberOfColumns = c - 1 } else { headers.splice(ylen - 1, 1) } } } if (a[key] != null && typeof a[key] === "object") { list(a[key]) } if (key === 'level') { if (a.level > 0) { j = 0; for (l in a.fields) { col = {}; for (k in o.aggregates[j]) { if (o.aggregates[j].hasOwnProperty(k)) { switch (k) { case 'member': case 'label': case 'aggregator': break; default: col[k] = o.aggregates[j][k] } } } if (aggrlen > 1) { col.name = l; col.label = o.aggregates[j].label || l } else { col.name = a.text; col.label = a.text === '_r_Totals' ? o.rowTotalsText : a.text } A.push(col); j++ } } } } } } list(tree, 0); var w; if (o.colTotals) { var x = pivotrows.length; while (x--) { for (i = xlen; i < A.length; i++) { w = A[i].name; if (!summaries[w]) { summaries[w] = parseFloat(pivotrows[x][w] || 0) } else { summaries[w] += parseFloat(pivotrows[x][w] || 0) } } } } if (p > 0) { for (i = 0; i < p; i++) { groupOptions.groupingView.groupField[i] = A[i].name; groupOptions.groupingView.groupSummary[i] = o.groupSummary; groupOptions.groupingView.groupSummaryPos[i] = o.groupSummaryPos } } else { groupOptions.grouping = false } groupOptions.sortname = A[p].name; groupOptions.groupingView.hideFirstGroupCol = true }); return { "colModel": A, "rows": pivotrows, "groupOptions": groupOptions, "groupHeaders": headers, summary: summaries} }, jqPivot: function (e, f, g, h) { return this.each(function () { var d = this; function pivot(a) { var b = jQuery(d).jqGrid('pivotSetup', a, f), footerrow = $.assocArraySize(b.summary) > 0 ? true : false, query = $.jgrid.from(b.rows), i; for (i = 0; i < b.groupOptions.groupingView.groupField.length; i++) { query.orderBy(b.groupOptions.groupingView.groupField[i], "a", 'text', '') } jQuery(d).jqGrid($.extend({ datastr: $.extend(query.select(), footerrow ? { userdata: b.summary} : {}), datatype: "jsonstring", footerrow: footerrow, userDataOnFooter: footerrow, colModel: b.colModel, viewrecords: true, sortname: f.xDimension[0].dataName }, g || {}, b.groupOptions)); var c = b.groupHeaders; if (c.length) { for (i = 0; i < c.length; i++) { if (c[i] && c[i].groupHeaders.length) { jQuery(d).jqGrid('setGroupHeaders', c[i]) } } } if (f.frozenStaticCols) { jQuery(d).jqGrid("setFrozenColumns") } } if (typeof e === "string") { $.ajax($.extend({ url: e, dataType: 'json', success: function (a) { pivot($.jgrid.getAccessor(a, h && h.reader ? h.reader : 'rows')) } }, h || {})) } else { pivot(e) } }) } }) })(jQuery);